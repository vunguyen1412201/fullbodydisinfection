
CodeDoNhietDo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006420  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08006530  08006530  00016530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006944  08006944  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006944  08006944  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006944  08006944  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006944  08006944  00016944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006948  08006948  00016948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800694c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  200001dc  08006b28  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08006b28  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000936a  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df9  00000000  00000000  0002956f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002b368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002bde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018996  00000000  00000000  0002c7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf7d  00000000  00000000  0004513e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e95  00000000  00000000  000520bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7f50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c3c  00000000  00000000  000d7fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006518 	.word	0x08006518

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08006518 	.word	0x08006518

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__gesf2>:
 8000d44:	f04f 3cff 	mov.w	ip, #4294967295
 8000d48:	e006      	b.n	8000d58 <__cmpsf2+0x4>
 8000d4a:	bf00      	nop

08000d4c <__lesf2>:
 8000d4c:	f04f 0c01 	mov.w	ip, #1
 8000d50:	e002      	b.n	8000d58 <__cmpsf2+0x4>
 8000d52:	bf00      	nop

08000d54 <__cmpsf2>:
 8000d54:	f04f 0c01 	mov.w	ip, #1
 8000d58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d68:	bf18      	it	ne
 8000d6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d6e:	d011      	beq.n	8000d94 <__cmpsf2+0x40>
 8000d70:	b001      	add	sp, #4
 8000d72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d76:	bf18      	it	ne
 8000d78:	ea90 0f01 	teqne	r0, r1
 8000d7c:	bf58      	it	pl
 8000d7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d82:	bf88      	it	hi
 8000d84:	17c8      	asrhi	r0, r1, #31
 8000d86:	bf38      	it	cc
 8000d88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d8c:	bf18      	it	ne
 8000d8e:	f040 0001 	orrne.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	d102      	bne.n	8000da0 <__cmpsf2+0x4c>
 8000d9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d9e:	d105      	bne.n	8000dac <__cmpsf2+0x58>
 8000da0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000da4:	d1e4      	bne.n	8000d70 <__cmpsf2+0x1c>
 8000da6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000daa:	d0e1      	beq.n	8000d70 <__cmpsf2+0x1c>
 8000dac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <__aeabi_cfrcmple>:
 8000db4:	4684      	mov	ip, r0
 8000db6:	4608      	mov	r0, r1
 8000db8:	4661      	mov	r1, ip
 8000dba:	e7ff      	b.n	8000dbc <__aeabi_cfcmpeq>

08000dbc <__aeabi_cfcmpeq>:
 8000dbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dbe:	f7ff ffc9 	bl	8000d54 <__cmpsf2>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	bf48      	it	mi
 8000dc6:	f110 0f00 	cmnmi.w	r0, #0
 8000dca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dcc <__aeabi_fcmpeq>:
 8000dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd0:	f7ff fff4 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dd4:	bf0c      	ite	eq
 8000dd6:	2001      	moveq	r0, #1
 8000dd8:	2000      	movne	r0, #0
 8000dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dde:	bf00      	nop

08000de0 <__aeabi_fcmplt>:
 8000de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de4:	f7ff ffea 	bl	8000dbc <__aeabi_cfcmpeq>
 8000de8:	bf34      	ite	cc
 8000dea:	2001      	movcc	r0, #1
 8000dec:	2000      	movcs	r0, #0
 8000dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df2:	bf00      	nop

08000df4 <__aeabi_fcmple>:
 8000df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df8:	f7ff ffe0 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dfc:	bf94      	ite	ls
 8000dfe:	2001      	movls	r0, #1
 8000e00:	2000      	movhi	r0, #0
 8000e02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e06:	bf00      	nop

08000e08 <__aeabi_fcmpge>:
 8000e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e0c:	f7ff ffd2 	bl	8000db4 <__aeabi_cfrcmple>
 8000e10:	bf94      	ite	ls
 8000e12:	2001      	movls	r0, #1
 8000e14:	2000      	movhi	r0, #0
 8000e16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1a:	bf00      	nop

08000e1c <__aeabi_fcmpgt>:
 8000e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e20:	f7ff ffc8 	bl	8000db4 <__aeabi_cfrcmple>
 8000e24:	bf34      	ite	cc
 8000e26:	2001      	movcc	r0, #1
 8000e28:	2000      	movcs	r0, #0
 8000e2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e2e:	bf00      	nop

08000e30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e44:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <MX_GPIO_Init+0xa8>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a23      	ldr	r2, [pc, #140]	; (8000ed8 <MX_GPIO_Init+0xa8>)
 8000e4a:	f043 0310 	orr.w	r3, r3, #16
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <MX_GPIO_Init+0xa8>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0310 	and.w	r3, r3, #16
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <MX_GPIO_Init+0xa8>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <MX_GPIO_Init+0xa8>)
 8000e62:	f043 0320 	orr.w	r3, r3, #32
 8000e66:	6193      	str	r3, [r2, #24]
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <MX_GPIO_Init+0xa8>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0320 	and.w	r3, r3, #32
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_GPIO_Init+0xa8>)
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4a17      	ldr	r2, [pc, #92]	; (8000ed8 <MX_GPIO_Init+0xa8>)
 8000e7a:	f043 0304 	orr.w	r3, r3, #4
 8000e7e:	6193      	str	r3, [r2, #24]
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_GPIO_Init+0xa8>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_GPIO_Init+0xa8>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a11      	ldr	r2, [pc, #68]	; (8000ed8 <MX_GPIO_Init+0xa8>)
 8000e92:	f043 0308 	orr.w	r3, r3, #8
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_GPIO_Init+0xa8>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0308 	and.w	r3, r3, #8
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STT_GPIO_Port, LED_STT_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eaa:	480c      	ldr	r0, [pc, #48]	; (8000edc <MX_GPIO_Init+0xac>)
 8000eac:	f000 ff12 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_STT_Pin;
 8000eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_STT_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4804      	ldr	r0, [pc, #16]	; (8000edc <MX_GPIO_Init+0xac>)
 8000eca:	f000 fd7f 	bl	80019cc <HAL_GPIO_Init>

}
 8000ece:	bf00      	nop
 8000ed0:	3720      	adds	r7, #32
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40011000 	.word	0x40011000

08000ee0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <MX_I2C1_Init+0x50>)
 8000ee6:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <MX_I2C1_Init+0x54>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_I2C1_Init+0x50>)
 8000eec:	4a12      	ldr	r2, [pc, #72]	; (8000f38 <MX_I2C1_Init+0x58>)
 8000eee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ef0:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <MX_I2C1_Init+0x50>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_I2C1_Init+0x50>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_I2C1_Init+0x50>)
 8000efe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <MX_I2C1_Init+0x50>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_I2C1_Init+0x50>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <MX_I2C1_Init+0x50>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_I2C1_Init+0x50>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f1c:	4804      	ldr	r0, [pc, #16]	; (8000f30 <MX_I2C1_Init+0x50>)
 8000f1e:	f000 ff0b 	bl	8001d38 <HAL_I2C_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f28:	f000 f8c1 	bl	80010ae <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200001f8 	.word	0x200001f8
 8000f34:	40005400 	.word	0x40005400
 8000f38:	000186a0 	.word	0x000186a0

08000f3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a15      	ldr	r2, [pc, #84]	; (8000fac <HAL_I2C_MspInit+0x70>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d123      	bne.n	8000fa4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_I2C_MspInit+0x74>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a13      	ldr	r2, [pc, #76]	; (8000fb0 <HAL_I2C_MspInit+0x74>)
 8000f62:	f043 0308 	orr.w	r3, r3, #8
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <HAL_I2C_MspInit+0x74>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0308 	and.w	r3, r3, #8
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f74:	23c0      	movs	r3, #192	; 0xc0
 8000f76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f78:	2312      	movs	r3, #18
 8000f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	4619      	mov	r1, r3
 8000f86:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <HAL_I2C_MspInit+0x78>)
 8000f88:	f000 fd20 	bl	80019cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_I2C_MspInit+0x74>)
 8000f8e:	69db      	ldr	r3, [r3, #28]
 8000f90:	4a07      	ldr	r2, [pc, #28]	; (8000fb0 <HAL_I2C_MspInit+0x74>)
 8000f92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f96:	61d3      	str	r3, [r2, #28]
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_I2C_MspInit+0x74>)
 8000f9a:	69db      	ldr	r3, [r3, #28]
 8000f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	3720      	adds	r7, #32
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40005400 	.word	0x40005400
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40010c00 	.word	0x40010c00

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbe:	f000 fb9b 	bl	80016f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc2:	f000 f833 	bl	800102c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc6:	f7ff ff33 	bl	8000e30 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fca:	f7ff ff89 	bl	8000ee0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000fce:	f000 f983 	bl	80012d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000fd2:	f000 fafb 	bl	80015cc <lcd_init>
  HAL_Delay(100);
 8000fd6:	2064      	movs	r0, #100	; 0x64
 8000fd8:	f000 fbf0 	bl	80017bc <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  float nhiet_do=readObjectTempC();
 8000fdc:	f000 fa17 	bl	800140e <readObjectTempC>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	f7ff fd4e 	bl	8000a88 <__aeabi_d2f>
 8000fec:	4603      	mov	r3, r0
 8000fee:	607b      	str	r3, [r7, #4]
	  sprintf(txt,"Nhiet do: %0.2f",nhiet_do);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff fa19 	bl	8000428 <__aeabi_f2d>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4909      	ldr	r1, [pc, #36]	; (8001020 <main+0x68>)
 8000ffc:	4809      	ldr	r0, [pc, #36]	; (8001024 <main+0x6c>)
 8000ffe:	f003 f813 	bl	8004028 <siprintf>
	  lcd_string(1, 1, txt);
 8001002:	4a08      	ldr	r2, [pc, #32]	; (8001024 <main+0x6c>)
 8001004:	2101      	movs	r1, #1
 8001006:	2001      	movs	r0, #1
 8001008:	f000 fb5f 	bl	80016ca <lcd_string>
	  HAL_GPIO_TogglePin(LED_STT_GPIO_Port, LED_STT_Pin);
 800100c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001010:	4805      	ldr	r0, [pc, #20]	; (8001028 <main+0x70>)
 8001012:	f000 fe77 	bl	8001d04 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001016:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800101a:	f000 fbcf 	bl	80017bc <HAL_Delay>
  {
 800101e:	e7dd      	b.n	8000fdc <main+0x24>
 8001020:	08006530 	.word	0x08006530
 8001024:	2000024c 	.word	0x2000024c
 8001028:	40011000 	.word	0x40011000

0800102c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b090      	sub	sp, #64	; 0x40
 8001030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001032:	f107 0318 	add.w	r3, r7, #24
 8001036:	2228      	movs	r2, #40	; 0x28
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f002 fb8c 	bl	8003758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800104e:	2302      	movs	r3, #2
 8001050:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001052:	2301      	movs	r3, #1
 8001054:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001056:	2310      	movs	r3, #16
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105a:	2302      	movs	r3, #2
 800105c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800105e:	2300      	movs	r3, #0
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001062:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001068:	f107 0318 	add.w	r3, r7, #24
 800106c:	4618      	mov	r0, r3
 800106e:	f001 fe53 	bl	8002d18 <HAL_RCC_OscConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001078:	f000 f819 	bl	80010ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107c:	230f      	movs	r3, #15
 800107e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001080:	2302      	movs	r3, #2
 8001082:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800108c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2101      	movs	r1, #1
 8001096:	4618      	mov	r0, r3
 8001098:	f002 f8c0 	bl	800321c <HAL_RCC_ClockConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80010a2:	f000 f804 	bl	80010ae <Error_Handler>
  }
}
 80010a6:	bf00      	nop
 80010a8:	3740      	adds	r7, #64	; 0x40
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b2:	b672      	cpsid	i
}
 80010b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <Error_Handler+0x8>

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_MspInit+0x40>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <HAL_MspInit+0x40>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6193      	str	r3, [r2, #24]
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_MspInit+0x40>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_MspInit+0x40>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_MspInit+0x40>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_MspInit+0x40>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	40021000 	.word	0x40021000

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <NMI_Handler+0x4>

08001102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <MemManage_Handler+0x4>

0800110e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <BusFault_Handler+0x4>

08001114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <UsageFault_Handler+0x4>

0800111a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr

08001132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001142:	f000 fb1f 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}

0800114a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  return 1;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <_kill>:

int _kill(int pid, int sig)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001162:	f002 facf 	bl	8003704 <__errno>
 8001166:	4603      	mov	r3, r0
 8001168:	2216      	movs	r2, #22
 800116a:	601a      	str	r2, [r3, #0]
  return -1;
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001170:	4618      	mov	r0, r3
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <_exit>:

void _exit (int status)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001180:	f04f 31ff 	mov.w	r1, #4294967295
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ffe7 	bl	8001158 <_kill>
  while (1) {}    /* Make sure we hang here */
 800118a:	e7fe      	b.n	800118a <_exit+0x12>

0800118c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	e00a      	b.n	80011b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800119e:	f3af 8000 	nop.w
 80011a2:	4601      	mov	r1, r0
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	60ba      	str	r2, [r7, #8]
 80011aa:	b2ca      	uxtb	r2, r1
 80011ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3301      	adds	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	dbf0      	blt.n	800119e <_read+0x12>
  }

  return len;
 80011bc:	687b      	ldr	r3, [r7, #4]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	60f8      	str	r0, [r7, #12]
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	e009      	b.n	80011ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	1c5a      	adds	r2, r3, #1
 80011dc:	60ba      	str	r2, [r7, #8]
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	dbf1      	blt.n	80011d8 <_write+0x12>
  }
  return len;
 80011f4:	687b      	ldr	r3, [r7, #4]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <_close>:

int _close(int file)
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001206:	f04f 33ff 	mov.w	r3, #4294967295
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001224:	605a      	str	r2, [r3, #4]
  return 0;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <_isatty>:

int _isatty(int file)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr

08001246 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001246:	b480      	push	{r7}
 8001248:	b085      	sub	sp, #20
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
	...

08001260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001268:	4a14      	ldr	r2, [pc, #80]	; (80012bc <_sbrk+0x5c>)
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <_sbrk+0x60>)
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <_sbrk+0x64>)
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <_sbrk+0x68>)
 8001280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	429a      	cmp	r2, r3
 800128e:	d207      	bcs.n	80012a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001290:	f002 fa38 	bl	8003704 <__errno>
 8001294:	4603      	mov	r3, r0
 8001296:	220c      	movs	r2, #12
 8001298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	e009      	b.n	80012b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a0:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <_sbrk+0x64>)
 80012b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20005000 	.word	0x20005000
 80012c0:	00000400 	.word	0x00000400
 80012c4:	2000026c 	.word	0x2000026c
 80012c8:	200002c8 	.word	0x200002c8

080012cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr

080012d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_USART1_UART_Init+0x4c>)
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <MX_USART1_UART_Init+0x50>)
 80012e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <MX_USART1_UART_Init+0x4c>)
 80012e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_USART1_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_USART1_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <MX_USART1_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_USART1_UART_Init+0x4c>)
 80012fe:	220c      	movs	r2, #12
 8001300:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <MX_USART1_UART_Init+0x4c>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_USART1_UART_Init+0x4c>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_USART1_UART_Init+0x4c>)
 8001310:	f002 f91c 	bl	800354c <HAL_UART_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800131a:	f7ff fec8 	bl	80010ae <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000270 	.word	0x20000270
 8001328:	40013800 	.word	0x40013800

0800132c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a1c      	ldr	r2, [pc, #112]	; (80013b8 <HAL_UART_MspInit+0x8c>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d131      	bne.n	80013b0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800134c:	4b1b      	ldr	r3, [pc, #108]	; (80013bc <HAL_UART_MspInit+0x90>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a1a      	ldr	r2, [pc, #104]	; (80013bc <HAL_UART_MspInit+0x90>)
 8001352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_UART_MspInit+0x90>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001364:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_UART_MspInit+0x90>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a14      	ldr	r2, [pc, #80]	; (80013bc <HAL_UART_MspInit+0x90>)
 800136a:	f043 0304 	orr.w	r3, r3, #4
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_UART_MspInit+0x90>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800137c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001380:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 0310 	add.w	r3, r7, #16
 800138e:	4619      	mov	r1, r3
 8001390:	480b      	ldr	r0, [pc, #44]	; (80013c0 <HAL_UART_MspInit+0x94>)
 8001392:	f000 fb1b 	bl	80019cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800139a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	4619      	mov	r1, r3
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <HAL_UART_MspInit+0x94>)
 80013ac:	f000 fb0e 	bl	80019cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80013b0:	bf00      	nop
 80013b2:	3720      	adds	r7, #32
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40013800 	.word	0x40013800
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40010800 	.word	0x40010800

080013c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013c6:	490d      	ldr	r1, [pc, #52]	; (80013fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c8:	4a0d      	ldr	r2, [pc, #52]	; (8001400 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013cc:	e002      	b.n	80013d4 <LoopCopyDataInit>

080013ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d2:	3304      	adds	r3, #4

080013d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d8:	d3f9      	bcc.n	80013ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013dc:	4c0a      	ldr	r4, [pc, #40]	; (8001408 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e0:	e001      	b.n	80013e6 <LoopFillZerobss>

080013e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e4:	3204      	adds	r2, #4

080013e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e8:	d3fb      	bcc.n	80013e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013ea:	f7ff ff6f 	bl	80012cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ee:	f002 f98f 	bl	8003710 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013f2:	f7ff fde1 	bl	8000fb8 <main>
  bx lr
 80013f6:	4770      	bx	lr
  ldr r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013fc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001400:	0800694c 	.word	0x0800694c
  ldr r2, =_sbss
 8001404:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001408:	200002c8 	.word	0x200002c8

0800140c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC1_2_IRQHandler>

0800140e <readObjectTempC>:
/**
 * @brief Get the current temperature of an object in degrees Celcius
 *
 * @return double The temperature in degrees Celcius or NAN if reading failed
 */
double readObjectTempC(void) {
 800140e:	b580      	push	{r7, lr}
 8001410:	af00      	add	r7, sp, #0
  return readTemp(MLX90614_TOBJ1);
 8001412:	2007      	movs	r0, #7
 8001414:	f000 f80c 	bl	8001430 <readTemp>
 8001418:	4603      	mov	r3, r0
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff f804 	bl	8000428 <__aeabi_f2d>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
}
 8001424:	4610      	mov	r0, r2
 8001426:	4619      	mov	r1, r3
 8001428:	bd80      	pop	{r7, pc}
 800142a:	0000      	movs	r0, r0
 800142c:	0000      	movs	r0, r0
	...

08001430 <readTemp>:
 */
double readAmbientTempC(void) {
  return readTemp(MLX90614_TA);
}

float readTemp(unsigned char reg) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  float temp;

  temp = read16(reg);
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	4618      	mov	r0, r3
 800143e:	f000 f83f 	bl	80014c0 <read16>
 8001442:	4603      	mov	r3, r0
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fc25 	bl	8000c94 <__aeabi_ui2f>
 800144a:	4603      	mov	r3, r0
 800144c:	60fb      	str	r3, [r7, #12]
  if (temp == 0)
 800144e:	f04f 0100 	mov.w	r1, #0
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f7ff fcba 	bl	8000dcc <__aeabi_fcmpeq>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <readTemp+0x34>
    return 0;
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	e020      	b.n	80014a6 <readTemp+0x76>
  temp *= .02;
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f7fe ffdf 	bl	8000428 <__aeabi_f2d>
 800146a:	a311      	add	r3, pc, #68	; (adr r3, 80014b0 <readTemp+0x80>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7ff f832 	bl	80004d8 <__aeabi_dmul>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4610      	mov	r0, r2
 800147a:	4619      	mov	r1, r3
 800147c:	f7ff fb04 	bl	8000a88 <__aeabi_d2f>
 8001480:	4603      	mov	r3, r0
 8001482:	60fb      	str	r3, [r7, #12]
  temp -= 273.15;
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f7fe ffcf 	bl	8000428 <__aeabi_f2d>
 800148a:	a30b      	add	r3, pc, #44	; (adr r3, 80014b8 <readTemp+0x88>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	f7fe fe6a 	bl	8000168 <__aeabi_dsub>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	f7ff faf4 	bl	8000a88 <__aeabi_d2f>
 80014a0:	4603      	mov	r3, r0
 80014a2:	60fb      	str	r3, [r7, #12]
  return temp;
 80014a4:	68fb      	ldr	r3, [r7, #12]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	47ae147b 	.word	0x47ae147b
 80014b4:	3f947ae1 	.word	0x3f947ae1
 80014b8:	66666666 	.word	0x66666666
 80014bc:	40711266 	.word	0x40711266

080014c0 <read16>:

/*********************************************************************/

unsigned int read16(unsigned char a) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af04      	add	r7, sp, #16
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  unsigned char buffer[3];
  buffer[0] = a;
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	733b      	strb	r3, [r7, #12]
   buffer[0]  = I2C_Master_Read(1);                         // Read month from register 5
   buffer[1]   = I2C_Master_Read(0);                         // Read year from register 6
   I2C_Master_Stop(); 
   */
  uint8_t reg[1];
  reg[0]=a;
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	723b      	strb	r3, [r7, #8]
 // HAL_I2C_Master_Transmit(&hi2c1,MLX90614_I2CADDR,reg,1,100);
 // HAL_I2C_Master_Receive(&hi2c1,MLX90614_I2CADDR,buffer,2,100);

  HAL_I2C_Mem_Read(&hi2c1, MLX90614_I2CADDR, a, 1, buffer, 2, 1000);
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014da:	9302      	str	r3, [sp, #8]
 80014dc:	2302      	movs	r3, #2
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2301      	movs	r3, #1
 80014e8:	21b4      	movs	r1, #180	; 0xb4
 80014ea:	4806      	ldr	r0, [pc, #24]	; (8001504 <read16+0x44>)
 80014ec:	f000 fe66 	bl	80021bc <HAL_I2C_Mem_Read>


  // return data, ignore pec
  return ((unsigned int)(buffer[0])) | ((unsigned int)(buffer[1]) << 8);
 80014f0:	7b3b      	ldrb	r3, [r7, #12]
 80014f2:	461a      	mov	r2, r3
 80014f4:	7b7b      	ldrb	r3, [r7, #13]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	4313      	orrs	r3, r2
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200001f8 	.word	0x200001f8

08001508 <lcd_send_cmd>:
//extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af02      	add	r7, sp, #8
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f023 030f 	bic.w	r3, r3, #15
 8001518:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	f043 030c 	orr.w	r3, r3, #12
 8001526:	b2db      	uxtb	r3, r3
 8001528:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	f043 0308 	orr.w	r3, r3, #8
 8001530:	b2db      	uxtb	r3, r3
 8001532:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001534:	7bbb      	ldrb	r3, [r7, #14]
 8001536:	f043 030c 	orr.w	r3, r3, #12
 800153a:	b2db      	uxtb	r3, r3
 800153c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800153e:	7bbb      	ldrb	r3, [r7, #14]
 8001540:	f043 0308 	orr.w	r3, r3, #8
 8001544:	b2db      	uxtb	r3, r3
 8001546:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001548:	f107 0208 	add.w	r2, r7, #8
 800154c:	2364      	movs	r3, #100	; 0x64
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2304      	movs	r3, #4
 8001552:	214e      	movs	r1, #78	; 0x4e
 8001554:	4804      	ldr	r0, [pc, #16]	; (8001568 <lcd_send_cmd+0x60>)
 8001556:	f000 fd33 	bl	8001fc0 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800155a:	2001      	movs	r0, #1
 800155c:	f000 f92e 	bl	80017bc <HAL_Delay>
}
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200001f8 	.word	0x200001f8

0800156c <lcd_send_data>:

void lcd_send_data (char data)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af02      	add	r7, sp, #8
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	f023 030f 	bic.w	r3, r3, #15
 800157c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001584:	7bfb      	ldrb	r3, [r7, #15]
 8001586:	f043 030d 	orr.w	r3, r3, #13
 800158a:	b2db      	uxtb	r3, r3
 800158c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	f043 0309 	orr.w	r3, r3, #9
 8001594:	b2db      	uxtb	r3, r3
 8001596:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001598:	7bbb      	ldrb	r3, [r7, #14]
 800159a:	f043 030d 	orr.w	r3, r3, #13
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80015a2:	7bbb      	ldrb	r3, [r7, #14]
 80015a4:	f043 0309 	orr.w	r3, r3, #9
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80015ac:	f107 0208 	add.w	r2, r7, #8
 80015b0:	2364      	movs	r3, #100	; 0x64
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	2304      	movs	r3, #4
 80015b6:	214e      	movs	r1, #78	; 0x4e
 80015b8:	4803      	ldr	r0, [pc, #12]	; (80015c8 <lcd_send_data+0x5c>)
 80015ba:	f000 fd01 	bl	8001fc0 <HAL_I2C_Master_Transmit>
}
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	200001f8 	.word	0x200001f8

080015cc <lcd_init>:

void lcd_init (void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80015d0:	2033      	movs	r0, #51	; 0x33
 80015d2:	f7ff ff99 	bl	8001508 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80015d6:	2032      	movs	r0, #50	; 0x32
 80015d8:	f7ff ff96 	bl	8001508 <lcd_send_cmd>
	HAL_Delay(50);
 80015dc:	2032      	movs	r0, #50	; 0x32
 80015de:	f000 f8ed 	bl	80017bc <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80015e2:	2028      	movs	r0, #40	; 0x28
 80015e4:	f7ff ff90 	bl	8001508 <lcd_send_cmd>
	HAL_Delay(50);
 80015e8:	2032      	movs	r0, #50	; 0x32
 80015ea:	f000 f8e7 	bl	80017bc <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 80015ee:	2001      	movs	r0, #1
 80015f0:	f7ff ff8a 	bl	8001508 <lcd_send_cmd>
	HAL_Delay(70);
 80015f4:	2046      	movs	r0, #70	; 0x46
 80015f6:	f000 f8e1 	bl	80017bc <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 80015fa:	2006      	movs	r0, #6
 80015fc:	f7ff ff84 	bl	8001508 <lcd_send_cmd>
	HAL_Delay(50);
 8001600:	2032      	movs	r0, #50	; 0x32
 8001602:	f000 f8db 	bl	80017bc <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8001606:	200c      	movs	r0, #12
 8001608:	f7ff ff7e 	bl	8001508 <lcd_send_cmd>
	HAL_Delay(50);
 800160c:	2032      	movs	r0, #50	; 0x32
 800160e:	f000 f8d5 	bl	80017bc <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8001612:	2002      	movs	r0, #2
 8001614:	f7ff ff78 	bl	8001508 <lcd_send_cmd>
	HAL_Delay(50);
 8001618:	2032      	movs	r0, #50	; 0x32
 800161a:	f000 f8cf 	bl	80017bc <HAL_Delay>
	lcd_send_cmd (0x80);
 800161e:	2080      	movs	r0, #128	; 0x80
 8001620:	f7ff ff72 	bl	8001508 <lcd_send_cmd>
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}

08001628 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001630:	e006      	b.n	8001640 <lcd_send_string+0x18>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff96 	bl	800156c <lcd_send_data>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1f4      	bne.n	8001632 <lcd_send_string+0xa>
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d108      	bne.n	8001674 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	4413      	add	r3, r2
 800166c:	b2db      	uxtb	r3, r3
 800166e:	337f      	adds	r3, #127	; 0x7f
 8001670:	73fb      	strb	r3, [r7, #15]
 8001672:	e022      	b.n	80016ba <lcd_goto_XY+0x68>
	}
	else if(row==2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d109      	bne.n	800168e <lcd_goto_XY+0x3c>
	{
		pos_Addr = 0x80 | (0x40 + col);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	3340      	adds	r3, #64	; 0x40
 8001680:	b2db      	uxtb	r3, r3
 8001682:	b25b      	sxtb	r3, r3
 8001684:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001688:	b25b      	sxtb	r3, r3
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	e015      	b.n	80016ba <lcd_goto_XY+0x68>
	}
	else if(row==3)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b03      	cmp	r3, #3
 8001692:	d109      	bne.n	80016a8 <lcd_goto_XY+0x56>
	{
		pos_Addr = 0x80 | (0x14 + col);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	3314      	adds	r3, #20
 800169a:	b2db      	uxtb	r3, r3
 800169c:	b25b      	sxtb	r3, r3
 800169e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016a2:	b25b      	sxtb	r3, r3
 80016a4:	73fb      	strb	r3, [r7, #15]
 80016a6:	e008      	b.n	80016ba <lcd_goto_XY+0x68>
	}
	else
	{
		pos_Addr = 0x80 | (0x54 + col);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	3354      	adds	r3, #84	; 0x54
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	73fb      	strb	r3, [r7, #15]
	}

	lcd_send_cmd(pos_Addr);
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff23 	bl	8001508 <lcd_send_cmd>
}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <lcd_string>:


void lcd_string(char hang,char cot,char *str)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	603a      	str	r2, [r7, #0]
 80016d4:	71fb      	strb	r3, [r7, #7]
 80016d6:	460b      	mov	r3, r1
 80016d8:	71bb      	strb	r3, [r7, #6]
	lcd_xy(hang,cot-1);
 80016da:	79fa      	ldrb	r2, [r7, #7]
 80016dc:	79bb      	ldrb	r3, [r7, #6]
 80016de:	3b01      	subs	r3, #1
 80016e0:	4619      	mov	r1, r3
 80016e2:	4610      	mov	r0, r2
 80016e4:	f7ff ffb5 	bl	8001652 <lcd_goto_XY>
	lcd_send_string(str);
 80016e8:	6838      	ldr	r0, [r7, #0]
 80016ea:	f7ff ff9d 	bl	8001628 <lcd_send_string>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_Init+0x28>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <HAL_Init+0x28>)
 8001702:	f043 0310 	orr.w	r3, r3, #16
 8001706:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001708:	2003      	movs	r0, #3
 800170a:	f000 f92b 	bl	8001964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170e:	200f      	movs	r0, #15
 8001710:	f000 f808 	bl	8001724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001714:	f7ff fcd0 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40022000 	.word	0x40022000

08001724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_InitTick+0x54>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x58>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	4619      	mov	r1, r3
 8001736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173a:	fbb3 f3f1 	udiv	r3, r3, r1
 800173e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f935 	bl	80019b2 <HAL_SYSTICK_Config>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e00e      	b.n	8001770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b0f      	cmp	r3, #15
 8001756:	d80a      	bhi.n	800176e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001758:	2200      	movs	r2, #0
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f000 f90b 	bl	800197a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001764:	4a06      	ldr	r2, [pc, #24]	; (8001780 <HAL_InitTick+0x5c>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000000 	.word	0x20000000
 800177c:	20000008 	.word	0x20000008
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_IncTick+0x1c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_IncTick+0x20>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a03      	ldr	r2, [pc, #12]	; (80017a4 <HAL_IncTick+0x20>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	20000008 	.word	0x20000008
 80017a4:	200002b4 	.word	0x200002b4

080017a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return uwTick;
 80017ac:	4b02      	ldr	r3, [pc, #8]	; (80017b8 <HAL_GetTick+0x10>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	200002b4 	.word	0x200002b4

080017bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff fff0 	bl	80017a8 <HAL_GetTick>
 80017c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d4:	d005      	beq.n	80017e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_Delay+0x44>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017e2:	bf00      	nop
 80017e4:	f7ff ffe0 	bl	80017a8 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d8f7      	bhi.n	80017e4 <HAL_Delay+0x28>
  {
  }
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000008 	.word	0x20000008

08001804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001820:	4013      	ands	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800182c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001836:	4a04      	ldr	r2, [pc, #16]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	bc80      	pop	{r7}
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <__NVIC_GetPriorityGrouping+0x18>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	f003 0307 	and.w	r3, r3, #7
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	db0a      	blt.n	8001892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	490c      	ldr	r1, [pc, #48]	; (80018b4 <__NVIC_SetPriority+0x4c>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	0112      	lsls	r2, r2, #4
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	440b      	add	r3, r1
 800188c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001890:	e00a      	b.n	80018a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4908      	ldr	r1, [pc, #32]	; (80018b8 <__NVIC_SetPriority+0x50>)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	3b04      	subs	r3, #4
 80018a0:	0112      	lsls	r2, r2, #4
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	440b      	add	r3, r1
 80018a6:	761a      	strb	r2, [r3, #24]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000e100 	.word	0xe000e100
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f1c3 0307 	rsb	r3, r3, #7
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	bf28      	it	cs
 80018da:	2304      	movcs	r3, #4
 80018dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3304      	adds	r3, #4
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d902      	bls.n	80018ec <NVIC_EncodePriority+0x30>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3b03      	subs	r3, #3
 80018ea:	e000      	b.n	80018ee <NVIC_EncodePriority+0x32>
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43da      	mvns	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	401a      	ands	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001904:	f04f 31ff 	mov.w	r1, #4294967295
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	43d9      	mvns	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	4313      	orrs	r3, r2
         );
}
 8001916:	4618      	mov	r0, r3
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001930:	d301      	bcc.n	8001936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001932:	2301      	movs	r3, #1
 8001934:	e00f      	b.n	8001956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <SysTick_Config+0x40>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193e:	210f      	movs	r1, #15
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f7ff ff90 	bl	8001868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <SysTick_Config+0x40>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194e:	4b04      	ldr	r3, [pc, #16]	; (8001960 <SysTick_Config+0x40>)
 8001950:	2207      	movs	r2, #7
 8001952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	e000e010 	.word	0xe000e010

08001964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff49 	bl	8001804 <__NVIC_SetPriorityGrouping>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800198c:	f7ff ff5e 	bl	800184c <__NVIC_GetPriorityGrouping>
 8001990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	6978      	ldr	r0, [r7, #20]
 8001998:	f7ff ff90 	bl	80018bc <NVIC_EncodePriority>
 800199c:	4602      	mov	r2, r0
 800199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff5f 	bl	8001868 <__NVIC_SetPriority>
}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ffb0 	bl	8001920 <SysTick_Config>
 80019c0:	4603      	mov	r3, r0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b08b      	sub	sp, #44	; 0x2c
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019de:	e169      	b.n	8001cb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019e0:	2201      	movs	r2, #1
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	f040 8158 	bne.w	8001cae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4a9a      	ldr	r2, [pc, #616]	; (8001c6c <HAL_GPIO_Init+0x2a0>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d05e      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a08:	4a98      	ldr	r2, [pc, #608]	; (8001c6c <HAL_GPIO_Init+0x2a0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d875      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a0e:	4a98      	ldr	r2, [pc, #608]	; (8001c70 <HAL_GPIO_Init+0x2a4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d058      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a14:	4a96      	ldr	r2, [pc, #600]	; (8001c70 <HAL_GPIO_Init+0x2a4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d86f      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a1a:	4a96      	ldr	r2, [pc, #600]	; (8001c74 <HAL_GPIO_Init+0x2a8>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d052      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a20:	4a94      	ldr	r2, [pc, #592]	; (8001c74 <HAL_GPIO_Init+0x2a8>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d869      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a26:	4a94      	ldr	r2, [pc, #592]	; (8001c78 <HAL_GPIO_Init+0x2ac>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d04c      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a2c:	4a92      	ldr	r2, [pc, #584]	; (8001c78 <HAL_GPIO_Init+0x2ac>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d863      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a32:	4a92      	ldr	r2, [pc, #584]	; (8001c7c <HAL_GPIO_Init+0x2b0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d046      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a38:	4a90      	ldr	r2, [pc, #576]	; (8001c7c <HAL_GPIO_Init+0x2b0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d85d      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a3e:	2b12      	cmp	r3, #18
 8001a40:	d82a      	bhi.n	8001a98 <HAL_GPIO_Init+0xcc>
 8001a42:	2b12      	cmp	r3, #18
 8001a44:	d859      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a46:	a201      	add	r2, pc, #4	; (adr r2, 8001a4c <HAL_GPIO_Init+0x80>)
 8001a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4c:	08001ac7 	.word	0x08001ac7
 8001a50:	08001aa1 	.word	0x08001aa1
 8001a54:	08001ab3 	.word	0x08001ab3
 8001a58:	08001af5 	.word	0x08001af5
 8001a5c:	08001afb 	.word	0x08001afb
 8001a60:	08001afb 	.word	0x08001afb
 8001a64:	08001afb 	.word	0x08001afb
 8001a68:	08001afb 	.word	0x08001afb
 8001a6c:	08001afb 	.word	0x08001afb
 8001a70:	08001afb 	.word	0x08001afb
 8001a74:	08001afb 	.word	0x08001afb
 8001a78:	08001afb 	.word	0x08001afb
 8001a7c:	08001afb 	.word	0x08001afb
 8001a80:	08001afb 	.word	0x08001afb
 8001a84:	08001afb 	.word	0x08001afb
 8001a88:	08001afb 	.word	0x08001afb
 8001a8c:	08001afb 	.word	0x08001afb
 8001a90:	08001aa9 	.word	0x08001aa9
 8001a94:	08001abd 	.word	0x08001abd
 8001a98:	4a79      	ldr	r2, [pc, #484]	; (8001c80 <HAL_GPIO_Init+0x2b4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a9e:	e02c      	b.n	8001afa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	623b      	str	r3, [r7, #32]
          break;
 8001aa6:	e029      	b.n	8001afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	3304      	adds	r3, #4
 8001aae:	623b      	str	r3, [r7, #32]
          break;
 8001ab0:	e024      	b.n	8001afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	3308      	adds	r3, #8
 8001ab8:	623b      	str	r3, [r7, #32]
          break;
 8001aba:	e01f      	b.n	8001afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	330c      	adds	r3, #12
 8001ac2:	623b      	str	r3, [r7, #32]
          break;
 8001ac4:	e01a      	b.n	8001afc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d102      	bne.n	8001ad4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ace:	2304      	movs	r3, #4
 8001ad0:	623b      	str	r3, [r7, #32]
          break;
 8001ad2:	e013      	b.n	8001afc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d105      	bne.n	8001ae8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001adc:	2308      	movs	r3, #8
 8001ade:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	611a      	str	r2, [r3, #16]
          break;
 8001ae6:	e009      	b.n	8001afc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ae8:	2308      	movs	r3, #8
 8001aea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	615a      	str	r2, [r3, #20]
          break;
 8001af2:	e003      	b.n	8001afc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001af4:	2300      	movs	r3, #0
 8001af6:	623b      	str	r3, [r7, #32]
          break;
 8001af8:	e000      	b.n	8001afc <HAL_GPIO_Init+0x130>
          break;
 8001afa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2bff      	cmp	r3, #255	; 0xff
 8001b00:	d801      	bhi.n	8001b06 <HAL_GPIO_Init+0x13a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	e001      	b.n	8001b0a <HAL_GPIO_Init+0x13e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	2bff      	cmp	r3, #255	; 0xff
 8001b10:	d802      	bhi.n	8001b18 <HAL_GPIO_Init+0x14c>
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	e002      	b.n	8001b1e <HAL_GPIO_Init+0x152>
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	3b08      	subs	r3, #8
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	210f      	movs	r1, #15
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	401a      	ands	r2, r3
 8001b30:	6a39      	ldr	r1, [r7, #32]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	fa01 f303 	lsl.w	r3, r1, r3
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 80b1 	beq.w	8001cae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b4c:	4b4d      	ldr	r3, [pc, #308]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a4c      	ldr	r2, [pc, #304]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b4a      	ldr	r3, [pc, #296]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b64:	4a48      	ldr	r2, [pc, #288]	; (8001c88 <HAL_GPIO_Init+0x2bc>)
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	089b      	lsrs	r3, r3, #2
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a40      	ldr	r2, [pc, #256]	; (8001c8c <HAL_GPIO_Init+0x2c0>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d013      	beq.n	8001bb8 <HAL_GPIO_Init+0x1ec>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a3f      	ldr	r2, [pc, #252]	; (8001c90 <HAL_GPIO_Init+0x2c4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d00d      	beq.n	8001bb4 <HAL_GPIO_Init+0x1e8>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a3e      	ldr	r2, [pc, #248]	; (8001c94 <HAL_GPIO_Init+0x2c8>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d007      	beq.n	8001bb0 <HAL_GPIO_Init+0x1e4>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a3d      	ldr	r2, [pc, #244]	; (8001c98 <HAL_GPIO_Init+0x2cc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d101      	bne.n	8001bac <HAL_GPIO_Init+0x1e0>
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e006      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bac:	2304      	movs	r3, #4
 8001bae:	e004      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e002      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bbc:	f002 0203 	and.w	r2, r2, #3
 8001bc0:	0092      	lsls	r2, r2, #2
 8001bc2:	4093      	lsls	r3, r2
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bca:	492f      	ldr	r1, [pc, #188]	; (8001c88 <HAL_GPIO_Init+0x2bc>)
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d006      	beq.n	8001bf2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001be4:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	492c      	ldr	r1, [pc, #176]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	600b      	str	r3, [r1, #0]
 8001bf0:	e006      	b.n	8001c00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	4928      	ldr	r1, [pc, #160]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c0c:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	4922      	ldr	r1, [pc, #136]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	491e      	ldr	r1, [pc, #120]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d006      	beq.n	8001c42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	4918      	ldr	r1, [pc, #96]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	608b      	str	r3, [r1, #8]
 8001c40:	e006      	b.n	8001c50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	4914      	ldr	r1, [pc, #80]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d021      	beq.n	8001ca0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	490e      	ldr	r1, [pc, #56]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	60cb      	str	r3, [r1, #12]
 8001c68:	e021      	b.n	8001cae <HAL_GPIO_Init+0x2e2>
 8001c6a:	bf00      	nop
 8001c6c:	10320000 	.word	0x10320000
 8001c70:	10310000 	.word	0x10310000
 8001c74:	10220000 	.word	0x10220000
 8001c78:	10210000 	.word	0x10210000
 8001c7c:	10120000 	.word	0x10120000
 8001c80:	10110000 	.word	0x10110000
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40010000 	.word	0x40010000
 8001c8c:	40010800 	.word	0x40010800
 8001c90:	40010c00 	.word	0x40010c00
 8001c94:	40011000 	.word	0x40011000
 8001c98:	40011400 	.word	0x40011400
 8001c9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_GPIO_Init+0x304>)
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	4909      	ldr	r1, [pc, #36]	; (8001cd0 <HAL_GPIO_Init+0x304>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f47f ae8e 	bne.w	80019e0 <HAL_GPIO_Init+0x14>
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	372c      	adds	r7, #44	; 0x2c
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	40010400 	.word	0x40010400

08001cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ce4:	787b      	ldrb	r3, [r7, #1]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cea:	887a      	ldrh	r2, [r7, #2]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cf0:	e003      	b.n	8001cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cf2:	887b      	ldrh	r3, [r7, #2]
 8001cf4:	041a      	lsls	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	611a      	str	r2, [r3, #16]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	041a      	lsls	r2, r3, #16
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	43d9      	mvns	r1, r3
 8001d22:	887b      	ldrh	r3, [r7, #2]
 8001d24:	400b      	ands	r3, r1
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	611a      	str	r2, [r3, #16]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
	...

08001d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e12b      	b.n	8001fa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d106      	bne.n	8001d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff f8ec 	bl	8000f3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2224      	movs	r2, #36	; 0x24
 8001d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0201 	bic.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d9c:	f001 fb90 	bl	80034c0 <HAL_RCC_GetPCLK1Freq>
 8001da0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4a81      	ldr	r2, [pc, #516]	; (8001fac <HAL_I2C_Init+0x274>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d807      	bhi.n	8001dbc <HAL_I2C_Init+0x84>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4a80      	ldr	r2, [pc, #512]	; (8001fb0 <HAL_I2C_Init+0x278>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	bf94      	ite	ls
 8001db4:	2301      	movls	r3, #1
 8001db6:	2300      	movhi	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	e006      	b.n	8001dca <HAL_I2C_Init+0x92>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4a7d      	ldr	r2, [pc, #500]	; (8001fb4 <HAL_I2C_Init+0x27c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	bf94      	ite	ls
 8001dc4:	2301      	movls	r3, #1
 8001dc6:	2300      	movhi	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e0e7      	b.n	8001fa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4a78      	ldr	r2, [pc, #480]	; (8001fb8 <HAL_I2C_Init+0x280>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	0c9b      	lsrs	r3, r3, #18
 8001ddc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	4a6a      	ldr	r2, [pc, #424]	; (8001fac <HAL_I2C_Init+0x274>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d802      	bhi.n	8001e0c <HAL_I2C_Init+0xd4>
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	e009      	b.n	8001e20 <HAL_I2C_Init+0xe8>
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e12:	fb02 f303 	mul.w	r3, r2, r3
 8001e16:	4a69      	ldr	r2, [pc, #420]	; (8001fbc <HAL_I2C_Init+0x284>)
 8001e18:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1c:	099b      	lsrs	r3, r3, #6
 8001e1e:	3301      	adds	r3, #1
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6812      	ldr	r2, [r2, #0]
 8001e24:	430b      	orrs	r3, r1
 8001e26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	495c      	ldr	r1, [pc, #368]	; (8001fac <HAL_I2C_Init+0x274>)
 8001e3c:	428b      	cmp	r3, r1
 8001e3e:	d819      	bhi.n	8001e74 <HAL_I2C_Init+0x13c>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1e59      	subs	r1, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e4e:	1c59      	adds	r1, r3, #1
 8001e50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e54:	400b      	ands	r3, r1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00a      	beq.n	8001e70 <HAL_I2C_Init+0x138>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1e59      	subs	r1, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e68:	3301      	adds	r3, #1
 8001e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e6e:	e051      	b.n	8001f14 <HAL_I2C_Init+0x1dc>
 8001e70:	2304      	movs	r3, #4
 8001e72:	e04f      	b.n	8001f14 <HAL_I2C_Init+0x1dc>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d111      	bne.n	8001ea0 <HAL_I2C_Init+0x168>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1e58      	subs	r0, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6859      	ldr	r1, [r3, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	440b      	add	r3, r1
 8001e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	bf0c      	ite	eq
 8001e98:	2301      	moveq	r3, #1
 8001e9a:	2300      	movne	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	e012      	b.n	8001ec6 <HAL_I2C_Init+0x18e>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1e58      	subs	r0, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6859      	ldr	r1, [r3, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	0099      	lsls	r1, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_I2C_Init+0x196>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e022      	b.n	8001f14 <HAL_I2C_Init+0x1dc>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_I2C_Init+0x1bc>
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1e58      	subs	r0, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6859      	ldr	r1, [r3, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	440b      	add	r3, r1
 8001ee4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ef2:	e00f      	b.n	8001f14 <HAL_I2C_Init+0x1dc>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	1e58      	subs	r0, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6859      	ldr	r1, [r3, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	0099      	lsls	r1, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	6809      	ldr	r1, [r1, #0]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69da      	ldr	r2, [r3, #28]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6911      	ldr	r1, [r2, #16]
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	68d2      	ldr	r2, [r2, #12]
 8001f4e:	4311      	orrs	r1, r2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	000186a0 	.word	0x000186a0
 8001fb0:	001e847f 	.word	0x001e847f
 8001fb4:	003d08ff 	.word	0x003d08ff
 8001fb8:	431bde83 	.word	0x431bde83
 8001fbc:	10624dd3 	.word	0x10624dd3

08001fc0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	460b      	mov	r3, r1
 8001fce:	817b      	strh	r3, [r7, #10]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7ff fbe8 	bl	80017a8 <HAL_GetTick>
 8001fd8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b20      	cmp	r3, #32
 8001fe4:	f040 80e0 	bne.w	80021a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	2319      	movs	r3, #25
 8001fee:	2201      	movs	r2, #1
 8001ff0:	4970      	ldr	r1, [pc, #448]	; (80021b4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 fcb4 	bl	8002960 <I2C_WaitOnFlagUntilTimeout>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ffe:	2302      	movs	r3, #2
 8002000:	e0d3      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_I2C_Master_Transmit+0x50>
 800200c:	2302      	movs	r3, #2
 800200e:	e0cc      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b01      	cmp	r3, #1
 8002024:	d007      	beq.n	8002036 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f042 0201 	orr.w	r2, r2, #1
 8002034:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002044:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2221      	movs	r2, #33	; 0x21
 800204a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2210      	movs	r2, #16
 8002052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	893a      	ldrh	r2, [r7, #8]
 8002066:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206c:	b29a      	uxth	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4a50      	ldr	r2, [pc, #320]	; (80021b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002076:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002078:	8979      	ldrh	r1, [r7, #10]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	6a3a      	ldr	r2, [r7, #32]
 800207e:	68f8      	ldr	r0, [r7, #12]
 8002080:	f000 fb04 	bl	800268c <I2C_MasterRequestWrite>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e08d      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020a4:	e066      	b.n	8002174 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	6a39      	ldr	r1, [r7, #32]
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 fd2e 	bl	8002b0c <I2C_WaitOnTXEFlagUntilTimeout>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00d      	beq.n	80020d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d107      	bne.n	80020ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e06b      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	781a      	ldrb	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b04      	cmp	r3, #4
 800210e:	d11b      	bne.n	8002148 <HAL_I2C_Master_Transmit+0x188>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002114:	2b00      	cmp	r3, #0
 8002116:	d017      	beq.n	8002148 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	781a      	ldrb	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	6a39      	ldr	r1, [r7, #32]
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 fd1e 	bl	8002b8e <I2C_WaitOnBTFFlagUntilTimeout>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00d      	beq.n	8002174 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	2b04      	cmp	r3, #4
 800215e:	d107      	bne.n	8002170 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800216e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e01a      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002178:	2b00      	cmp	r3, #0
 800217a:	d194      	bne.n	80020a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021a4:	2300      	movs	r3, #0
 80021a6:	e000      	b.n	80021aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021a8:	2302      	movs	r3, #2
  }
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	00100002 	.word	0x00100002
 80021b8:	ffff0000 	.word	0xffff0000

080021bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08c      	sub	sp, #48	; 0x30
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	4608      	mov	r0, r1
 80021c6:	4611      	mov	r1, r2
 80021c8:	461a      	mov	r2, r3
 80021ca:	4603      	mov	r3, r0
 80021cc:	817b      	strh	r3, [r7, #10]
 80021ce:	460b      	mov	r3, r1
 80021d0:	813b      	strh	r3, [r7, #8]
 80021d2:	4613      	mov	r3, r2
 80021d4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021da:	f7ff fae5 	bl	80017a8 <HAL_GetTick>
 80021de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	f040 8244 	bne.w	8002676 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2319      	movs	r3, #25
 80021f4:	2201      	movs	r2, #1
 80021f6:	4982      	ldr	r1, [pc, #520]	; (8002400 <HAL_I2C_Mem_Read+0x244>)
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f000 fbb1 	bl	8002960 <I2C_WaitOnFlagUntilTimeout>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002204:	2302      	movs	r3, #2
 8002206:	e237      	b.n	8002678 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_I2C_Mem_Read+0x5a>
 8002212:	2302      	movs	r3, #2
 8002214:	e230      	b.n	8002678 <HAL_I2C_Mem_Read+0x4bc>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b01      	cmp	r3, #1
 800222a:	d007      	beq.n	800223c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800224a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2222      	movs	r2, #34	; 0x22
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2240      	movs	r2, #64	; 0x40
 8002258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002266:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800226c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4a62      	ldr	r2, [pc, #392]	; (8002404 <HAL_I2C_Mem_Read+0x248>)
 800227c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800227e:	88f8      	ldrh	r0, [r7, #6]
 8002280:	893a      	ldrh	r2, [r7, #8]
 8002282:	8979      	ldrh	r1, [r7, #10]
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	4603      	mov	r3, r0
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 fa7e 	bl	8002790 <I2C_RequestMemoryRead>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e1ec      	b.n	8002678 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d113      	bne.n	80022ce <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	e1c0      	b.n	8002650 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d11e      	bne.n	8002314 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022e6:	b672      	cpsid	i
}
 80022e8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ea:	2300      	movs	r3, #0
 80022ec:	61bb      	str	r3, [r7, #24]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	61bb      	str	r3, [r7, #24]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800230e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002310:	b662      	cpsie	i
}
 8002312:	e035      	b.n	8002380 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002318:	2b02      	cmp	r3, #2
 800231a:	d11e      	bne.n	800235a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800232a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800232c:	b672      	cpsid	i
}
 800232e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002354:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002356:	b662      	cpsie	i
}
 8002358:	e012      	b.n	8002380 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002368:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002380:	e166      	b.n	8002650 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002386:	2b03      	cmp	r3, #3
 8002388:	f200 811f 	bhi.w	80025ca <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002390:	2b01      	cmp	r3, #1
 8002392:	d123      	bne.n	80023dc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002396:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 fc39 	bl	8002c10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e167      	b.n	8002678 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023da:	e139      	b.n	8002650 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d152      	bne.n	800248a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ea:	2200      	movs	r2, #0
 80023ec:	4906      	ldr	r1, [pc, #24]	; (8002408 <HAL_I2C_Mem_Read+0x24c>)
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 fab6 	bl	8002960 <I2C_WaitOnFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e13c      	b.n	8002678 <HAL_I2C_Mem_Read+0x4bc>
 80023fe:	bf00      	nop
 8002400:	00100002 	.word	0x00100002
 8002404:	ffff0000 	.word	0xffff0000
 8002408:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800240c:	b672      	cpsid	i
}
 800240e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800241e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002448:	b29b      	uxth	r3, r3
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002452:	b662      	cpsie	i
}
 8002454:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002488:	e0e2      	b.n	8002650 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002490:	2200      	movs	r2, #0
 8002492:	497b      	ldr	r1, [pc, #492]	; (8002680 <HAL_I2C_Mem_Read+0x4c4>)
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 fa63 	bl	8002960 <I2C_WaitOnFlagUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e0e9      	b.n	8002678 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024b4:	b672      	cpsid	i
}
 80024b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691a      	ldr	r2, [r3, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	b2d2      	uxtb	r2, r2
 80024c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80024ea:	4b66      	ldr	r3, [pc, #408]	; (8002684 <HAL_I2C_Mem_Read+0x4c8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	08db      	lsrs	r3, r3, #3
 80024f0:	4a65      	ldr	r2, [pc, #404]	; (8002688 <HAL_I2C_Mem_Read+0x4cc>)
 80024f2:	fba2 2303 	umull	r2, r3, r2, r3
 80024f6:	0a1a      	lsrs	r2, r3, #8
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	00da      	lsls	r2, r3, #3
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	3b01      	subs	r3, #1
 8002508:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d118      	bne.n	8002542 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f043 0220 	orr.w	r2, r3, #32
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002532:	b662      	cpsie	i
}
 8002534:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e09a      	b.n	8002678 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b04      	cmp	r3, #4
 800254e:	d1d9      	bne.n	8002504 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800255e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691a      	ldr	r2, [r3, #16]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257c:	3b01      	subs	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002588:	b29b      	uxth	r3, r3
 800258a:	3b01      	subs	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002592:	b662      	cpsie	i
}
 8002594:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025c8:	e042      	b.n	8002650 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 fb1e 	bl	8002c10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e04c      	b.n	8002678 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002606:	b29b      	uxth	r3, r3
 8002608:	3b01      	subs	r3, #1
 800260a:	b29a      	uxth	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b04      	cmp	r3, #4
 800261c:	d118      	bne.n	8002650 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263a:	3b01      	subs	r3, #1
 800263c:	b29a      	uxth	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002646:	b29b      	uxth	r3, r3
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002654:	2b00      	cmp	r3, #0
 8002656:	f47f ae94 	bne.w	8002382 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	e000      	b.n	8002678 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002676:	2302      	movs	r3, #2
  }
}
 8002678:	4618      	mov	r0, r3
 800267a:	3728      	adds	r7, #40	; 0x28
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	00010004 	.word	0x00010004
 8002684:	20000000 	.word	0x20000000
 8002688:	14f8b589 	.word	0x14f8b589

0800268c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af02      	add	r7, sp, #8
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	607a      	str	r2, [r7, #4]
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	460b      	mov	r3, r1
 800269a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b08      	cmp	r3, #8
 80026a6:	d006      	beq.n	80026b6 <I2C_MasterRequestWrite+0x2a>
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d003      	beq.n	80026b6 <I2C_MasterRequestWrite+0x2a>
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026b4:	d108      	bne.n	80026c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	e00b      	b.n	80026e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	2b12      	cmp	r3, #18
 80026ce:	d107      	bne.n	80026e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 f937 	bl	8002960 <I2C_WaitOnFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00d      	beq.n	8002714 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002706:	d103      	bne.n	8002710 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800270e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e035      	b.n	8002780 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800271c:	d108      	bne.n	8002730 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800271e:	897b      	ldrh	r3, [r7, #10]
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800272c:	611a      	str	r2, [r3, #16]
 800272e:	e01b      	b.n	8002768 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002730:	897b      	ldrh	r3, [r7, #10]
 8002732:	11db      	asrs	r3, r3, #7
 8002734:	b2db      	uxtb	r3, r3
 8002736:	f003 0306 	and.w	r3, r3, #6
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f063 030f 	orn	r3, r3, #15
 8002740:	b2da      	uxtb	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	490e      	ldr	r1, [pc, #56]	; (8002788 <I2C_MasterRequestWrite+0xfc>)
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 f95d 	bl	8002a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e010      	b.n	8002780 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800275e:	897b      	ldrh	r3, [r7, #10]
 8002760:	b2da      	uxtb	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	4907      	ldr	r1, [pc, #28]	; (800278c <I2C_MasterRequestWrite+0x100>)
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f94d 	bl	8002a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	00010008 	.word	0x00010008
 800278c:	00010002 	.word	0x00010002

08002790 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af02      	add	r7, sp, #8
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	4608      	mov	r0, r1
 800279a:	4611      	mov	r1, r2
 800279c:	461a      	mov	r2, r3
 800279e:	4603      	mov	r3, r0
 80027a0:	817b      	strh	r3, [r7, #10]
 80027a2:	460b      	mov	r3, r1
 80027a4:	813b      	strh	r3, [r7, #8]
 80027a6:	4613      	mov	r3, r2
 80027a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 f8c2 	bl	8002960 <I2C_WaitOnFlagUntilTimeout>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00d      	beq.n	80027fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f0:	d103      	bne.n	80027fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e0aa      	b.n	8002954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027fe:	897b      	ldrh	r3, [r7, #10]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	461a      	mov	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800280c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	6a3a      	ldr	r2, [r7, #32]
 8002812:	4952      	ldr	r1, [pc, #328]	; (800295c <I2C_RequestMemoryRead+0x1cc>)
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 f8fa 	bl	8002a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e097      	b.n	8002954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800283a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283c:	6a39      	ldr	r1, [r7, #32]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f964 	bl	8002b0c <I2C_WaitOnTXEFlagUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00d      	beq.n	8002866 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	2b04      	cmp	r3, #4
 8002850:	d107      	bne.n	8002862 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002860:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e076      	b.n	8002954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d105      	bne.n	8002878 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800286c:	893b      	ldrh	r3, [r7, #8]
 800286e:	b2da      	uxtb	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	611a      	str	r2, [r3, #16]
 8002876:	e021      	b.n	80028bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002878:	893b      	ldrh	r3, [r7, #8]
 800287a:	0a1b      	lsrs	r3, r3, #8
 800287c:	b29b      	uxth	r3, r3
 800287e:	b2da      	uxtb	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002888:	6a39      	ldr	r1, [r7, #32]
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f93e 	bl	8002b0c <I2C_WaitOnTXEFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00d      	beq.n	80028b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	2b04      	cmp	r3, #4
 800289c:	d107      	bne.n	80028ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e050      	b.n	8002954 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028b2:	893b      	ldrh	r3, [r7, #8]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028be:	6a39      	ldr	r1, [r7, #32]
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f923 	bl	8002b0c <I2C_WaitOnTXEFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00d      	beq.n	80028e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d107      	bne.n	80028e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e035      	b.n	8002954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	2200      	movs	r2, #0
 8002900:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 f82b 	bl	8002960 <I2C_WaitOnFlagUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00d      	beq.n	800292c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800291e:	d103      	bne.n	8002928 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002926:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e013      	b.n	8002954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800292c:	897b      	ldrh	r3, [r7, #10]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	b2da      	uxtb	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	6a3a      	ldr	r2, [r7, #32]
 8002940:	4906      	ldr	r1, [pc, #24]	; (800295c <I2C_RequestMemoryRead+0x1cc>)
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 f863 	bl	8002a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	00010002 	.word	0x00010002

08002960 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	4613      	mov	r3, r2
 800296e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002970:	e025      	b.n	80029be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002978:	d021      	beq.n	80029be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297a:	f7fe ff15 	bl	80017a8 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d302      	bcc.n	8002990 <I2C_WaitOnFlagUntilTimeout+0x30>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d116      	bne.n	80029be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2220      	movs	r2, #32
 800299a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f043 0220 	orr.w	r2, r3, #32
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e023      	b.n	8002a06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	0c1b      	lsrs	r3, r3, #16
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d10d      	bne.n	80029e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	43da      	mvns	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	4013      	ands	r3, r2
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	bf0c      	ite	eq
 80029da:	2301      	moveq	r3, #1
 80029dc:	2300      	movne	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	461a      	mov	r2, r3
 80029e2:	e00c      	b.n	80029fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	43da      	mvns	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	4013      	ands	r3, r2
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	bf0c      	ite	eq
 80029f6:	2301      	moveq	r3, #1
 80029f8:	2300      	movne	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	461a      	mov	r2, r3
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d0b6      	beq.n	8002972 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b084      	sub	sp, #16
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a1c:	e051      	b.n	8002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a2c:	d123      	bne.n	8002a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f043 0204 	orr.w	r2, r3, #4
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e046      	b.n	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d021      	beq.n	8002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7e:	f7fe fe93 	bl	80017a8 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d302      	bcc.n	8002a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d116      	bne.n	8002ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f043 0220 	orr.w	r2, r3, #32
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e020      	b.n	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	0c1b      	lsrs	r3, r3, #16
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d10c      	bne.n	8002ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	bf14      	ite	ne
 8002ade:	2301      	movne	r3, #1
 8002ae0:	2300      	moveq	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	e00b      	b.n	8002afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	43da      	mvns	r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	4013      	ands	r3, r2
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bf14      	ite	ne
 8002af8:	2301      	movne	r3, #1
 8002afa:	2300      	moveq	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d18d      	bne.n	8002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b18:	e02d      	b.n	8002b76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 f8ce 	bl	8002cbc <I2C_IsAcknowledgeFailed>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e02d      	b.n	8002b86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b30:	d021      	beq.n	8002b76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b32:	f7fe fe39 	bl	80017a8 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d302      	bcc.n	8002b48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d116      	bne.n	8002b76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2220      	movs	r2, #32
 8002b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f043 0220 	orr.w	r2, r3, #32
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e007      	b.n	8002b86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b80:	2b80      	cmp	r3, #128	; 0x80
 8002b82:	d1ca      	bne.n	8002b1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b9a:	e02d      	b.n	8002bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 f88d 	bl	8002cbc <I2C_IsAcknowledgeFailed>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e02d      	b.n	8002c08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb2:	d021      	beq.n	8002bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb4:	f7fe fdf8 	bl	80017a8 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d302      	bcc.n	8002bca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d116      	bne.n	8002bf8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e007      	b.n	8002c08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d1ca      	bne.n	8002b9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c1c:	e042      	b.n	8002ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d119      	bne.n	8002c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0210 	mvn.w	r2, #16
 8002c34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e029      	b.n	8002cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c60:	f7fe fda2 	bl	80017a8 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d302      	bcc.n	8002c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d116      	bne.n	8002ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	f043 0220 	orr.w	r2, r3, #32
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e007      	b.n	8002cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cae:	2b40      	cmp	r3, #64	; 0x40
 8002cb0:	d1b5      	bne.n	8002c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd2:	d11b      	bne.n	8002d0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cdc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	f043 0204 	orr.w	r2, r3, #4
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e272      	b.n	8003210 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 8087 	beq.w	8002e46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d38:	4b92      	ldr	r3, [pc, #584]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 030c 	and.w	r3, r3, #12
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d00c      	beq.n	8002d5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d44:	4b8f      	ldr	r3, [pc, #572]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 030c 	and.w	r3, r3, #12
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d112      	bne.n	8002d76 <HAL_RCC_OscConfig+0x5e>
 8002d50:	4b8c      	ldr	r3, [pc, #560]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d5c:	d10b      	bne.n	8002d76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d5e:	4b89      	ldr	r3, [pc, #548]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d06c      	beq.n	8002e44 <HAL_RCC_OscConfig+0x12c>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d168      	bne.n	8002e44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e24c      	b.n	8003210 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d7e:	d106      	bne.n	8002d8e <HAL_RCC_OscConfig+0x76>
 8002d80:	4b80      	ldr	r3, [pc, #512]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a7f      	ldr	r2, [pc, #508]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	e02e      	b.n	8002dec <HAL_RCC_OscConfig+0xd4>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10c      	bne.n	8002db0 <HAL_RCC_OscConfig+0x98>
 8002d96:	4b7b      	ldr	r3, [pc, #492]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a7a      	ldr	r2, [pc, #488]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	4b78      	ldr	r3, [pc, #480]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a77      	ldr	r2, [pc, #476]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	e01d      	b.n	8002dec <HAL_RCC_OscConfig+0xd4>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0xbc>
 8002dba:	4b72      	ldr	r3, [pc, #456]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a71      	ldr	r2, [pc, #452]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	4b6f      	ldr	r3, [pc, #444]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a6e      	ldr	r2, [pc, #440]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	e00b      	b.n	8002dec <HAL_RCC_OscConfig+0xd4>
 8002dd4:	4b6b      	ldr	r3, [pc, #428]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a6a      	ldr	r2, [pc, #424]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	4b68      	ldr	r3, [pc, #416]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a67      	ldr	r2, [pc, #412]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d013      	beq.n	8002e1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df4:	f7fe fcd8 	bl	80017a8 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dfc:	f7fe fcd4 	bl	80017a8 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b64      	cmp	r3, #100	; 0x64
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e200      	b.n	8003210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0e:	4b5d      	ldr	r3, [pc, #372]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCC_OscConfig+0xe4>
 8002e1a:	e014      	b.n	8002e46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7fe fcc4 	bl	80017a8 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e24:	f7fe fcc0 	bl	80017a8 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	; 0x64
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e1ec      	b.n	8003210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e36:	4b53      	ldr	r3, [pc, #332]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0x10c>
 8002e42:	e000      	b.n	8002e46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d063      	beq.n	8002f1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e52:	4b4c      	ldr	r3, [pc, #304]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00b      	beq.n	8002e76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e5e:	4b49      	ldr	r3, [pc, #292]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 030c 	and.w	r3, r3, #12
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d11c      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x18c>
 8002e6a:	4b46      	ldr	r3, [pc, #280]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d116      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e76:	4b43      	ldr	r3, [pc, #268]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d005      	beq.n	8002e8e <HAL_RCC_OscConfig+0x176>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d001      	beq.n	8002e8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e1c0      	b.n	8003210 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8e:	4b3d      	ldr	r3, [pc, #244]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4939      	ldr	r1, [pc, #228]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea2:	e03a      	b.n	8002f1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d020      	beq.n	8002eee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eac:	4b36      	ldr	r3, [pc, #216]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb2:	f7fe fc79 	bl	80017a8 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eba:	f7fe fc75 	bl	80017a8 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e1a1      	b.n	8003210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ecc:	4b2d      	ldr	r3, [pc, #180]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed8:	4b2a      	ldr	r3, [pc, #168]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4927      	ldr	r1, [pc, #156]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	600b      	str	r3, [r1, #0]
 8002eec:	e015      	b.n	8002f1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eee:	4b26      	ldr	r3, [pc, #152]	; (8002f88 <HAL_RCC_OscConfig+0x270>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7fe fc58 	bl	80017a8 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002efc:	f7fe fc54 	bl	80017a8 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e180      	b.n	8003210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0e:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f0      	bne.n	8002efc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d03a      	beq.n	8002f9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d019      	beq.n	8002f62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2e:	4b17      	ldr	r3, [pc, #92]	; (8002f8c <HAL_RCC_OscConfig+0x274>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f34:	f7fe fc38 	bl	80017a8 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3c:	f7fe fc34 	bl	80017a8 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e160      	b.n	8003210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f4e:	4b0d      	ldr	r3, [pc, #52]	; (8002f84 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	f000 fad8 	bl	8003510 <RCC_Delay>
 8002f60:	e01c      	b.n	8002f9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <HAL_RCC_OscConfig+0x274>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f68:	f7fe fc1e 	bl	80017a8 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f6e:	e00f      	b.n	8002f90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f70:	f7fe fc1a 	bl	80017a8 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d908      	bls.n	8002f90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e146      	b.n	8003210 <HAL_RCC_OscConfig+0x4f8>
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	42420000 	.word	0x42420000
 8002f8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f90:	4b92      	ldr	r3, [pc, #584]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1e9      	bne.n	8002f70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 80a6 	beq.w	80030f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002faa:	2300      	movs	r3, #0
 8002fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fae:	4b8b      	ldr	r3, [pc, #556]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10d      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fba:	4b88      	ldr	r3, [pc, #544]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	4a87      	ldr	r2, [pc, #540]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 8002fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	61d3      	str	r3, [r2, #28]
 8002fc6:	4b85      	ldr	r3, [pc, #532]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd6:	4b82      	ldr	r3, [pc, #520]	; (80031e0 <HAL_RCC_OscConfig+0x4c8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d118      	bne.n	8003014 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fe2:	4b7f      	ldr	r3, [pc, #508]	; (80031e0 <HAL_RCC_OscConfig+0x4c8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a7e      	ldr	r2, [pc, #504]	; (80031e0 <HAL_RCC_OscConfig+0x4c8>)
 8002fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fee:	f7fe fbdb 	bl	80017a8 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff6:	f7fe fbd7 	bl	80017a8 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b64      	cmp	r3, #100	; 0x64
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e103      	b.n	8003210 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003008:	4b75      	ldr	r3, [pc, #468]	; (80031e0 <HAL_RCC_OscConfig+0x4c8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d106      	bne.n	800302a <HAL_RCC_OscConfig+0x312>
 800301c:	4b6f      	ldr	r3, [pc, #444]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 800301e:	6a1b      	ldr	r3, [r3, #32]
 8003020:	4a6e      	ldr	r2, [pc, #440]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	6213      	str	r3, [r2, #32]
 8003028:	e02d      	b.n	8003086 <HAL_RCC_OscConfig+0x36e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10c      	bne.n	800304c <HAL_RCC_OscConfig+0x334>
 8003032:	4b6a      	ldr	r3, [pc, #424]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	4a69      	ldr	r2, [pc, #420]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 8003038:	f023 0301 	bic.w	r3, r3, #1
 800303c:	6213      	str	r3, [r2, #32]
 800303e:	4b67      	ldr	r3, [pc, #412]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	4a66      	ldr	r2, [pc, #408]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 8003044:	f023 0304 	bic.w	r3, r3, #4
 8003048:	6213      	str	r3, [r2, #32]
 800304a:	e01c      	b.n	8003086 <HAL_RCC_OscConfig+0x36e>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b05      	cmp	r3, #5
 8003052:	d10c      	bne.n	800306e <HAL_RCC_OscConfig+0x356>
 8003054:	4b61      	ldr	r3, [pc, #388]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	4a60      	ldr	r2, [pc, #384]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 800305a:	f043 0304 	orr.w	r3, r3, #4
 800305e:	6213      	str	r3, [r2, #32]
 8003060:	4b5e      	ldr	r3, [pc, #376]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	4a5d      	ldr	r2, [pc, #372]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	6213      	str	r3, [r2, #32]
 800306c:	e00b      	b.n	8003086 <HAL_RCC_OscConfig+0x36e>
 800306e:	4b5b      	ldr	r3, [pc, #364]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	4a5a      	ldr	r2, [pc, #360]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 8003074:	f023 0301 	bic.w	r3, r3, #1
 8003078:	6213      	str	r3, [r2, #32]
 800307a:	4b58      	ldr	r3, [pc, #352]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	4a57      	ldr	r2, [pc, #348]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 8003080:	f023 0304 	bic.w	r3, r3, #4
 8003084:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d015      	beq.n	80030ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308e:	f7fe fb8b 	bl	80017a8 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003094:	e00a      	b.n	80030ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003096:	f7fe fb87 	bl	80017a8 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d901      	bls.n	80030ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e0b1      	b.n	8003210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ac:	4b4b      	ldr	r3, [pc, #300]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d0ee      	beq.n	8003096 <HAL_RCC_OscConfig+0x37e>
 80030b8:	e014      	b.n	80030e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ba:	f7fe fb75 	bl	80017a8 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c0:	e00a      	b.n	80030d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c2:	f7fe fb71 	bl	80017a8 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e09b      	b.n	8003210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d8:	4b40      	ldr	r3, [pc, #256]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1ee      	bne.n	80030c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030e4:	7dfb      	ldrb	r3, [r7, #23]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d105      	bne.n	80030f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ea:	4b3c      	ldr	r3, [pc, #240]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	4a3b      	ldr	r2, [pc, #236]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 8087 	beq.w	800320e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003100:	4b36      	ldr	r3, [pc, #216]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 030c 	and.w	r3, r3, #12
 8003108:	2b08      	cmp	r3, #8
 800310a:	d061      	beq.n	80031d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d146      	bne.n	80031a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003114:	4b33      	ldr	r3, [pc, #204]	; (80031e4 <HAL_RCC_OscConfig+0x4cc>)
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311a:	f7fe fb45 	bl	80017a8 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003122:	f7fe fb41 	bl	80017a8 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e06d      	b.n	8003210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003134:	4b29      	ldr	r3, [pc, #164]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1f0      	bne.n	8003122 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003148:	d108      	bne.n	800315c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800314a:	4b24      	ldr	r3, [pc, #144]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	4921      	ldr	r1, [pc, #132]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 8003158:	4313      	orrs	r3, r2
 800315a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800315c:	4b1f      	ldr	r3, [pc, #124]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a19      	ldr	r1, [r3, #32]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	430b      	orrs	r3, r1
 800316e:	491b      	ldr	r1, [pc, #108]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 8003170:	4313      	orrs	r3, r2
 8003172:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003174:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <HAL_RCC_OscConfig+0x4cc>)
 8003176:	2201      	movs	r2, #1
 8003178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317a:	f7fe fb15 	bl	80017a8 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003182:	f7fe fb11 	bl	80017a8 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e03d      	b.n	8003210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x46a>
 80031a0:	e035      	b.n	800320e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <HAL_RCC_OscConfig+0x4cc>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a8:	f7fe fafe 	bl	80017a8 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fe fafa 	bl	80017a8 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e026      	b.n	8003210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_RCC_OscConfig+0x4c4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x498>
 80031ce:	e01e      	b.n	800320e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	69db      	ldr	r3, [r3, #28]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d107      	bne.n	80031e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e019      	b.n	8003210 <HAL_RCC_OscConfig+0x4f8>
 80031dc:	40021000 	.word	0x40021000
 80031e0:	40007000 	.word	0x40007000
 80031e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_RCC_OscConfig+0x500>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d106      	bne.n	800320a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003206:	429a      	cmp	r2, r3
 8003208:	d001      	beq.n	800320e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3718      	adds	r7, #24
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021000 	.word	0x40021000

0800321c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0d0      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003230:	4b6a      	ldr	r3, [pc, #424]	; (80033dc <HAL_RCC_ClockConfig+0x1c0>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d910      	bls.n	8003260 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323e:	4b67      	ldr	r3, [pc, #412]	; (80033dc <HAL_RCC_ClockConfig+0x1c0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f023 0207 	bic.w	r2, r3, #7
 8003246:	4965      	ldr	r1, [pc, #404]	; (80033dc <HAL_RCC_ClockConfig+0x1c0>)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	4313      	orrs	r3, r2
 800324c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b63      	ldr	r3, [pc, #396]	; (80033dc <HAL_RCC_ClockConfig+0x1c0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0b8      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d020      	beq.n	80032ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003278:	4b59      	ldr	r3, [pc, #356]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4a58      	ldr	r2, [pc, #352]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 800327e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003282:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003290:	4b53      	ldr	r3, [pc, #332]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	4a52      	ldr	r2, [pc, #328]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003296:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800329a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800329c:	4b50      	ldr	r3, [pc, #320]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	494d      	ldr	r1, [pc, #308]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d040      	beq.n	800333c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d107      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	4b47      	ldr	r3, [pc, #284]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d115      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e07f      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032da:	4b41      	ldr	r3, [pc, #260]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e073      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ea:	4b3d      	ldr	r3, [pc, #244]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e06b      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032fa:	4b39      	ldr	r3, [pc, #228]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f023 0203 	bic.w	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	4936      	ldr	r1, [pc, #216]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003308:	4313      	orrs	r3, r2
 800330a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800330c:	f7fe fa4c 	bl	80017a8 <HAL_GetTick>
 8003310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003312:	e00a      	b.n	800332a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003314:	f7fe fa48 	bl	80017a8 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e053      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332a:	4b2d      	ldr	r3, [pc, #180]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 020c 	and.w	r2, r3, #12
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	429a      	cmp	r2, r3
 800333a:	d1eb      	bne.n	8003314 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800333c:	4b27      	ldr	r3, [pc, #156]	; (80033dc <HAL_RCC_ClockConfig+0x1c0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d210      	bcs.n	800336c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b24      	ldr	r3, [pc, #144]	; (80033dc <HAL_RCC_ClockConfig+0x1c0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 0207 	bic.w	r2, r3, #7
 8003352:	4922      	ldr	r1, [pc, #136]	; (80033dc <HAL_RCC_ClockConfig+0x1c0>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	4313      	orrs	r3, r2
 8003358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b20      	ldr	r3, [pc, #128]	; (80033dc <HAL_RCC_ClockConfig+0x1c0>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e032      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003378:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4916      	ldr	r1, [pc, #88]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003386:	4313      	orrs	r3, r2
 8003388:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003396:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	490e      	ldr	r1, [pc, #56]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033aa:	f000 f821 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 80033ae:	4602      	mov	r2, r0
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	490a      	ldr	r1, [pc, #40]	; (80033e4 <HAL_RCC_ClockConfig+0x1c8>)
 80033bc:	5ccb      	ldrb	r3, [r1, r3]
 80033be:	fa22 f303 	lsr.w	r3, r2, r3
 80033c2:	4a09      	ldr	r2, [pc, #36]	; (80033e8 <HAL_RCC_ClockConfig+0x1cc>)
 80033c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033c6:	4b09      	ldr	r3, [pc, #36]	; (80033ec <HAL_RCC_ClockConfig+0x1d0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe f9aa 	bl	8001724 <HAL_InitTick>

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40022000 	.word	0x40022000
 80033e0:	40021000 	.word	0x40021000
 80033e4:	08006550 	.word	0x08006550
 80033e8:	20000000 	.word	0x20000000
 80033ec:	20000004 	.word	0x20000004

080033f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f0:	b490      	push	{r4, r7}
 80033f2:	b08a      	sub	sp, #40	; 0x28
 80033f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033f6:	4b29      	ldr	r3, [pc, #164]	; (800349c <HAL_RCC_GetSysClockFreq+0xac>)
 80033f8:	1d3c      	adds	r4, r7, #4
 80033fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003400:	f240 2301 	movw	r3, #513	; 0x201
 8003404:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	2300      	movs	r3, #0
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800341a:	4b21      	ldr	r3, [pc, #132]	; (80034a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b04      	cmp	r3, #4
 8003428:	d002      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0x40>
 800342a:	2b08      	cmp	r3, #8
 800342c:	d003      	beq.n	8003436 <HAL_RCC_GetSysClockFreq+0x46>
 800342e:	e02b      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003430:	4b1c      	ldr	r3, [pc, #112]	; (80034a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003432:	623b      	str	r3, [r7, #32]
      break;
 8003434:	e02b      	b.n	800348e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	0c9b      	lsrs	r3, r3, #18
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	3328      	adds	r3, #40	; 0x28
 8003440:	443b      	add	r3, r7
 8003442:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003446:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d012      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003452:	4b13      	ldr	r3, [pc, #76]	; (80034a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	0c5b      	lsrs	r3, r3, #17
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	3328      	adds	r3, #40	; 0x28
 800345e:	443b      	add	r3, r7
 8003460:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003464:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	4a0e      	ldr	r2, [pc, #56]	; (80034a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800346a:	fb03 f202 	mul.w	r2, r3, r2
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	fbb2 f3f3 	udiv	r3, r2, r3
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
 8003476:	e004      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	4a0b      	ldr	r2, [pc, #44]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800347c:	fb02 f303 	mul.w	r3, r2, r3
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	623b      	str	r3, [r7, #32]
      break;
 8003486:	e002      	b.n	800348e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800348a:	623b      	str	r3, [r7, #32]
      break;
 800348c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800348e:	6a3b      	ldr	r3, [r7, #32]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3728      	adds	r7, #40	; 0x28
 8003494:	46bd      	mov	sp, r7
 8003496:	bc90      	pop	{r4, r7}
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	08006540 	.word	0x08006540
 80034a0:	40021000 	.word	0x40021000
 80034a4:	007a1200 	.word	0x007a1200
 80034a8:	003d0900 	.word	0x003d0900

080034ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b0:	4b02      	ldr	r3, [pc, #8]	; (80034bc <HAL_RCC_GetHCLKFreq+0x10>)
 80034b2:	681b      	ldr	r3, [r3, #0]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr
 80034bc:	20000000 	.word	0x20000000

080034c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034c4:	f7ff fff2 	bl	80034ac <HAL_RCC_GetHCLKFreq>
 80034c8:	4602      	mov	r2, r0
 80034ca:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	0a1b      	lsrs	r3, r3, #8
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	4903      	ldr	r1, [pc, #12]	; (80034e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034d6:	5ccb      	ldrb	r3, [r1, r3]
 80034d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034dc:	4618      	mov	r0, r3
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40021000 	.word	0x40021000
 80034e4:	08006560 	.word	0x08006560

080034e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034ec:	f7ff ffde 	bl	80034ac <HAL_RCC_GetHCLKFreq>
 80034f0:	4602      	mov	r2, r0
 80034f2:	4b05      	ldr	r3, [pc, #20]	; (8003508 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	0adb      	lsrs	r3, r3, #11
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	4903      	ldr	r1, [pc, #12]	; (800350c <HAL_RCC_GetPCLK2Freq+0x24>)
 80034fe:	5ccb      	ldrb	r3, [r1, r3]
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003504:	4618      	mov	r0, r3
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40021000 	.word	0x40021000
 800350c:	08006560 	.word	0x08006560

08003510 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003518:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <RCC_Delay+0x34>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <RCC_Delay+0x38>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	0a5b      	lsrs	r3, r3, #9
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	fb02 f303 	mul.w	r3, r2, r3
 800352a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800352c:	bf00      	nop
  }
  while (Delay --);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1e5a      	subs	r2, r3, #1
 8003532:	60fa      	str	r2, [r7, #12]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f9      	bne.n	800352c <RCC_Delay+0x1c>
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr
 8003544:	20000000 	.word	0x20000000
 8003548:	10624dd3 	.word	0x10624dd3

0800354c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e03f      	b.n	80035de <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fd feda 	bl	800132c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2224      	movs	r2, #36	; 0x24
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800358e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f829 	bl	80035e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695a      	ldr	r2, [r3, #20]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	431a      	orrs	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	4313      	orrs	r3, r2
 8003616:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003622:	f023 030c 	bic.w	r3, r3, #12
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	68b9      	ldr	r1, [r7, #8]
 800362c:	430b      	orrs	r3, r1
 800362e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699a      	ldr	r2, [r3, #24]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a2c      	ldr	r2, [pc, #176]	; (80036fc <UART_SetConfig+0x114>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d103      	bne.n	8003658 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003650:	f7ff ff4a 	bl	80034e8 <HAL_RCC_GetPCLK2Freq>
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	e002      	b.n	800365e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003658:	f7ff ff32 	bl	80034c0 <HAL_RCC_GetPCLK1Freq>
 800365c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	009a      	lsls	r2, r3, #2
 8003668:	441a      	add	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	fbb2 f3f3 	udiv	r3, r2, r3
 8003674:	4a22      	ldr	r2, [pc, #136]	; (8003700 <UART_SetConfig+0x118>)
 8003676:	fba2 2303 	umull	r2, r3, r2, r3
 800367a:	095b      	lsrs	r3, r3, #5
 800367c:	0119      	lsls	r1, r3, #4
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	009a      	lsls	r2, r3, #2
 8003688:	441a      	add	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	fbb2 f2f3 	udiv	r2, r2, r3
 8003694:	4b1a      	ldr	r3, [pc, #104]	; (8003700 <UART_SetConfig+0x118>)
 8003696:	fba3 0302 	umull	r0, r3, r3, r2
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	2064      	movs	r0, #100	; 0x64
 800369e:	fb00 f303 	mul.w	r3, r0, r3
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	3332      	adds	r3, #50	; 0x32
 80036a8:	4a15      	ldr	r2, [pc, #84]	; (8003700 <UART_SetConfig+0x118>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036b4:	4419      	add	r1, r3
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	009a      	lsls	r2, r3, #2
 80036c0:	441a      	add	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <UART_SetConfig+0x118>)
 80036ce:	fba3 0302 	umull	r0, r3, r3, r2
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	2064      	movs	r0, #100	; 0x64
 80036d6:	fb00 f303 	mul.w	r3, r0, r3
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	3332      	adds	r3, #50	; 0x32
 80036e0:	4a07      	ldr	r2, [pc, #28]	; (8003700 <UART_SetConfig+0x118>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	095b      	lsrs	r3, r3, #5
 80036e8:	f003 020f 	and.w	r2, r3, #15
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	440a      	add	r2, r1
 80036f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036f4:	bf00      	nop
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40013800 	.word	0x40013800
 8003700:	51eb851f 	.word	0x51eb851f

08003704 <__errno>:
 8003704:	4b01      	ldr	r3, [pc, #4]	; (800370c <__errno+0x8>)
 8003706:	6818      	ldr	r0, [r3, #0]
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	2000000c 	.word	0x2000000c

08003710 <__libc_init_array>:
 8003710:	b570      	push	{r4, r5, r6, lr}
 8003712:	2600      	movs	r6, #0
 8003714:	4d0c      	ldr	r5, [pc, #48]	; (8003748 <__libc_init_array+0x38>)
 8003716:	4c0d      	ldr	r4, [pc, #52]	; (800374c <__libc_init_array+0x3c>)
 8003718:	1b64      	subs	r4, r4, r5
 800371a:	10a4      	asrs	r4, r4, #2
 800371c:	42a6      	cmp	r6, r4
 800371e:	d109      	bne.n	8003734 <__libc_init_array+0x24>
 8003720:	f002 fefa 	bl	8006518 <_init>
 8003724:	2600      	movs	r6, #0
 8003726:	4d0a      	ldr	r5, [pc, #40]	; (8003750 <__libc_init_array+0x40>)
 8003728:	4c0a      	ldr	r4, [pc, #40]	; (8003754 <__libc_init_array+0x44>)
 800372a:	1b64      	subs	r4, r4, r5
 800372c:	10a4      	asrs	r4, r4, #2
 800372e:	42a6      	cmp	r6, r4
 8003730:	d105      	bne.n	800373e <__libc_init_array+0x2e>
 8003732:	bd70      	pop	{r4, r5, r6, pc}
 8003734:	f855 3b04 	ldr.w	r3, [r5], #4
 8003738:	4798      	blx	r3
 800373a:	3601      	adds	r6, #1
 800373c:	e7ee      	b.n	800371c <__libc_init_array+0xc>
 800373e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003742:	4798      	blx	r3
 8003744:	3601      	adds	r6, #1
 8003746:	e7f2      	b.n	800372e <__libc_init_array+0x1e>
 8003748:	08006944 	.word	0x08006944
 800374c:	08006944 	.word	0x08006944
 8003750:	08006944 	.word	0x08006944
 8003754:	08006948 	.word	0x08006948

08003758 <memset>:
 8003758:	4603      	mov	r3, r0
 800375a:	4402      	add	r2, r0
 800375c:	4293      	cmp	r3, r2
 800375e:	d100      	bne.n	8003762 <memset+0xa>
 8003760:	4770      	bx	lr
 8003762:	f803 1b01 	strb.w	r1, [r3], #1
 8003766:	e7f9      	b.n	800375c <memset+0x4>

08003768 <__cvt>:
 8003768:	2b00      	cmp	r3, #0
 800376a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800376e:	461f      	mov	r7, r3
 8003770:	bfbb      	ittet	lt
 8003772:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003776:	461f      	movlt	r7, r3
 8003778:	2300      	movge	r3, #0
 800377a:	232d      	movlt	r3, #45	; 0x2d
 800377c:	b088      	sub	sp, #32
 800377e:	4614      	mov	r4, r2
 8003780:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003782:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003784:	7013      	strb	r3, [r2, #0]
 8003786:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003788:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800378c:	f023 0820 	bic.w	r8, r3, #32
 8003790:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003794:	d005      	beq.n	80037a2 <__cvt+0x3a>
 8003796:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800379a:	d100      	bne.n	800379e <__cvt+0x36>
 800379c:	3501      	adds	r5, #1
 800379e:	2302      	movs	r3, #2
 80037a0:	e000      	b.n	80037a4 <__cvt+0x3c>
 80037a2:	2303      	movs	r3, #3
 80037a4:	aa07      	add	r2, sp, #28
 80037a6:	9204      	str	r2, [sp, #16]
 80037a8:	aa06      	add	r2, sp, #24
 80037aa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80037ae:	e9cd 3500 	strd	r3, r5, [sp]
 80037b2:	4622      	mov	r2, r4
 80037b4:	463b      	mov	r3, r7
 80037b6:	f000 fce3 	bl	8004180 <_dtoa_r>
 80037ba:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80037be:	4606      	mov	r6, r0
 80037c0:	d102      	bne.n	80037c8 <__cvt+0x60>
 80037c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80037c4:	07db      	lsls	r3, r3, #31
 80037c6:	d522      	bpl.n	800380e <__cvt+0xa6>
 80037c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80037cc:	eb06 0905 	add.w	r9, r6, r5
 80037d0:	d110      	bne.n	80037f4 <__cvt+0x8c>
 80037d2:	7833      	ldrb	r3, [r6, #0]
 80037d4:	2b30      	cmp	r3, #48	; 0x30
 80037d6:	d10a      	bne.n	80037ee <__cvt+0x86>
 80037d8:	2200      	movs	r2, #0
 80037da:	2300      	movs	r3, #0
 80037dc:	4620      	mov	r0, r4
 80037de:	4639      	mov	r1, r7
 80037e0:	f7fd f8e2 	bl	80009a8 <__aeabi_dcmpeq>
 80037e4:	b918      	cbnz	r0, 80037ee <__cvt+0x86>
 80037e6:	f1c5 0501 	rsb	r5, r5, #1
 80037ea:	f8ca 5000 	str.w	r5, [sl]
 80037ee:	f8da 3000 	ldr.w	r3, [sl]
 80037f2:	4499      	add	r9, r3
 80037f4:	2200      	movs	r2, #0
 80037f6:	2300      	movs	r3, #0
 80037f8:	4620      	mov	r0, r4
 80037fa:	4639      	mov	r1, r7
 80037fc:	f7fd f8d4 	bl	80009a8 <__aeabi_dcmpeq>
 8003800:	b108      	cbz	r0, 8003806 <__cvt+0x9e>
 8003802:	f8cd 901c 	str.w	r9, [sp, #28]
 8003806:	2230      	movs	r2, #48	; 0x30
 8003808:	9b07      	ldr	r3, [sp, #28]
 800380a:	454b      	cmp	r3, r9
 800380c:	d307      	bcc.n	800381e <__cvt+0xb6>
 800380e:	4630      	mov	r0, r6
 8003810:	9b07      	ldr	r3, [sp, #28]
 8003812:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003814:	1b9b      	subs	r3, r3, r6
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	b008      	add	sp, #32
 800381a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800381e:	1c59      	adds	r1, r3, #1
 8003820:	9107      	str	r1, [sp, #28]
 8003822:	701a      	strb	r2, [r3, #0]
 8003824:	e7f0      	b.n	8003808 <__cvt+0xa0>

08003826 <__exponent>:
 8003826:	4603      	mov	r3, r0
 8003828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800382a:	2900      	cmp	r1, #0
 800382c:	f803 2b02 	strb.w	r2, [r3], #2
 8003830:	bfb6      	itet	lt
 8003832:	222d      	movlt	r2, #45	; 0x2d
 8003834:	222b      	movge	r2, #43	; 0x2b
 8003836:	4249      	neglt	r1, r1
 8003838:	2909      	cmp	r1, #9
 800383a:	7042      	strb	r2, [r0, #1]
 800383c:	dd2b      	ble.n	8003896 <__exponent+0x70>
 800383e:	f10d 0407 	add.w	r4, sp, #7
 8003842:	46a4      	mov	ip, r4
 8003844:	270a      	movs	r7, #10
 8003846:	fb91 f6f7 	sdiv	r6, r1, r7
 800384a:	460a      	mov	r2, r1
 800384c:	46a6      	mov	lr, r4
 800384e:	fb07 1516 	mls	r5, r7, r6, r1
 8003852:	2a63      	cmp	r2, #99	; 0x63
 8003854:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003858:	4631      	mov	r1, r6
 800385a:	f104 34ff 	add.w	r4, r4, #4294967295
 800385e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003862:	dcf0      	bgt.n	8003846 <__exponent+0x20>
 8003864:	3130      	adds	r1, #48	; 0x30
 8003866:	f1ae 0502 	sub.w	r5, lr, #2
 800386a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800386e:	4629      	mov	r1, r5
 8003870:	1c44      	adds	r4, r0, #1
 8003872:	4561      	cmp	r1, ip
 8003874:	d30a      	bcc.n	800388c <__exponent+0x66>
 8003876:	f10d 0209 	add.w	r2, sp, #9
 800387a:	eba2 020e 	sub.w	r2, r2, lr
 800387e:	4565      	cmp	r5, ip
 8003880:	bf88      	it	hi
 8003882:	2200      	movhi	r2, #0
 8003884:	4413      	add	r3, r2
 8003886:	1a18      	subs	r0, r3, r0
 8003888:	b003      	add	sp, #12
 800388a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800388c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003890:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003894:	e7ed      	b.n	8003872 <__exponent+0x4c>
 8003896:	2330      	movs	r3, #48	; 0x30
 8003898:	3130      	adds	r1, #48	; 0x30
 800389a:	7083      	strb	r3, [r0, #2]
 800389c:	70c1      	strb	r1, [r0, #3]
 800389e:	1d03      	adds	r3, r0, #4
 80038a0:	e7f1      	b.n	8003886 <__exponent+0x60>
	...

080038a4 <_printf_float>:
 80038a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a8:	b091      	sub	sp, #68	; 0x44
 80038aa:	460c      	mov	r4, r1
 80038ac:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80038b0:	4616      	mov	r6, r2
 80038b2:	461f      	mov	r7, r3
 80038b4:	4605      	mov	r5, r0
 80038b6:	f001 fa51 	bl	8004d5c <_localeconv_r>
 80038ba:	6803      	ldr	r3, [r0, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	9309      	str	r3, [sp, #36]	; 0x24
 80038c0:	f7fc fc46 	bl	8000150 <strlen>
 80038c4:	2300      	movs	r3, #0
 80038c6:	930e      	str	r3, [sp, #56]	; 0x38
 80038c8:	f8d8 3000 	ldr.w	r3, [r8]
 80038cc:	900a      	str	r0, [sp, #40]	; 0x28
 80038ce:	3307      	adds	r3, #7
 80038d0:	f023 0307 	bic.w	r3, r3, #7
 80038d4:	f103 0208 	add.w	r2, r3, #8
 80038d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80038dc:	f8d4 b000 	ldr.w	fp, [r4]
 80038e0:	f8c8 2000 	str.w	r2, [r8]
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80038ec:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80038f0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80038f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80038f6:	f04f 32ff 	mov.w	r2, #4294967295
 80038fa:	4640      	mov	r0, r8
 80038fc:	4b9c      	ldr	r3, [pc, #624]	; (8003b70 <_printf_float+0x2cc>)
 80038fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003900:	f7fd f884 	bl	8000a0c <__aeabi_dcmpun>
 8003904:	bb70      	cbnz	r0, 8003964 <_printf_float+0xc0>
 8003906:	f04f 32ff 	mov.w	r2, #4294967295
 800390a:	4640      	mov	r0, r8
 800390c:	4b98      	ldr	r3, [pc, #608]	; (8003b70 <_printf_float+0x2cc>)
 800390e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003910:	f7fd f85e 	bl	80009d0 <__aeabi_dcmple>
 8003914:	bb30      	cbnz	r0, 8003964 <_printf_float+0xc0>
 8003916:	2200      	movs	r2, #0
 8003918:	2300      	movs	r3, #0
 800391a:	4640      	mov	r0, r8
 800391c:	4651      	mov	r1, sl
 800391e:	f7fd f84d 	bl	80009bc <__aeabi_dcmplt>
 8003922:	b110      	cbz	r0, 800392a <_printf_float+0x86>
 8003924:	232d      	movs	r3, #45	; 0x2d
 8003926:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800392a:	4b92      	ldr	r3, [pc, #584]	; (8003b74 <_printf_float+0x2d0>)
 800392c:	4892      	ldr	r0, [pc, #584]	; (8003b78 <_printf_float+0x2d4>)
 800392e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003932:	bf94      	ite	ls
 8003934:	4698      	movls	r8, r3
 8003936:	4680      	movhi	r8, r0
 8003938:	2303      	movs	r3, #3
 800393a:	f04f 0a00 	mov.w	sl, #0
 800393e:	6123      	str	r3, [r4, #16]
 8003940:	f02b 0304 	bic.w	r3, fp, #4
 8003944:	6023      	str	r3, [r4, #0]
 8003946:	4633      	mov	r3, r6
 8003948:	4621      	mov	r1, r4
 800394a:	4628      	mov	r0, r5
 800394c:	9700      	str	r7, [sp, #0]
 800394e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003950:	f000 f9d4 	bl	8003cfc <_printf_common>
 8003954:	3001      	adds	r0, #1
 8003956:	f040 8090 	bne.w	8003a7a <_printf_float+0x1d6>
 800395a:	f04f 30ff 	mov.w	r0, #4294967295
 800395e:	b011      	add	sp, #68	; 0x44
 8003960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003964:	4642      	mov	r2, r8
 8003966:	4653      	mov	r3, sl
 8003968:	4640      	mov	r0, r8
 800396a:	4651      	mov	r1, sl
 800396c:	f7fd f84e 	bl	8000a0c <__aeabi_dcmpun>
 8003970:	b148      	cbz	r0, 8003986 <_printf_float+0xe2>
 8003972:	f1ba 0f00 	cmp.w	sl, #0
 8003976:	bfb8      	it	lt
 8003978:	232d      	movlt	r3, #45	; 0x2d
 800397a:	4880      	ldr	r0, [pc, #512]	; (8003b7c <_printf_float+0x2d8>)
 800397c:	bfb8      	it	lt
 800397e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003982:	4b7f      	ldr	r3, [pc, #508]	; (8003b80 <_printf_float+0x2dc>)
 8003984:	e7d3      	b.n	800392e <_printf_float+0x8a>
 8003986:	6863      	ldr	r3, [r4, #4]
 8003988:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	d142      	bne.n	8003a16 <_printf_float+0x172>
 8003990:	2306      	movs	r3, #6
 8003992:	6063      	str	r3, [r4, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	9206      	str	r2, [sp, #24]
 8003998:	aa0e      	add	r2, sp, #56	; 0x38
 800399a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800399e:	aa0d      	add	r2, sp, #52	; 0x34
 80039a0:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80039a4:	9203      	str	r2, [sp, #12]
 80039a6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80039aa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80039ae:	6023      	str	r3, [r4, #0]
 80039b0:	6863      	ldr	r3, [r4, #4]
 80039b2:	4642      	mov	r2, r8
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	4628      	mov	r0, r5
 80039b8:	4653      	mov	r3, sl
 80039ba:	910b      	str	r1, [sp, #44]	; 0x2c
 80039bc:	f7ff fed4 	bl	8003768 <__cvt>
 80039c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039c2:	4680      	mov	r8, r0
 80039c4:	2947      	cmp	r1, #71	; 0x47
 80039c6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80039c8:	d108      	bne.n	80039dc <_printf_float+0x138>
 80039ca:	1cc8      	adds	r0, r1, #3
 80039cc:	db02      	blt.n	80039d4 <_printf_float+0x130>
 80039ce:	6863      	ldr	r3, [r4, #4]
 80039d0:	4299      	cmp	r1, r3
 80039d2:	dd40      	ble.n	8003a56 <_printf_float+0x1b2>
 80039d4:	f1a9 0902 	sub.w	r9, r9, #2
 80039d8:	fa5f f989 	uxtb.w	r9, r9
 80039dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80039e0:	d81f      	bhi.n	8003a22 <_printf_float+0x17e>
 80039e2:	464a      	mov	r2, r9
 80039e4:	3901      	subs	r1, #1
 80039e6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80039ea:	910d      	str	r1, [sp, #52]	; 0x34
 80039ec:	f7ff ff1b 	bl	8003826 <__exponent>
 80039f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039f2:	4682      	mov	sl, r0
 80039f4:	1813      	adds	r3, r2, r0
 80039f6:	2a01      	cmp	r2, #1
 80039f8:	6123      	str	r3, [r4, #16]
 80039fa:	dc02      	bgt.n	8003a02 <_printf_float+0x15e>
 80039fc:	6822      	ldr	r2, [r4, #0]
 80039fe:	07d2      	lsls	r2, r2, #31
 8003a00:	d501      	bpl.n	8003a06 <_printf_float+0x162>
 8003a02:	3301      	adds	r3, #1
 8003a04:	6123      	str	r3, [r4, #16]
 8003a06:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d09b      	beq.n	8003946 <_printf_float+0xa2>
 8003a0e:	232d      	movs	r3, #45	; 0x2d
 8003a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a14:	e797      	b.n	8003946 <_printf_float+0xa2>
 8003a16:	2947      	cmp	r1, #71	; 0x47
 8003a18:	d1bc      	bne.n	8003994 <_printf_float+0xf0>
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1ba      	bne.n	8003994 <_printf_float+0xf0>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e7b7      	b.n	8003992 <_printf_float+0xee>
 8003a22:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003a26:	d118      	bne.n	8003a5a <_printf_float+0x1b6>
 8003a28:	2900      	cmp	r1, #0
 8003a2a:	6863      	ldr	r3, [r4, #4]
 8003a2c:	dd0b      	ble.n	8003a46 <_printf_float+0x1a2>
 8003a2e:	6121      	str	r1, [r4, #16]
 8003a30:	b913      	cbnz	r3, 8003a38 <_printf_float+0x194>
 8003a32:	6822      	ldr	r2, [r4, #0]
 8003a34:	07d0      	lsls	r0, r2, #31
 8003a36:	d502      	bpl.n	8003a3e <_printf_float+0x19a>
 8003a38:	3301      	adds	r3, #1
 8003a3a:	440b      	add	r3, r1
 8003a3c:	6123      	str	r3, [r4, #16]
 8003a3e:	f04f 0a00 	mov.w	sl, #0
 8003a42:	65a1      	str	r1, [r4, #88]	; 0x58
 8003a44:	e7df      	b.n	8003a06 <_printf_float+0x162>
 8003a46:	b913      	cbnz	r3, 8003a4e <_printf_float+0x1aa>
 8003a48:	6822      	ldr	r2, [r4, #0]
 8003a4a:	07d2      	lsls	r2, r2, #31
 8003a4c:	d501      	bpl.n	8003a52 <_printf_float+0x1ae>
 8003a4e:	3302      	adds	r3, #2
 8003a50:	e7f4      	b.n	8003a3c <_printf_float+0x198>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e7f2      	b.n	8003a3c <_printf_float+0x198>
 8003a56:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003a5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a5c:	4299      	cmp	r1, r3
 8003a5e:	db05      	blt.n	8003a6c <_printf_float+0x1c8>
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	6121      	str	r1, [r4, #16]
 8003a64:	07d8      	lsls	r0, r3, #31
 8003a66:	d5ea      	bpl.n	8003a3e <_printf_float+0x19a>
 8003a68:	1c4b      	adds	r3, r1, #1
 8003a6a:	e7e7      	b.n	8003a3c <_printf_float+0x198>
 8003a6c:	2900      	cmp	r1, #0
 8003a6e:	bfcc      	ite	gt
 8003a70:	2201      	movgt	r2, #1
 8003a72:	f1c1 0202 	rsble	r2, r1, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	e7e0      	b.n	8003a3c <_printf_float+0x198>
 8003a7a:	6823      	ldr	r3, [r4, #0]
 8003a7c:	055a      	lsls	r2, r3, #21
 8003a7e:	d407      	bmi.n	8003a90 <_printf_float+0x1ec>
 8003a80:	6923      	ldr	r3, [r4, #16]
 8003a82:	4642      	mov	r2, r8
 8003a84:	4631      	mov	r1, r6
 8003a86:	4628      	mov	r0, r5
 8003a88:	47b8      	blx	r7
 8003a8a:	3001      	adds	r0, #1
 8003a8c:	d12b      	bne.n	8003ae6 <_printf_float+0x242>
 8003a8e:	e764      	b.n	800395a <_printf_float+0xb6>
 8003a90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003a94:	f240 80dd 	bls.w	8003c52 <_printf_float+0x3ae>
 8003a98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	f7fc ff82 	bl	80009a8 <__aeabi_dcmpeq>
 8003aa4:	2800      	cmp	r0, #0
 8003aa6:	d033      	beq.n	8003b10 <_printf_float+0x26c>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	4631      	mov	r1, r6
 8003aac:	4628      	mov	r0, r5
 8003aae:	4a35      	ldr	r2, [pc, #212]	; (8003b84 <_printf_float+0x2e0>)
 8003ab0:	47b8      	blx	r7
 8003ab2:	3001      	adds	r0, #1
 8003ab4:	f43f af51 	beq.w	800395a <_printf_float+0xb6>
 8003ab8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003abc:	429a      	cmp	r2, r3
 8003abe:	db02      	blt.n	8003ac6 <_printf_float+0x222>
 8003ac0:	6823      	ldr	r3, [r4, #0]
 8003ac2:	07d8      	lsls	r0, r3, #31
 8003ac4:	d50f      	bpl.n	8003ae6 <_printf_float+0x242>
 8003ac6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003aca:	4631      	mov	r1, r6
 8003acc:	4628      	mov	r0, r5
 8003ace:	47b8      	blx	r7
 8003ad0:	3001      	adds	r0, #1
 8003ad2:	f43f af42 	beq.w	800395a <_printf_float+0xb6>
 8003ad6:	f04f 0800 	mov.w	r8, #0
 8003ada:	f104 091a 	add.w	r9, r4, #26
 8003ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	4543      	cmp	r3, r8
 8003ae4:	dc09      	bgt.n	8003afa <_printf_float+0x256>
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	079b      	lsls	r3, r3, #30
 8003aea:	f100 8102 	bmi.w	8003cf2 <_printf_float+0x44e>
 8003aee:	68e0      	ldr	r0, [r4, #12]
 8003af0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003af2:	4298      	cmp	r0, r3
 8003af4:	bfb8      	it	lt
 8003af6:	4618      	movlt	r0, r3
 8003af8:	e731      	b.n	800395e <_printf_float+0xba>
 8003afa:	2301      	movs	r3, #1
 8003afc:	464a      	mov	r2, r9
 8003afe:	4631      	mov	r1, r6
 8003b00:	4628      	mov	r0, r5
 8003b02:	47b8      	blx	r7
 8003b04:	3001      	adds	r0, #1
 8003b06:	f43f af28 	beq.w	800395a <_printf_float+0xb6>
 8003b0a:	f108 0801 	add.w	r8, r8, #1
 8003b0e:	e7e6      	b.n	8003ade <_printf_float+0x23a>
 8003b10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	dc38      	bgt.n	8003b88 <_printf_float+0x2e4>
 8003b16:	2301      	movs	r3, #1
 8003b18:	4631      	mov	r1, r6
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	4a19      	ldr	r2, [pc, #100]	; (8003b84 <_printf_float+0x2e0>)
 8003b1e:	47b8      	blx	r7
 8003b20:	3001      	adds	r0, #1
 8003b22:	f43f af1a 	beq.w	800395a <_printf_float+0xb6>
 8003b26:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	d102      	bne.n	8003b34 <_printf_float+0x290>
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	07d9      	lsls	r1, r3, #31
 8003b32:	d5d8      	bpl.n	8003ae6 <_printf_float+0x242>
 8003b34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b38:	4631      	mov	r1, r6
 8003b3a:	4628      	mov	r0, r5
 8003b3c:	47b8      	blx	r7
 8003b3e:	3001      	adds	r0, #1
 8003b40:	f43f af0b 	beq.w	800395a <_printf_float+0xb6>
 8003b44:	f04f 0900 	mov.w	r9, #0
 8003b48:	f104 0a1a 	add.w	sl, r4, #26
 8003b4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b4e:	425b      	negs	r3, r3
 8003b50:	454b      	cmp	r3, r9
 8003b52:	dc01      	bgt.n	8003b58 <_printf_float+0x2b4>
 8003b54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b56:	e794      	b.n	8003a82 <_printf_float+0x1de>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	4652      	mov	r2, sl
 8003b5c:	4631      	mov	r1, r6
 8003b5e:	4628      	mov	r0, r5
 8003b60:	47b8      	blx	r7
 8003b62:	3001      	adds	r0, #1
 8003b64:	f43f aef9 	beq.w	800395a <_printf_float+0xb6>
 8003b68:	f109 0901 	add.w	r9, r9, #1
 8003b6c:	e7ee      	b.n	8003b4c <_printf_float+0x2a8>
 8003b6e:	bf00      	nop
 8003b70:	7fefffff 	.word	0x7fefffff
 8003b74:	0800656c 	.word	0x0800656c
 8003b78:	08006570 	.word	0x08006570
 8003b7c:	08006578 	.word	0x08006578
 8003b80:	08006574 	.word	0x08006574
 8003b84:	0800657c 	.word	0x0800657c
 8003b88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	bfa8      	it	ge
 8003b90:	461a      	movge	r2, r3
 8003b92:	2a00      	cmp	r2, #0
 8003b94:	4691      	mov	r9, r2
 8003b96:	dc37      	bgt.n	8003c08 <_printf_float+0x364>
 8003b98:	f04f 0b00 	mov.w	fp, #0
 8003b9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ba0:	f104 021a 	add.w	r2, r4, #26
 8003ba4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003ba8:	ebaa 0309 	sub.w	r3, sl, r9
 8003bac:	455b      	cmp	r3, fp
 8003bae:	dc33      	bgt.n	8003c18 <_printf_float+0x374>
 8003bb0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	db3b      	blt.n	8003c30 <_printf_float+0x38c>
 8003bb8:	6823      	ldr	r3, [r4, #0]
 8003bba:	07da      	lsls	r2, r3, #31
 8003bbc:	d438      	bmi.n	8003c30 <_printf_float+0x38c>
 8003bbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bc0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003bc2:	eba3 020a 	sub.w	r2, r3, sl
 8003bc6:	eba3 0901 	sub.w	r9, r3, r1
 8003bca:	4591      	cmp	r9, r2
 8003bcc:	bfa8      	it	ge
 8003bce:	4691      	movge	r9, r2
 8003bd0:	f1b9 0f00 	cmp.w	r9, #0
 8003bd4:	dc34      	bgt.n	8003c40 <_printf_float+0x39c>
 8003bd6:	f04f 0800 	mov.w	r8, #0
 8003bda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003bde:	f104 0a1a 	add.w	sl, r4, #26
 8003be2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	eba3 0309 	sub.w	r3, r3, r9
 8003bec:	4543      	cmp	r3, r8
 8003bee:	f77f af7a 	ble.w	8003ae6 <_printf_float+0x242>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	4652      	mov	r2, sl
 8003bf6:	4631      	mov	r1, r6
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	47b8      	blx	r7
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	f43f aeac 	beq.w	800395a <_printf_float+0xb6>
 8003c02:	f108 0801 	add.w	r8, r8, #1
 8003c06:	e7ec      	b.n	8003be2 <_printf_float+0x33e>
 8003c08:	4613      	mov	r3, r2
 8003c0a:	4631      	mov	r1, r6
 8003c0c:	4642      	mov	r2, r8
 8003c0e:	4628      	mov	r0, r5
 8003c10:	47b8      	blx	r7
 8003c12:	3001      	adds	r0, #1
 8003c14:	d1c0      	bne.n	8003b98 <_printf_float+0x2f4>
 8003c16:	e6a0      	b.n	800395a <_printf_float+0xb6>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	4631      	mov	r1, r6
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	920b      	str	r2, [sp, #44]	; 0x2c
 8003c20:	47b8      	blx	r7
 8003c22:	3001      	adds	r0, #1
 8003c24:	f43f ae99 	beq.w	800395a <_printf_float+0xb6>
 8003c28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003c2a:	f10b 0b01 	add.w	fp, fp, #1
 8003c2e:	e7b9      	b.n	8003ba4 <_printf_float+0x300>
 8003c30:	4631      	mov	r1, r6
 8003c32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c36:	4628      	mov	r0, r5
 8003c38:	47b8      	blx	r7
 8003c3a:	3001      	adds	r0, #1
 8003c3c:	d1bf      	bne.n	8003bbe <_printf_float+0x31a>
 8003c3e:	e68c      	b.n	800395a <_printf_float+0xb6>
 8003c40:	464b      	mov	r3, r9
 8003c42:	4631      	mov	r1, r6
 8003c44:	4628      	mov	r0, r5
 8003c46:	eb08 020a 	add.w	r2, r8, sl
 8003c4a:	47b8      	blx	r7
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	d1c2      	bne.n	8003bd6 <_printf_float+0x332>
 8003c50:	e683      	b.n	800395a <_printf_float+0xb6>
 8003c52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c54:	2a01      	cmp	r2, #1
 8003c56:	dc01      	bgt.n	8003c5c <_printf_float+0x3b8>
 8003c58:	07db      	lsls	r3, r3, #31
 8003c5a:	d537      	bpl.n	8003ccc <_printf_float+0x428>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	4642      	mov	r2, r8
 8003c60:	4631      	mov	r1, r6
 8003c62:	4628      	mov	r0, r5
 8003c64:	47b8      	blx	r7
 8003c66:	3001      	adds	r0, #1
 8003c68:	f43f ae77 	beq.w	800395a <_printf_float+0xb6>
 8003c6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c70:	4631      	mov	r1, r6
 8003c72:	4628      	mov	r0, r5
 8003c74:	47b8      	blx	r7
 8003c76:	3001      	adds	r0, #1
 8003c78:	f43f ae6f 	beq.w	800395a <_printf_float+0xb6>
 8003c7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c80:	2200      	movs	r2, #0
 8003c82:	2300      	movs	r3, #0
 8003c84:	f7fc fe90 	bl	80009a8 <__aeabi_dcmpeq>
 8003c88:	b9d8      	cbnz	r0, 8003cc2 <_printf_float+0x41e>
 8003c8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c8c:	f108 0201 	add.w	r2, r8, #1
 8003c90:	3b01      	subs	r3, #1
 8003c92:	4631      	mov	r1, r6
 8003c94:	4628      	mov	r0, r5
 8003c96:	47b8      	blx	r7
 8003c98:	3001      	adds	r0, #1
 8003c9a:	d10e      	bne.n	8003cba <_printf_float+0x416>
 8003c9c:	e65d      	b.n	800395a <_printf_float+0xb6>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	464a      	mov	r2, r9
 8003ca2:	4631      	mov	r1, r6
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	47b8      	blx	r7
 8003ca8:	3001      	adds	r0, #1
 8003caa:	f43f ae56 	beq.w	800395a <_printf_float+0xb6>
 8003cae:	f108 0801 	add.w	r8, r8, #1
 8003cb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	4543      	cmp	r3, r8
 8003cb8:	dcf1      	bgt.n	8003c9e <_printf_float+0x3fa>
 8003cba:	4653      	mov	r3, sl
 8003cbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003cc0:	e6e0      	b.n	8003a84 <_printf_float+0x1e0>
 8003cc2:	f04f 0800 	mov.w	r8, #0
 8003cc6:	f104 091a 	add.w	r9, r4, #26
 8003cca:	e7f2      	b.n	8003cb2 <_printf_float+0x40e>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	4642      	mov	r2, r8
 8003cd0:	e7df      	b.n	8003c92 <_printf_float+0x3ee>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	464a      	mov	r2, r9
 8003cd6:	4631      	mov	r1, r6
 8003cd8:	4628      	mov	r0, r5
 8003cda:	47b8      	blx	r7
 8003cdc:	3001      	adds	r0, #1
 8003cde:	f43f ae3c 	beq.w	800395a <_printf_float+0xb6>
 8003ce2:	f108 0801 	add.w	r8, r8, #1
 8003ce6:	68e3      	ldr	r3, [r4, #12]
 8003ce8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003cea:	1a5b      	subs	r3, r3, r1
 8003cec:	4543      	cmp	r3, r8
 8003cee:	dcf0      	bgt.n	8003cd2 <_printf_float+0x42e>
 8003cf0:	e6fd      	b.n	8003aee <_printf_float+0x24a>
 8003cf2:	f04f 0800 	mov.w	r8, #0
 8003cf6:	f104 0919 	add.w	r9, r4, #25
 8003cfa:	e7f4      	b.n	8003ce6 <_printf_float+0x442>

08003cfc <_printf_common>:
 8003cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d00:	4616      	mov	r6, r2
 8003d02:	4699      	mov	r9, r3
 8003d04:	688a      	ldr	r2, [r1, #8]
 8003d06:	690b      	ldr	r3, [r1, #16]
 8003d08:	4607      	mov	r7, r0
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	bfb8      	it	lt
 8003d0e:	4613      	movlt	r3, r2
 8003d10:	6033      	str	r3, [r6, #0]
 8003d12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003d16:	460c      	mov	r4, r1
 8003d18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003d1c:	b10a      	cbz	r2, 8003d22 <_printf_common+0x26>
 8003d1e:	3301      	adds	r3, #1
 8003d20:	6033      	str	r3, [r6, #0]
 8003d22:	6823      	ldr	r3, [r4, #0]
 8003d24:	0699      	lsls	r1, r3, #26
 8003d26:	bf42      	ittt	mi
 8003d28:	6833      	ldrmi	r3, [r6, #0]
 8003d2a:	3302      	addmi	r3, #2
 8003d2c:	6033      	strmi	r3, [r6, #0]
 8003d2e:	6825      	ldr	r5, [r4, #0]
 8003d30:	f015 0506 	ands.w	r5, r5, #6
 8003d34:	d106      	bne.n	8003d44 <_printf_common+0x48>
 8003d36:	f104 0a19 	add.w	sl, r4, #25
 8003d3a:	68e3      	ldr	r3, [r4, #12]
 8003d3c:	6832      	ldr	r2, [r6, #0]
 8003d3e:	1a9b      	subs	r3, r3, r2
 8003d40:	42ab      	cmp	r3, r5
 8003d42:	dc28      	bgt.n	8003d96 <_printf_common+0x9a>
 8003d44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d48:	1e13      	subs	r3, r2, #0
 8003d4a:	6822      	ldr	r2, [r4, #0]
 8003d4c:	bf18      	it	ne
 8003d4e:	2301      	movne	r3, #1
 8003d50:	0692      	lsls	r2, r2, #26
 8003d52:	d42d      	bmi.n	8003db0 <_printf_common+0xb4>
 8003d54:	4649      	mov	r1, r9
 8003d56:	4638      	mov	r0, r7
 8003d58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d5c:	47c0      	blx	r8
 8003d5e:	3001      	adds	r0, #1
 8003d60:	d020      	beq.n	8003da4 <_printf_common+0xa8>
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	68e5      	ldr	r5, [r4, #12]
 8003d66:	f003 0306 	and.w	r3, r3, #6
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	bf18      	it	ne
 8003d6e:	2500      	movne	r5, #0
 8003d70:	6832      	ldr	r2, [r6, #0]
 8003d72:	f04f 0600 	mov.w	r6, #0
 8003d76:	68a3      	ldr	r3, [r4, #8]
 8003d78:	bf08      	it	eq
 8003d7a:	1aad      	subeq	r5, r5, r2
 8003d7c:	6922      	ldr	r2, [r4, #16]
 8003d7e:	bf08      	it	eq
 8003d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d84:	4293      	cmp	r3, r2
 8003d86:	bfc4      	itt	gt
 8003d88:	1a9b      	subgt	r3, r3, r2
 8003d8a:	18ed      	addgt	r5, r5, r3
 8003d8c:	341a      	adds	r4, #26
 8003d8e:	42b5      	cmp	r5, r6
 8003d90:	d11a      	bne.n	8003dc8 <_printf_common+0xcc>
 8003d92:	2000      	movs	r0, #0
 8003d94:	e008      	b.n	8003da8 <_printf_common+0xac>
 8003d96:	2301      	movs	r3, #1
 8003d98:	4652      	mov	r2, sl
 8003d9a:	4649      	mov	r1, r9
 8003d9c:	4638      	mov	r0, r7
 8003d9e:	47c0      	blx	r8
 8003da0:	3001      	adds	r0, #1
 8003da2:	d103      	bne.n	8003dac <_printf_common+0xb0>
 8003da4:	f04f 30ff 	mov.w	r0, #4294967295
 8003da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dac:	3501      	adds	r5, #1
 8003dae:	e7c4      	b.n	8003d3a <_printf_common+0x3e>
 8003db0:	2030      	movs	r0, #48	; 0x30
 8003db2:	18e1      	adds	r1, r4, r3
 8003db4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003dbe:	4422      	add	r2, r4
 8003dc0:	3302      	adds	r3, #2
 8003dc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003dc6:	e7c5      	b.n	8003d54 <_printf_common+0x58>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	4622      	mov	r2, r4
 8003dcc:	4649      	mov	r1, r9
 8003dce:	4638      	mov	r0, r7
 8003dd0:	47c0      	blx	r8
 8003dd2:	3001      	adds	r0, #1
 8003dd4:	d0e6      	beq.n	8003da4 <_printf_common+0xa8>
 8003dd6:	3601      	adds	r6, #1
 8003dd8:	e7d9      	b.n	8003d8e <_printf_common+0x92>
	...

08003ddc <_printf_i>:
 8003ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003de0:	7e0f      	ldrb	r7, [r1, #24]
 8003de2:	4691      	mov	r9, r2
 8003de4:	2f78      	cmp	r7, #120	; 0x78
 8003de6:	4680      	mov	r8, r0
 8003de8:	460c      	mov	r4, r1
 8003dea:	469a      	mov	sl, r3
 8003dec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003dee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003df2:	d807      	bhi.n	8003e04 <_printf_i+0x28>
 8003df4:	2f62      	cmp	r7, #98	; 0x62
 8003df6:	d80a      	bhi.n	8003e0e <_printf_i+0x32>
 8003df8:	2f00      	cmp	r7, #0
 8003dfa:	f000 80d9 	beq.w	8003fb0 <_printf_i+0x1d4>
 8003dfe:	2f58      	cmp	r7, #88	; 0x58
 8003e00:	f000 80a4 	beq.w	8003f4c <_printf_i+0x170>
 8003e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003e0c:	e03a      	b.n	8003e84 <_printf_i+0xa8>
 8003e0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003e12:	2b15      	cmp	r3, #21
 8003e14:	d8f6      	bhi.n	8003e04 <_printf_i+0x28>
 8003e16:	a101      	add	r1, pc, #4	; (adr r1, 8003e1c <_printf_i+0x40>)
 8003e18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e1c:	08003e75 	.word	0x08003e75
 8003e20:	08003e89 	.word	0x08003e89
 8003e24:	08003e05 	.word	0x08003e05
 8003e28:	08003e05 	.word	0x08003e05
 8003e2c:	08003e05 	.word	0x08003e05
 8003e30:	08003e05 	.word	0x08003e05
 8003e34:	08003e89 	.word	0x08003e89
 8003e38:	08003e05 	.word	0x08003e05
 8003e3c:	08003e05 	.word	0x08003e05
 8003e40:	08003e05 	.word	0x08003e05
 8003e44:	08003e05 	.word	0x08003e05
 8003e48:	08003f97 	.word	0x08003f97
 8003e4c:	08003eb9 	.word	0x08003eb9
 8003e50:	08003f79 	.word	0x08003f79
 8003e54:	08003e05 	.word	0x08003e05
 8003e58:	08003e05 	.word	0x08003e05
 8003e5c:	08003fb9 	.word	0x08003fb9
 8003e60:	08003e05 	.word	0x08003e05
 8003e64:	08003eb9 	.word	0x08003eb9
 8003e68:	08003e05 	.word	0x08003e05
 8003e6c:	08003e05 	.word	0x08003e05
 8003e70:	08003f81 	.word	0x08003f81
 8003e74:	682b      	ldr	r3, [r5, #0]
 8003e76:	1d1a      	adds	r2, r3, #4
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	602a      	str	r2, [r5, #0]
 8003e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e84:	2301      	movs	r3, #1
 8003e86:	e0a4      	b.n	8003fd2 <_printf_i+0x1f6>
 8003e88:	6820      	ldr	r0, [r4, #0]
 8003e8a:	6829      	ldr	r1, [r5, #0]
 8003e8c:	0606      	lsls	r6, r0, #24
 8003e8e:	f101 0304 	add.w	r3, r1, #4
 8003e92:	d50a      	bpl.n	8003eaa <_printf_i+0xce>
 8003e94:	680e      	ldr	r6, [r1, #0]
 8003e96:	602b      	str	r3, [r5, #0]
 8003e98:	2e00      	cmp	r6, #0
 8003e9a:	da03      	bge.n	8003ea4 <_printf_i+0xc8>
 8003e9c:	232d      	movs	r3, #45	; 0x2d
 8003e9e:	4276      	negs	r6, r6
 8003ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ea4:	230a      	movs	r3, #10
 8003ea6:	485e      	ldr	r0, [pc, #376]	; (8004020 <_printf_i+0x244>)
 8003ea8:	e019      	b.n	8003ede <_printf_i+0x102>
 8003eaa:	680e      	ldr	r6, [r1, #0]
 8003eac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003eb0:	602b      	str	r3, [r5, #0]
 8003eb2:	bf18      	it	ne
 8003eb4:	b236      	sxthne	r6, r6
 8003eb6:	e7ef      	b.n	8003e98 <_printf_i+0xbc>
 8003eb8:	682b      	ldr	r3, [r5, #0]
 8003eba:	6820      	ldr	r0, [r4, #0]
 8003ebc:	1d19      	adds	r1, r3, #4
 8003ebe:	6029      	str	r1, [r5, #0]
 8003ec0:	0601      	lsls	r1, r0, #24
 8003ec2:	d501      	bpl.n	8003ec8 <_printf_i+0xec>
 8003ec4:	681e      	ldr	r6, [r3, #0]
 8003ec6:	e002      	b.n	8003ece <_printf_i+0xf2>
 8003ec8:	0646      	lsls	r6, r0, #25
 8003eca:	d5fb      	bpl.n	8003ec4 <_printf_i+0xe8>
 8003ecc:	881e      	ldrh	r6, [r3, #0]
 8003ece:	2f6f      	cmp	r7, #111	; 0x6f
 8003ed0:	bf0c      	ite	eq
 8003ed2:	2308      	moveq	r3, #8
 8003ed4:	230a      	movne	r3, #10
 8003ed6:	4852      	ldr	r0, [pc, #328]	; (8004020 <_printf_i+0x244>)
 8003ed8:	2100      	movs	r1, #0
 8003eda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003ede:	6865      	ldr	r5, [r4, #4]
 8003ee0:	2d00      	cmp	r5, #0
 8003ee2:	bfa8      	it	ge
 8003ee4:	6821      	ldrge	r1, [r4, #0]
 8003ee6:	60a5      	str	r5, [r4, #8]
 8003ee8:	bfa4      	itt	ge
 8003eea:	f021 0104 	bicge.w	r1, r1, #4
 8003eee:	6021      	strge	r1, [r4, #0]
 8003ef0:	b90e      	cbnz	r6, 8003ef6 <_printf_i+0x11a>
 8003ef2:	2d00      	cmp	r5, #0
 8003ef4:	d04d      	beq.n	8003f92 <_printf_i+0x1b6>
 8003ef6:	4615      	mov	r5, r2
 8003ef8:	fbb6 f1f3 	udiv	r1, r6, r3
 8003efc:	fb03 6711 	mls	r7, r3, r1, r6
 8003f00:	5dc7      	ldrb	r7, [r0, r7]
 8003f02:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f06:	4637      	mov	r7, r6
 8003f08:	42bb      	cmp	r3, r7
 8003f0a:	460e      	mov	r6, r1
 8003f0c:	d9f4      	bls.n	8003ef8 <_printf_i+0x11c>
 8003f0e:	2b08      	cmp	r3, #8
 8003f10:	d10b      	bne.n	8003f2a <_printf_i+0x14e>
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	07de      	lsls	r6, r3, #31
 8003f16:	d508      	bpl.n	8003f2a <_printf_i+0x14e>
 8003f18:	6923      	ldr	r3, [r4, #16]
 8003f1a:	6861      	ldr	r1, [r4, #4]
 8003f1c:	4299      	cmp	r1, r3
 8003f1e:	bfde      	ittt	le
 8003f20:	2330      	movle	r3, #48	; 0x30
 8003f22:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003f26:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003f2a:	1b52      	subs	r2, r2, r5
 8003f2c:	6122      	str	r2, [r4, #16]
 8003f2e:	464b      	mov	r3, r9
 8003f30:	4621      	mov	r1, r4
 8003f32:	4640      	mov	r0, r8
 8003f34:	f8cd a000 	str.w	sl, [sp]
 8003f38:	aa03      	add	r2, sp, #12
 8003f3a:	f7ff fedf 	bl	8003cfc <_printf_common>
 8003f3e:	3001      	adds	r0, #1
 8003f40:	d14c      	bne.n	8003fdc <_printf_i+0x200>
 8003f42:	f04f 30ff 	mov.w	r0, #4294967295
 8003f46:	b004      	add	sp, #16
 8003f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f4c:	4834      	ldr	r0, [pc, #208]	; (8004020 <_printf_i+0x244>)
 8003f4e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003f52:	6829      	ldr	r1, [r5, #0]
 8003f54:	6823      	ldr	r3, [r4, #0]
 8003f56:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f5a:	6029      	str	r1, [r5, #0]
 8003f5c:	061d      	lsls	r5, r3, #24
 8003f5e:	d514      	bpl.n	8003f8a <_printf_i+0x1ae>
 8003f60:	07df      	lsls	r7, r3, #31
 8003f62:	bf44      	itt	mi
 8003f64:	f043 0320 	orrmi.w	r3, r3, #32
 8003f68:	6023      	strmi	r3, [r4, #0]
 8003f6a:	b91e      	cbnz	r6, 8003f74 <_printf_i+0x198>
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	f023 0320 	bic.w	r3, r3, #32
 8003f72:	6023      	str	r3, [r4, #0]
 8003f74:	2310      	movs	r3, #16
 8003f76:	e7af      	b.n	8003ed8 <_printf_i+0xfc>
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	f043 0320 	orr.w	r3, r3, #32
 8003f7e:	6023      	str	r3, [r4, #0]
 8003f80:	2378      	movs	r3, #120	; 0x78
 8003f82:	4828      	ldr	r0, [pc, #160]	; (8004024 <_printf_i+0x248>)
 8003f84:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f88:	e7e3      	b.n	8003f52 <_printf_i+0x176>
 8003f8a:	0659      	lsls	r1, r3, #25
 8003f8c:	bf48      	it	mi
 8003f8e:	b2b6      	uxthmi	r6, r6
 8003f90:	e7e6      	b.n	8003f60 <_printf_i+0x184>
 8003f92:	4615      	mov	r5, r2
 8003f94:	e7bb      	b.n	8003f0e <_printf_i+0x132>
 8003f96:	682b      	ldr	r3, [r5, #0]
 8003f98:	6826      	ldr	r6, [r4, #0]
 8003f9a:	1d18      	adds	r0, r3, #4
 8003f9c:	6961      	ldr	r1, [r4, #20]
 8003f9e:	6028      	str	r0, [r5, #0]
 8003fa0:	0635      	lsls	r5, r6, #24
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	d501      	bpl.n	8003faa <_printf_i+0x1ce>
 8003fa6:	6019      	str	r1, [r3, #0]
 8003fa8:	e002      	b.n	8003fb0 <_printf_i+0x1d4>
 8003faa:	0670      	lsls	r0, r6, #25
 8003fac:	d5fb      	bpl.n	8003fa6 <_printf_i+0x1ca>
 8003fae:	8019      	strh	r1, [r3, #0]
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	4615      	mov	r5, r2
 8003fb4:	6123      	str	r3, [r4, #16]
 8003fb6:	e7ba      	b.n	8003f2e <_printf_i+0x152>
 8003fb8:	682b      	ldr	r3, [r5, #0]
 8003fba:	2100      	movs	r1, #0
 8003fbc:	1d1a      	adds	r2, r3, #4
 8003fbe:	602a      	str	r2, [r5, #0]
 8003fc0:	681d      	ldr	r5, [r3, #0]
 8003fc2:	6862      	ldr	r2, [r4, #4]
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	f000 fed5 	bl	8004d74 <memchr>
 8003fca:	b108      	cbz	r0, 8003fd0 <_printf_i+0x1f4>
 8003fcc:	1b40      	subs	r0, r0, r5
 8003fce:	6060      	str	r0, [r4, #4]
 8003fd0:	6863      	ldr	r3, [r4, #4]
 8003fd2:	6123      	str	r3, [r4, #16]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fda:	e7a8      	b.n	8003f2e <_printf_i+0x152>
 8003fdc:	462a      	mov	r2, r5
 8003fde:	4649      	mov	r1, r9
 8003fe0:	4640      	mov	r0, r8
 8003fe2:	6923      	ldr	r3, [r4, #16]
 8003fe4:	47d0      	blx	sl
 8003fe6:	3001      	adds	r0, #1
 8003fe8:	d0ab      	beq.n	8003f42 <_printf_i+0x166>
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	079b      	lsls	r3, r3, #30
 8003fee:	d413      	bmi.n	8004018 <_printf_i+0x23c>
 8003ff0:	68e0      	ldr	r0, [r4, #12]
 8003ff2:	9b03      	ldr	r3, [sp, #12]
 8003ff4:	4298      	cmp	r0, r3
 8003ff6:	bfb8      	it	lt
 8003ff8:	4618      	movlt	r0, r3
 8003ffa:	e7a4      	b.n	8003f46 <_printf_i+0x16a>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	4632      	mov	r2, r6
 8004000:	4649      	mov	r1, r9
 8004002:	4640      	mov	r0, r8
 8004004:	47d0      	blx	sl
 8004006:	3001      	adds	r0, #1
 8004008:	d09b      	beq.n	8003f42 <_printf_i+0x166>
 800400a:	3501      	adds	r5, #1
 800400c:	68e3      	ldr	r3, [r4, #12]
 800400e:	9903      	ldr	r1, [sp, #12]
 8004010:	1a5b      	subs	r3, r3, r1
 8004012:	42ab      	cmp	r3, r5
 8004014:	dcf2      	bgt.n	8003ffc <_printf_i+0x220>
 8004016:	e7eb      	b.n	8003ff0 <_printf_i+0x214>
 8004018:	2500      	movs	r5, #0
 800401a:	f104 0619 	add.w	r6, r4, #25
 800401e:	e7f5      	b.n	800400c <_printf_i+0x230>
 8004020:	0800657e 	.word	0x0800657e
 8004024:	0800658f 	.word	0x0800658f

08004028 <siprintf>:
 8004028:	b40e      	push	{r1, r2, r3}
 800402a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800402e:	b500      	push	{lr}
 8004030:	b09c      	sub	sp, #112	; 0x70
 8004032:	ab1d      	add	r3, sp, #116	; 0x74
 8004034:	9002      	str	r0, [sp, #8]
 8004036:	9006      	str	r0, [sp, #24]
 8004038:	9107      	str	r1, [sp, #28]
 800403a:	9104      	str	r1, [sp, #16]
 800403c:	4808      	ldr	r0, [pc, #32]	; (8004060 <siprintf+0x38>)
 800403e:	4909      	ldr	r1, [pc, #36]	; (8004064 <siprintf+0x3c>)
 8004040:	f853 2b04 	ldr.w	r2, [r3], #4
 8004044:	9105      	str	r1, [sp, #20]
 8004046:	6800      	ldr	r0, [r0, #0]
 8004048:	a902      	add	r1, sp, #8
 800404a:	9301      	str	r3, [sp, #4]
 800404c:	f001 fb7c 	bl	8005748 <_svfiprintf_r>
 8004050:	2200      	movs	r2, #0
 8004052:	9b02      	ldr	r3, [sp, #8]
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	b01c      	add	sp, #112	; 0x70
 8004058:	f85d eb04 	ldr.w	lr, [sp], #4
 800405c:	b003      	add	sp, #12
 800405e:	4770      	bx	lr
 8004060:	2000000c 	.word	0x2000000c
 8004064:	ffff0208 	.word	0xffff0208

08004068 <quorem>:
 8004068:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800406c:	6903      	ldr	r3, [r0, #16]
 800406e:	690c      	ldr	r4, [r1, #16]
 8004070:	4607      	mov	r7, r0
 8004072:	42a3      	cmp	r3, r4
 8004074:	f2c0 8082 	blt.w	800417c <quorem+0x114>
 8004078:	3c01      	subs	r4, #1
 800407a:	f100 0514 	add.w	r5, r0, #20
 800407e:	f101 0814 	add.w	r8, r1, #20
 8004082:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004086:	9301      	str	r3, [sp, #4]
 8004088:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800408c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004090:	3301      	adds	r3, #1
 8004092:	429a      	cmp	r2, r3
 8004094:	fbb2 f6f3 	udiv	r6, r2, r3
 8004098:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800409c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80040a0:	d331      	bcc.n	8004106 <quorem+0x9e>
 80040a2:	f04f 0e00 	mov.w	lr, #0
 80040a6:	4640      	mov	r0, r8
 80040a8:	46ac      	mov	ip, r5
 80040aa:	46f2      	mov	sl, lr
 80040ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80040b0:	b293      	uxth	r3, r2
 80040b2:	fb06 e303 	mla	r3, r6, r3, lr
 80040b6:	0c12      	lsrs	r2, r2, #16
 80040b8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80040bc:	b29b      	uxth	r3, r3
 80040be:	fb06 e202 	mla	r2, r6, r2, lr
 80040c2:	ebaa 0303 	sub.w	r3, sl, r3
 80040c6:	f8dc a000 	ldr.w	sl, [ip]
 80040ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80040ce:	fa1f fa8a 	uxth.w	sl, sl
 80040d2:	4453      	add	r3, sl
 80040d4:	f8dc a000 	ldr.w	sl, [ip]
 80040d8:	b292      	uxth	r2, r2
 80040da:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80040de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040e8:	4581      	cmp	r9, r0
 80040ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80040ee:	f84c 3b04 	str.w	r3, [ip], #4
 80040f2:	d2db      	bcs.n	80040ac <quorem+0x44>
 80040f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80040f8:	b92b      	cbnz	r3, 8004106 <quorem+0x9e>
 80040fa:	9b01      	ldr	r3, [sp, #4]
 80040fc:	3b04      	subs	r3, #4
 80040fe:	429d      	cmp	r5, r3
 8004100:	461a      	mov	r2, r3
 8004102:	d32f      	bcc.n	8004164 <quorem+0xfc>
 8004104:	613c      	str	r4, [r7, #16]
 8004106:	4638      	mov	r0, r7
 8004108:	f001 f8ce 	bl	80052a8 <__mcmp>
 800410c:	2800      	cmp	r0, #0
 800410e:	db25      	blt.n	800415c <quorem+0xf4>
 8004110:	4628      	mov	r0, r5
 8004112:	f04f 0c00 	mov.w	ip, #0
 8004116:	3601      	adds	r6, #1
 8004118:	f858 1b04 	ldr.w	r1, [r8], #4
 800411c:	f8d0 e000 	ldr.w	lr, [r0]
 8004120:	b28b      	uxth	r3, r1
 8004122:	ebac 0303 	sub.w	r3, ip, r3
 8004126:	fa1f f28e 	uxth.w	r2, lr
 800412a:	4413      	add	r3, r2
 800412c:	0c0a      	lsrs	r2, r1, #16
 800412e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004132:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004136:	b29b      	uxth	r3, r3
 8004138:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800413c:	45c1      	cmp	r9, r8
 800413e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004142:	f840 3b04 	str.w	r3, [r0], #4
 8004146:	d2e7      	bcs.n	8004118 <quorem+0xb0>
 8004148:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800414c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004150:	b922      	cbnz	r2, 800415c <quorem+0xf4>
 8004152:	3b04      	subs	r3, #4
 8004154:	429d      	cmp	r5, r3
 8004156:	461a      	mov	r2, r3
 8004158:	d30a      	bcc.n	8004170 <quorem+0x108>
 800415a:	613c      	str	r4, [r7, #16]
 800415c:	4630      	mov	r0, r6
 800415e:	b003      	add	sp, #12
 8004160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004164:	6812      	ldr	r2, [r2, #0]
 8004166:	3b04      	subs	r3, #4
 8004168:	2a00      	cmp	r2, #0
 800416a:	d1cb      	bne.n	8004104 <quorem+0x9c>
 800416c:	3c01      	subs	r4, #1
 800416e:	e7c6      	b.n	80040fe <quorem+0x96>
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	3b04      	subs	r3, #4
 8004174:	2a00      	cmp	r2, #0
 8004176:	d1f0      	bne.n	800415a <quorem+0xf2>
 8004178:	3c01      	subs	r4, #1
 800417a:	e7eb      	b.n	8004154 <quorem+0xec>
 800417c:	2000      	movs	r0, #0
 800417e:	e7ee      	b.n	800415e <quorem+0xf6>

08004180 <_dtoa_r>:
 8004180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004184:	4616      	mov	r6, r2
 8004186:	461f      	mov	r7, r3
 8004188:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800418a:	b099      	sub	sp, #100	; 0x64
 800418c:	4605      	mov	r5, r0
 800418e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004192:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004196:	b974      	cbnz	r4, 80041b6 <_dtoa_r+0x36>
 8004198:	2010      	movs	r0, #16
 800419a:	f000 fde3 	bl	8004d64 <malloc>
 800419e:	4602      	mov	r2, r0
 80041a0:	6268      	str	r0, [r5, #36]	; 0x24
 80041a2:	b920      	cbnz	r0, 80041ae <_dtoa_r+0x2e>
 80041a4:	21ea      	movs	r1, #234	; 0xea
 80041a6:	4ba8      	ldr	r3, [pc, #672]	; (8004448 <_dtoa_r+0x2c8>)
 80041a8:	48a8      	ldr	r0, [pc, #672]	; (800444c <_dtoa_r+0x2cc>)
 80041aa:	f001 fbdd 	bl	8005968 <__assert_func>
 80041ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80041b2:	6004      	str	r4, [r0, #0]
 80041b4:	60c4      	str	r4, [r0, #12]
 80041b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80041b8:	6819      	ldr	r1, [r3, #0]
 80041ba:	b151      	cbz	r1, 80041d2 <_dtoa_r+0x52>
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	2301      	movs	r3, #1
 80041c0:	4093      	lsls	r3, r2
 80041c2:	604a      	str	r2, [r1, #4]
 80041c4:	608b      	str	r3, [r1, #8]
 80041c6:	4628      	mov	r0, r5
 80041c8:	f000 fe30 	bl	8004e2c <_Bfree>
 80041cc:	2200      	movs	r2, #0
 80041ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	1e3b      	subs	r3, r7, #0
 80041d4:	bfaf      	iteee	ge
 80041d6:	2300      	movge	r3, #0
 80041d8:	2201      	movlt	r2, #1
 80041da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80041de:	9305      	strlt	r3, [sp, #20]
 80041e0:	bfa8      	it	ge
 80041e2:	f8c8 3000 	strge.w	r3, [r8]
 80041e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80041ea:	4b99      	ldr	r3, [pc, #612]	; (8004450 <_dtoa_r+0x2d0>)
 80041ec:	bfb8      	it	lt
 80041ee:	f8c8 2000 	strlt.w	r2, [r8]
 80041f2:	ea33 0309 	bics.w	r3, r3, r9
 80041f6:	d119      	bne.n	800422c <_dtoa_r+0xac>
 80041f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80041fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004204:	4333      	orrs	r3, r6
 8004206:	f000 857f 	beq.w	8004d08 <_dtoa_r+0xb88>
 800420a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800420c:	b953      	cbnz	r3, 8004224 <_dtoa_r+0xa4>
 800420e:	4b91      	ldr	r3, [pc, #580]	; (8004454 <_dtoa_r+0x2d4>)
 8004210:	e022      	b.n	8004258 <_dtoa_r+0xd8>
 8004212:	4b91      	ldr	r3, [pc, #580]	; (8004458 <_dtoa_r+0x2d8>)
 8004214:	9303      	str	r3, [sp, #12]
 8004216:	3308      	adds	r3, #8
 8004218:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	9803      	ldr	r0, [sp, #12]
 800421e:	b019      	add	sp, #100	; 0x64
 8004220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004224:	4b8b      	ldr	r3, [pc, #556]	; (8004454 <_dtoa_r+0x2d4>)
 8004226:	9303      	str	r3, [sp, #12]
 8004228:	3303      	adds	r3, #3
 800422a:	e7f5      	b.n	8004218 <_dtoa_r+0x98>
 800422c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004230:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004234:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004238:	2200      	movs	r2, #0
 800423a:	2300      	movs	r3, #0
 800423c:	f7fc fbb4 	bl	80009a8 <__aeabi_dcmpeq>
 8004240:	4680      	mov	r8, r0
 8004242:	b158      	cbz	r0, 800425c <_dtoa_r+0xdc>
 8004244:	2301      	movs	r3, #1
 8004246:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 8558 	beq.w	8004d02 <_dtoa_r+0xb82>
 8004252:	4882      	ldr	r0, [pc, #520]	; (800445c <_dtoa_r+0x2dc>)
 8004254:	6018      	str	r0, [r3, #0]
 8004256:	1e43      	subs	r3, r0, #1
 8004258:	9303      	str	r3, [sp, #12]
 800425a:	e7df      	b.n	800421c <_dtoa_r+0x9c>
 800425c:	ab16      	add	r3, sp, #88	; 0x58
 800425e:	9301      	str	r3, [sp, #4]
 8004260:	ab17      	add	r3, sp, #92	; 0x5c
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	4628      	mov	r0, r5
 8004266:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800426a:	f001 f8c5 	bl	80053f8 <__d2b>
 800426e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004272:	4683      	mov	fp, r0
 8004274:	2c00      	cmp	r4, #0
 8004276:	d07f      	beq.n	8004378 <_dtoa_r+0x1f8>
 8004278:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800427c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800427e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004282:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004286:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800428a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800428e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004292:	2200      	movs	r2, #0
 8004294:	4b72      	ldr	r3, [pc, #456]	; (8004460 <_dtoa_r+0x2e0>)
 8004296:	f7fb ff67 	bl	8000168 <__aeabi_dsub>
 800429a:	a365      	add	r3, pc, #404	; (adr r3, 8004430 <_dtoa_r+0x2b0>)
 800429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a0:	f7fc f91a 	bl	80004d8 <__aeabi_dmul>
 80042a4:	a364      	add	r3, pc, #400	; (adr r3, 8004438 <_dtoa_r+0x2b8>)
 80042a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042aa:	f7fb ff5f 	bl	800016c <__adddf3>
 80042ae:	4606      	mov	r6, r0
 80042b0:	4620      	mov	r0, r4
 80042b2:	460f      	mov	r7, r1
 80042b4:	f7fc f8a6 	bl	8000404 <__aeabi_i2d>
 80042b8:	a361      	add	r3, pc, #388	; (adr r3, 8004440 <_dtoa_r+0x2c0>)
 80042ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042be:	f7fc f90b 	bl	80004d8 <__aeabi_dmul>
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4630      	mov	r0, r6
 80042c8:	4639      	mov	r1, r7
 80042ca:	f7fb ff4f 	bl	800016c <__adddf3>
 80042ce:	4606      	mov	r6, r0
 80042d0:	460f      	mov	r7, r1
 80042d2:	f7fc fbb1 	bl	8000a38 <__aeabi_d2iz>
 80042d6:	2200      	movs	r2, #0
 80042d8:	4682      	mov	sl, r0
 80042da:	2300      	movs	r3, #0
 80042dc:	4630      	mov	r0, r6
 80042de:	4639      	mov	r1, r7
 80042e0:	f7fc fb6c 	bl	80009bc <__aeabi_dcmplt>
 80042e4:	b148      	cbz	r0, 80042fa <_dtoa_r+0x17a>
 80042e6:	4650      	mov	r0, sl
 80042e8:	f7fc f88c 	bl	8000404 <__aeabi_i2d>
 80042ec:	4632      	mov	r2, r6
 80042ee:	463b      	mov	r3, r7
 80042f0:	f7fc fb5a 	bl	80009a8 <__aeabi_dcmpeq>
 80042f4:	b908      	cbnz	r0, 80042fa <_dtoa_r+0x17a>
 80042f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80042fa:	f1ba 0f16 	cmp.w	sl, #22
 80042fe:	d858      	bhi.n	80043b2 <_dtoa_r+0x232>
 8004300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004304:	4b57      	ldr	r3, [pc, #348]	; (8004464 <_dtoa_r+0x2e4>)
 8004306:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430e:	f7fc fb55 	bl	80009bc <__aeabi_dcmplt>
 8004312:	2800      	cmp	r0, #0
 8004314:	d04f      	beq.n	80043b6 <_dtoa_r+0x236>
 8004316:	2300      	movs	r3, #0
 8004318:	f10a 3aff 	add.w	sl, sl, #4294967295
 800431c:	930f      	str	r3, [sp, #60]	; 0x3c
 800431e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004320:	1b1c      	subs	r4, r3, r4
 8004322:	1e63      	subs	r3, r4, #1
 8004324:	9309      	str	r3, [sp, #36]	; 0x24
 8004326:	bf49      	itett	mi
 8004328:	f1c4 0301 	rsbmi	r3, r4, #1
 800432c:	2300      	movpl	r3, #0
 800432e:	9306      	strmi	r3, [sp, #24]
 8004330:	2300      	movmi	r3, #0
 8004332:	bf54      	ite	pl
 8004334:	9306      	strpl	r3, [sp, #24]
 8004336:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004338:	f1ba 0f00 	cmp.w	sl, #0
 800433c:	db3d      	blt.n	80043ba <_dtoa_r+0x23a>
 800433e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004340:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004344:	4453      	add	r3, sl
 8004346:	9309      	str	r3, [sp, #36]	; 0x24
 8004348:	2300      	movs	r3, #0
 800434a:	930a      	str	r3, [sp, #40]	; 0x28
 800434c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800434e:	2b09      	cmp	r3, #9
 8004350:	f200 808c 	bhi.w	800446c <_dtoa_r+0x2ec>
 8004354:	2b05      	cmp	r3, #5
 8004356:	bfc4      	itt	gt
 8004358:	3b04      	subgt	r3, #4
 800435a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800435c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800435e:	bfc8      	it	gt
 8004360:	2400      	movgt	r4, #0
 8004362:	f1a3 0302 	sub.w	r3, r3, #2
 8004366:	bfd8      	it	le
 8004368:	2401      	movle	r4, #1
 800436a:	2b03      	cmp	r3, #3
 800436c:	f200 808a 	bhi.w	8004484 <_dtoa_r+0x304>
 8004370:	e8df f003 	tbb	[pc, r3]
 8004374:	5b4d4f2d 	.word	0x5b4d4f2d
 8004378:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800437c:	441c      	add	r4, r3
 800437e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004382:	2b20      	cmp	r3, #32
 8004384:	bfc3      	ittte	gt
 8004386:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800438a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800438e:	fa09 f303 	lslgt.w	r3, r9, r3
 8004392:	f1c3 0320 	rsble	r3, r3, #32
 8004396:	bfc6      	itte	gt
 8004398:	fa26 f000 	lsrgt.w	r0, r6, r0
 800439c:	4318      	orrgt	r0, r3
 800439e:	fa06 f003 	lslle.w	r0, r6, r3
 80043a2:	f7fc f81f 	bl	80003e4 <__aeabi_ui2d>
 80043a6:	2301      	movs	r3, #1
 80043a8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80043ac:	3c01      	subs	r4, #1
 80043ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80043b0:	e76f      	b.n	8004292 <_dtoa_r+0x112>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e7b2      	b.n	800431c <_dtoa_r+0x19c>
 80043b6:	900f      	str	r0, [sp, #60]	; 0x3c
 80043b8:	e7b1      	b.n	800431e <_dtoa_r+0x19e>
 80043ba:	9b06      	ldr	r3, [sp, #24]
 80043bc:	eba3 030a 	sub.w	r3, r3, sl
 80043c0:	9306      	str	r3, [sp, #24]
 80043c2:	f1ca 0300 	rsb	r3, sl, #0
 80043c6:	930a      	str	r3, [sp, #40]	; 0x28
 80043c8:	2300      	movs	r3, #0
 80043ca:	930e      	str	r3, [sp, #56]	; 0x38
 80043cc:	e7be      	b.n	800434c <_dtoa_r+0x1cc>
 80043ce:	2300      	movs	r3, #0
 80043d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80043d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	dc58      	bgt.n	800448a <_dtoa_r+0x30a>
 80043d8:	f04f 0901 	mov.w	r9, #1
 80043dc:	464b      	mov	r3, r9
 80043de:	f8cd 9020 	str.w	r9, [sp, #32]
 80043e2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80043e6:	2200      	movs	r2, #0
 80043e8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80043ea:	6042      	str	r2, [r0, #4]
 80043ec:	2204      	movs	r2, #4
 80043ee:	f102 0614 	add.w	r6, r2, #20
 80043f2:	429e      	cmp	r6, r3
 80043f4:	6841      	ldr	r1, [r0, #4]
 80043f6:	d94e      	bls.n	8004496 <_dtoa_r+0x316>
 80043f8:	4628      	mov	r0, r5
 80043fa:	f000 fcd7 	bl	8004dac <_Balloc>
 80043fe:	9003      	str	r0, [sp, #12]
 8004400:	2800      	cmp	r0, #0
 8004402:	d14c      	bne.n	800449e <_dtoa_r+0x31e>
 8004404:	4602      	mov	r2, r0
 8004406:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800440a:	4b17      	ldr	r3, [pc, #92]	; (8004468 <_dtoa_r+0x2e8>)
 800440c:	e6cc      	b.n	80041a8 <_dtoa_r+0x28>
 800440e:	2301      	movs	r3, #1
 8004410:	e7de      	b.n	80043d0 <_dtoa_r+0x250>
 8004412:	2300      	movs	r3, #0
 8004414:	930b      	str	r3, [sp, #44]	; 0x2c
 8004416:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004418:	eb0a 0903 	add.w	r9, sl, r3
 800441c:	f109 0301 	add.w	r3, r9, #1
 8004420:	2b01      	cmp	r3, #1
 8004422:	9308      	str	r3, [sp, #32]
 8004424:	bfb8      	it	lt
 8004426:	2301      	movlt	r3, #1
 8004428:	e7dd      	b.n	80043e6 <_dtoa_r+0x266>
 800442a:	2301      	movs	r3, #1
 800442c:	e7f2      	b.n	8004414 <_dtoa_r+0x294>
 800442e:	bf00      	nop
 8004430:	636f4361 	.word	0x636f4361
 8004434:	3fd287a7 	.word	0x3fd287a7
 8004438:	8b60c8b3 	.word	0x8b60c8b3
 800443c:	3fc68a28 	.word	0x3fc68a28
 8004440:	509f79fb 	.word	0x509f79fb
 8004444:	3fd34413 	.word	0x3fd34413
 8004448:	080065ad 	.word	0x080065ad
 800444c:	080065c4 	.word	0x080065c4
 8004450:	7ff00000 	.word	0x7ff00000
 8004454:	080065a9 	.word	0x080065a9
 8004458:	080065a0 	.word	0x080065a0
 800445c:	0800657d 	.word	0x0800657d
 8004460:	3ff80000 	.word	0x3ff80000
 8004464:	080066b8 	.word	0x080066b8
 8004468:	0800661f 	.word	0x0800661f
 800446c:	2401      	movs	r4, #1
 800446e:	2300      	movs	r3, #0
 8004470:	940b      	str	r4, [sp, #44]	; 0x2c
 8004472:	9322      	str	r3, [sp, #136]	; 0x88
 8004474:	f04f 39ff 	mov.w	r9, #4294967295
 8004478:	2200      	movs	r2, #0
 800447a:	2312      	movs	r3, #18
 800447c:	f8cd 9020 	str.w	r9, [sp, #32]
 8004480:	9223      	str	r2, [sp, #140]	; 0x8c
 8004482:	e7b0      	b.n	80043e6 <_dtoa_r+0x266>
 8004484:	2301      	movs	r3, #1
 8004486:	930b      	str	r3, [sp, #44]	; 0x2c
 8004488:	e7f4      	b.n	8004474 <_dtoa_r+0x2f4>
 800448a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800448e:	464b      	mov	r3, r9
 8004490:	f8cd 9020 	str.w	r9, [sp, #32]
 8004494:	e7a7      	b.n	80043e6 <_dtoa_r+0x266>
 8004496:	3101      	adds	r1, #1
 8004498:	6041      	str	r1, [r0, #4]
 800449a:	0052      	lsls	r2, r2, #1
 800449c:	e7a7      	b.n	80043ee <_dtoa_r+0x26e>
 800449e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80044a0:	9a03      	ldr	r2, [sp, #12]
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	9b08      	ldr	r3, [sp, #32]
 80044a6:	2b0e      	cmp	r3, #14
 80044a8:	f200 80a8 	bhi.w	80045fc <_dtoa_r+0x47c>
 80044ac:	2c00      	cmp	r4, #0
 80044ae:	f000 80a5 	beq.w	80045fc <_dtoa_r+0x47c>
 80044b2:	f1ba 0f00 	cmp.w	sl, #0
 80044b6:	dd34      	ble.n	8004522 <_dtoa_r+0x3a2>
 80044b8:	4a9a      	ldr	r2, [pc, #616]	; (8004724 <_dtoa_r+0x5a4>)
 80044ba:	f00a 030f 	and.w	r3, sl, #15
 80044be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80044c2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80044c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80044ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80044ce:	ea4f 142a 	mov.w	r4, sl, asr #4
 80044d2:	d016      	beq.n	8004502 <_dtoa_r+0x382>
 80044d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80044d8:	4b93      	ldr	r3, [pc, #588]	; (8004728 <_dtoa_r+0x5a8>)
 80044da:	2703      	movs	r7, #3
 80044dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80044e0:	f7fc f924 	bl	800072c <__aeabi_ddiv>
 80044e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80044e8:	f004 040f 	and.w	r4, r4, #15
 80044ec:	4e8e      	ldr	r6, [pc, #568]	; (8004728 <_dtoa_r+0x5a8>)
 80044ee:	b954      	cbnz	r4, 8004506 <_dtoa_r+0x386>
 80044f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80044f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044f8:	f7fc f918 	bl	800072c <__aeabi_ddiv>
 80044fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004500:	e029      	b.n	8004556 <_dtoa_r+0x3d6>
 8004502:	2702      	movs	r7, #2
 8004504:	e7f2      	b.n	80044ec <_dtoa_r+0x36c>
 8004506:	07e1      	lsls	r1, r4, #31
 8004508:	d508      	bpl.n	800451c <_dtoa_r+0x39c>
 800450a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800450e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004512:	f7fb ffe1 	bl	80004d8 <__aeabi_dmul>
 8004516:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800451a:	3701      	adds	r7, #1
 800451c:	1064      	asrs	r4, r4, #1
 800451e:	3608      	adds	r6, #8
 8004520:	e7e5      	b.n	80044ee <_dtoa_r+0x36e>
 8004522:	f000 80a5 	beq.w	8004670 <_dtoa_r+0x4f0>
 8004526:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800452a:	f1ca 0400 	rsb	r4, sl, #0
 800452e:	4b7d      	ldr	r3, [pc, #500]	; (8004724 <_dtoa_r+0x5a4>)
 8004530:	f004 020f 	and.w	r2, r4, #15
 8004534:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f7fb ffcc 	bl	80004d8 <__aeabi_dmul>
 8004540:	2702      	movs	r7, #2
 8004542:	2300      	movs	r3, #0
 8004544:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004548:	4e77      	ldr	r6, [pc, #476]	; (8004728 <_dtoa_r+0x5a8>)
 800454a:	1124      	asrs	r4, r4, #4
 800454c:	2c00      	cmp	r4, #0
 800454e:	f040 8084 	bne.w	800465a <_dtoa_r+0x4da>
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1d2      	bne.n	80044fc <_dtoa_r+0x37c>
 8004556:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 808b 	beq.w	8004674 <_dtoa_r+0x4f4>
 800455e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004562:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004566:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800456a:	2200      	movs	r2, #0
 800456c:	4b6f      	ldr	r3, [pc, #444]	; (800472c <_dtoa_r+0x5ac>)
 800456e:	f7fc fa25 	bl	80009bc <__aeabi_dcmplt>
 8004572:	2800      	cmp	r0, #0
 8004574:	d07e      	beq.n	8004674 <_dtoa_r+0x4f4>
 8004576:	9b08      	ldr	r3, [sp, #32]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d07b      	beq.n	8004674 <_dtoa_r+0x4f4>
 800457c:	f1b9 0f00 	cmp.w	r9, #0
 8004580:	dd38      	ble.n	80045f4 <_dtoa_r+0x474>
 8004582:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004586:	2200      	movs	r2, #0
 8004588:	4b69      	ldr	r3, [pc, #420]	; (8004730 <_dtoa_r+0x5b0>)
 800458a:	f7fb ffa5 	bl	80004d8 <__aeabi_dmul>
 800458e:	464c      	mov	r4, r9
 8004590:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004594:	f10a 38ff 	add.w	r8, sl, #4294967295
 8004598:	3701      	adds	r7, #1
 800459a:	4638      	mov	r0, r7
 800459c:	f7fb ff32 	bl	8000404 <__aeabi_i2d>
 80045a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80045a4:	f7fb ff98 	bl	80004d8 <__aeabi_dmul>
 80045a8:	2200      	movs	r2, #0
 80045aa:	4b62      	ldr	r3, [pc, #392]	; (8004734 <_dtoa_r+0x5b4>)
 80045ac:	f7fb fdde 	bl	800016c <__adddf3>
 80045b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80045b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80045b8:	9611      	str	r6, [sp, #68]	; 0x44
 80045ba:	2c00      	cmp	r4, #0
 80045bc:	d15d      	bne.n	800467a <_dtoa_r+0x4fa>
 80045be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045c2:	2200      	movs	r2, #0
 80045c4:	4b5c      	ldr	r3, [pc, #368]	; (8004738 <_dtoa_r+0x5b8>)
 80045c6:	f7fb fdcf 	bl	8000168 <__aeabi_dsub>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80045d2:	4633      	mov	r3, r6
 80045d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045d6:	f7fc fa0f 	bl	80009f8 <__aeabi_dcmpgt>
 80045da:	2800      	cmp	r0, #0
 80045dc:	f040 829c 	bne.w	8004b18 <_dtoa_r+0x998>
 80045e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80045e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80045ea:	f7fc f9e7 	bl	80009bc <__aeabi_dcmplt>
 80045ee:	2800      	cmp	r0, #0
 80045f0:	f040 8290 	bne.w	8004b14 <_dtoa_r+0x994>
 80045f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80045f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80045fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f2c0 8152 	blt.w	80048a8 <_dtoa_r+0x728>
 8004604:	f1ba 0f0e 	cmp.w	sl, #14
 8004608:	f300 814e 	bgt.w	80048a8 <_dtoa_r+0x728>
 800460c:	4b45      	ldr	r3, [pc, #276]	; (8004724 <_dtoa_r+0x5a4>)
 800460e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004612:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004616:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800461a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800461c:	2b00      	cmp	r3, #0
 800461e:	f280 80db 	bge.w	80047d8 <_dtoa_r+0x658>
 8004622:	9b08      	ldr	r3, [sp, #32]
 8004624:	2b00      	cmp	r3, #0
 8004626:	f300 80d7 	bgt.w	80047d8 <_dtoa_r+0x658>
 800462a:	f040 8272 	bne.w	8004b12 <_dtoa_r+0x992>
 800462e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004632:	2200      	movs	r2, #0
 8004634:	4b40      	ldr	r3, [pc, #256]	; (8004738 <_dtoa_r+0x5b8>)
 8004636:	f7fb ff4f 	bl	80004d8 <__aeabi_dmul>
 800463a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800463e:	f7fc f9d1 	bl	80009e4 <__aeabi_dcmpge>
 8004642:	9c08      	ldr	r4, [sp, #32]
 8004644:	4626      	mov	r6, r4
 8004646:	2800      	cmp	r0, #0
 8004648:	f040 8248 	bne.w	8004adc <_dtoa_r+0x95c>
 800464c:	2331      	movs	r3, #49	; 0x31
 800464e:	9f03      	ldr	r7, [sp, #12]
 8004650:	f10a 0a01 	add.w	sl, sl, #1
 8004654:	f807 3b01 	strb.w	r3, [r7], #1
 8004658:	e244      	b.n	8004ae4 <_dtoa_r+0x964>
 800465a:	07e2      	lsls	r2, r4, #31
 800465c:	d505      	bpl.n	800466a <_dtoa_r+0x4ea>
 800465e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004662:	f7fb ff39 	bl	80004d8 <__aeabi_dmul>
 8004666:	2301      	movs	r3, #1
 8004668:	3701      	adds	r7, #1
 800466a:	1064      	asrs	r4, r4, #1
 800466c:	3608      	adds	r6, #8
 800466e:	e76d      	b.n	800454c <_dtoa_r+0x3cc>
 8004670:	2702      	movs	r7, #2
 8004672:	e770      	b.n	8004556 <_dtoa_r+0x3d6>
 8004674:	46d0      	mov	r8, sl
 8004676:	9c08      	ldr	r4, [sp, #32]
 8004678:	e78f      	b.n	800459a <_dtoa_r+0x41a>
 800467a:	9903      	ldr	r1, [sp, #12]
 800467c:	4b29      	ldr	r3, [pc, #164]	; (8004724 <_dtoa_r+0x5a4>)
 800467e:	4421      	add	r1, r4
 8004680:	9112      	str	r1, [sp, #72]	; 0x48
 8004682:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004684:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004688:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800468c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004690:	2900      	cmp	r1, #0
 8004692:	d055      	beq.n	8004740 <_dtoa_r+0x5c0>
 8004694:	2000      	movs	r0, #0
 8004696:	4929      	ldr	r1, [pc, #164]	; (800473c <_dtoa_r+0x5bc>)
 8004698:	f7fc f848 	bl	800072c <__aeabi_ddiv>
 800469c:	463b      	mov	r3, r7
 800469e:	4632      	mov	r2, r6
 80046a0:	f7fb fd62 	bl	8000168 <__aeabi_dsub>
 80046a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80046a8:	9f03      	ldr	r7, [sp, #12]
 80046aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046ae:	f7fc f9c3 	bl	8000a38 <__aeabi_d2iz>
 80046b2:	4604      	mov	r4, r0
 80046b4:	f7fb fea6 	bl	8000404 <__aeabi_i2d>
 80046b8:	4602      	mov	r2, r0
 80046ba:	460b      	mov	r3, r1
 80046bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046c0:	f7fb fd52 	bl	8000168 <__aeabi_dsub>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	3430      	adds	r4, #48	; 0x30
 80046ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80046ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80046d2:	f807 4b01 	strb.w	r4, [r7], #1
 80046d6:	f7fc f971 	bl	80009bc <__aeabi_dcmplt>
 80046da:	2800      	cmp	r0, #0
 80046dc:	d174      	bne.n	80047c8 <_dtoa_r+0x648>
 80046de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046e2:	2000      	movs	r0, #0
 80046e4:	4911      	ldr	r1, [pc, #68]	; (800472c <_dtoa_r+0x5ac>)
 80046e6:	f7fb fd3f 	bl	8000168 <__aeabi_dsub>
 80046ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80046ee:	f7fc f965 	bl	80009bc <__aeabi_dcmplt>
 80046f2:	2800      	cmp	r0, #0
 80046f4:	f040 80b7 	bne.w	8004866 <_dtoa_r+0x6e6>
 80046f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80046fa:	429f      	cmp	r7, r3
 80046fc:	f43f af7a 	beq.w	80045f4 <_dtoa_r+0x474>
 8004700:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004704:	2200      	movs	r2, #0
 8004706:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <_dtoa_r+0x5b0>)
 8004708:	f7fb fee6 	bl	80004d8 <__aeabi_dmul>
 800470c:	2200      	movs	r2, #0
 800470e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004712:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004716:	4b06      	ldr	r3, [pc, #24]	; (8004730 <_dtoa_r+0x5b0>)
 8004718:	f7fb fede 	bl	80004d8 <__aeabi_dmul>
 800471c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004720:	e7c3      	b.n	80046aa <_dtoa_r+0x52a>
 8004722:	bf00      	nop
 8004724:	080066b8 	.word	0x080066b8
 8004728:	08006690 	.word	0x08006690
 800472c:	3ff00000 	.word	0x3ff00000
 8004730:	40240000 	.word	0x40240000
 8004734:	401c0000 	.word	0x401c0000
 8004738:	40140000 	.word	0x40140000
 800473c:	3fe00000 	.word	0x3fe00000
 8004740:	4630      	mov	r0, r6
 8004742:	4639      	mov	r1, r7
 8004744:	f7fb fec8 	bl	80004d8 <__aeabi_dmul>
 8004748:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800474a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800474e:	9c03      	ldr	r4, [sp, #12]
 8004750:	9314      	str	r3, [sp, #80]	; 0x50
 8004752:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004756:	f7fc f96f 	bl	8000a38 <__aeabi_d2iz>
 800475a:	9015      	str	r0, [sp, #84]	; 0x54
 800475c:	f7fb fe52 	bl	8000404 <__aeabi_i2d>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004768:	f7fb fcfe 	bl	8000168 <__aeabi_dsub>
 800476c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800476e:	4606      	mov	r6, r0
 8004770:	3330      	adds	r3, #48	; 0x30
 8004772:	f804 3b01 	strb.w	r3, [r4], #1
 8004776:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004778:	460f      	mov	r7, r1
 800477a:	429c      	cmp	r4, r3
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	d124      	bne.n	80047cc <_dtoa_r+0x64c>
 8004782:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004786:	4bb0      	ldr	r3, [pc, #704]	; (8004a48 <_dtoa_r+0x8c8>)
 8004788:	f7fb fcf0 	bl	800016c <__adddf3>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4630      	mov	r0, r6
 8004792:	4639      	mov	r1, r7
 8004794:	f7fc f930 	bl	80009f8 <__aeabi_dcmpgt>
 8004798:	2800      	cmp	r0, #0
 800479a:	d163      	bne.n	8004864 <_dtoa_r+0x6e4>
 800479c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80047a0:	2000      	movs	r0, #0
 80047a2:	49a9      	ldr	r1, [pc, #676]	; (8004a48 <_dtoa_r+0x8c8>)
 80047a4:	f7fb fce0 	bl	8000168 <__aeabi_dsub>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4630      	mov	r0, r6
 80047ae:	4639      	mov	r1, r7
 80047b0:	f7fc f904 	bl	80009bc <__aeabi_dcmplt>
 80047b4:	2800      	cmp	r0, #0
 80047b6:	f43f af1d 	beq.w	80045f4 <_dtoa_r+0x474>
 80047ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80047bc:	1e7b      	subs	r3, r7, #1
 80047be:	9314      	str	r3, [sp, #80]	; 0x50
 80047c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80047c4:	2b30      	cmp	r3, #48	; 0x30
 80047c6:	d0f8      	beq.n	80047ba <_dtoa_r+0x63a>
 80047c8:	46c2      	mov	sl, r8
 80047ca:	e03b      	b.n	8004844 <_dtoa_r+0x6c4>
 80047cc:	4b9f      	ldr	r3, [pc, #636]	; (8004a4c <_dtoa_r+0x8cc>)
 80047ce:	f7fb fe83 	bl	80004d8 <__aeabi_dmul>
 80047d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047d6:	e7bc      	b.n	8004752 <_dtoa_r+0x5d2>
 80047d8:	9f03      	ldr	r7, [sp, #12]
 80047da:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80047de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80047e2:	4640      	mov	r0, r8
 80047e4:	4649      	mov	r1, r9
 80047e6:	f7fb ffa1 	bl	800072c <__aeabi_ddiv>
 80047ea:	f7fc f925 	bl	8000a38 <__aeabi_d2iz>
 80047ee:	4604      	mov	r4, r0
 80047f0:	f7fb fe08 	bl	8000404 <__aeabi_i2d>
 80047f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80047f8:	f7fb fe6e 	bl	80004d8 <__aeabi_dmul>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4640      	mov	r0, r8
 8004802:	4649      	mov	r1, r9
 8004804:	f7fb fcb0 	bl	8000168 <__aeabi_dsub>
 8004808:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800480c:	f807 6b01 	strb.w	r6, [r7], #1
 8004810:	9e03      	ldr	r6, [sp, #12]
 8004812:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004816:	1bbe      	subs	r6, r7, r6
 8004818:	45b4      	cmp	ip, r6
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	d136      	bne.n	800488e <_dtoa_r+0x70e>
 8004820:	f7fb fca4 	bl	800016c <__adddf3>
 8004824:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004828:	4680      	mov	r8, r0
 800482a:	4689      	mov	r9, r1
 800482c:	f7fc f8e4 	bl	80009f8 <__aeabi_dcmpgt>
 8004830:	bb58      	cbnz	r0, 800488a <_dtoa_r+0x70a>
 8004832:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004836:	4640      	mov	r0, r8
 8004838:	4649      	mov	r1, r9
 800483a:	f7fc f8b5 	bl	80009a8 <__aeabi_dcmpeq>
 800483e:	b108      	cbz	r0, 8004844 <_dtoa_r+0x6c4>
 8004840:	07e1      	lsls	r1, r4, #31
 8004842:	d422      	bmi.n	800488a <_dtoa_r+0x70a>
 8004844:	4628      	mov	r0, r5
 8004846:	4659      	mov	r1, fp
 8004848:	f000 faf0 	bl	8004e2c <_Bfree>
 800484c:	2300      	movs	r3, #0
 800484e:	703b      	strb	r3, [r7, #0]
 8004850:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004852:	f10a 0001 	add.w	r0, sl, #1
 8004856:	6018      	str	r0, [r3, #0]
 8004858:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800485a:	2b00      	cmp	r3, #0
 800485c:	f43f acde 	beq.w	800421c <_dtoa_r+0x9c>
 8004860:	601f      	str	r7, [r3, #0]
 8004862:	e4db      	b.n	800421c <_dtoa_r+0x9c>
 8004864:	4627      	mov	r7, r4
 8004866:	463b      	mov	r3, r7
 8004868:	461f      	mov	r7, r3
 800486a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800486e:	2a39      	cmp	r2, #57	; 0x39
 8004870:	d107      	bne.n	8004882 <_dtoa_r+0x702>
 8004872:	9a03      	ldr	r2, [sp, #12]
 8004874:	429a      	cmp	r2, r3
 8004876:	d1f7      	bne.n	8004868 <_dtoa_r+0x6e8>
 8004878:	2230      	movs	r2, #48	; 0x30
 800487a:	9903      	ldr	r1, [sp, #12]
 800487c:	f108 0801 	add.w	r8, r8, #1
 8004880:	700a      	strb	r2, [r1, #0]
 8004882:	781a      	ldrb	r2, [r3, #0]
 8004884:	3201      	adds	r2, #1
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	e79e      	b.n	80047c8 <_dtoa_r+0x648>
 800488a:	46d0      	mov	r8, sl
 800488c:	e7eb      	b.n	8004866 <_dtoa_r+0x6e6>
 800488e:	2200      	movs	r2, #0
 8004890:	4b6e      	ldr	r3, [pc, #440]	; (8004a4c <_dtoa_r+0x8cc>)
 8004892:	f7fb fe21 	bl	80004d8 <__aeabi_dmul>
 8004896:	2200      	movs	r2, #0
 8004898:	2300      	movs	r3, #0
 800489a:	4680      	mov	r8, r0
 800489c:	4689      	mov	r9, r1
 800489e:	f7fc f883 	bl	80009a8 <__aeabi_dcmpeq>
 80048a2:	2800      	cmp	r0, #0
 80048a4:	d09b      	beq.n	80047de <_dtoa_r+0x65e>
 80048a6:	e7cd      	b.n	8004844 <_dtoa_r+0x6c4>
 80048a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80048aa:	2a00      	cmp	r2, #0
 80048ac:	f000 80d0 	beq.w	8004a50 <_dtoa_r+0x8d0>
 80048b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80048b2:	2a01      	cmp	r2, #1
 80048b4:	f300 80ae 	bgt.w	8004a14 <_dtoa_r+0x894>
 80048b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80048ba:	2a00      	cmp	r2, #0
 80048bc:	f000 80a6 	beq.w	8004a0c <_dtoa_r+0x88c>
 80048c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80048c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80048c6:	9f06      	ldr	r7, [sp, #24]
 80048c8:	9a06      	ldr	r2, [sp, #24]
 80048ca:	2101      	movs	r1, #1
 80048cc:	441a      	add	r2, r3
 80048ce:	9206      	str	r2, [sp, #24]
 80048d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048d2:	4628      	mov	r0, r5
 80048d4:	441a      	add	r2, r3
 80048d6:	9209      	str	r2, [sp, #36]	; 0x24
 80048d8:	f000 fb5e 	bl	8004f98 <__i2b>
 80048dc:	4606      	mov	r6, r0
 80048de:	2f00      	cmp	r7, #0
 80048e0:	dd0c      	ble.n	80048fc <_dtoa_r+0x77c>
 80048e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	dd09      	ble.n	80048fc <_dtoa_r+0x77c>
 80048e8:	42bb      	cmp	r3, r7
 80048ea:	bfa8      	it	ge
 80048ec:	463b      	movge	r3, r7
 80048ee:	9a06      	ldr	r2, [sp, #24]
 80048f0:	1aff      	subs	r7, r7, r3
 80048f2:	1ad2      	subs	r2, r2, r3
 80048f4:	9206      	str	r2, [sp, #24]
 80048f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	9309      	str	r3, [sp, #36]	; 0x24
 80048fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048fe:	b1f3      	cbz	r3, 800493e <_dtoa_r+0x7be>
 8004900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 80a8 	beq.w	8004a58 <_dtoa_r+0x8d8>
 8004908:	2c00      	cmp	r4, #0
 800490a:	dd10      	ble.n	800492e <_dtoa_r+0x7ae>
 800490c:	4631      	mov	r1, r6
 800490e:	4622      	mov	r2, r4
 8004910:	4628      	mov	r0, r5
 8004912:	f000 fbff 	bl	8005114 <__pow5mult>
 8004916:	465a      	mov	r2, fp
 8004918:	4601      	mov	r1, r0
 800491a:	4606      	mov	r6, r0
 800491c:	4628      	mov	r0, r5
 800491e:	f000 fb51 	bl	8004fc4 <__multiply>
 8004922:	4680      	mov	r8, r0
 8004924:	4659      	mov	r1, fp
 8004926:	4628      	mov	r0, r5
 8004928:	f000 fa80 	bl	8004e2c <_Bfree>
 800492c:	46c3      	mov	fp, r8
 800492e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004930:	1b1a      	subs	r2, r3, r4
 8004932:	d004      	beq.n	800493e <_dtoa_r+0x7be>
 8004934:	4659      	mov	r1, fp
 8004936:	4628      	mov	r0, r5
 8004938:	f000 fbec 	bl	8005114 <__pow5mult>
 800493c:	4683      	mov	fp, r0
 800493e:	2101      	movs	r1, #1
 8004940:	4628      	mov	r0, r5
 8004942:	f000 fb29 	bl	8004f98 <__i2b>
 8004946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004948:	4604      	mov	r4, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	f340 8086 	ble.w	8004a5c <_dtoa_r+0x8dc>
 8004950:	461a      	mov	r2, r3
 8004952:	4601      	mov	r1, r0
 8004954:	4628      	mov	r0, r5
 8004956:	f000 fbdd 	bl	8005114 <__pow5mult>
 800495a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800495c:	4604      	mov	r4, r0
 800495e:	2b01      	cmp	r3, #1
 8004960:	dd7f      	ble.n	8004a62 <_dtoa_r+0x8e2>
 8004962:	f04f 0800 	mov.w	r8, #0
 8004966:	6923      	ldr	r3, [r4, #16]
 8004968:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800496c:	6918      	ldr	r0, [r3, #16]
 800496e:	f000 fac5 	bl	8004efc <__hi0bits>
 8004972:	f1c0 0020 	rsb	r0, r0, #32
 8004976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004978:	4418      	add	r0, r3
 800497a:	f010 001f 	ands.w	r0, r0, #31
 800497e:	f000 8092 	beq.w	8004aa6 <_dtoa_r+0x926>
 8004982:	f1c0 0320 	rsb	r3, r0, #32
 8004986:	2b04      	cmp	r3, #4
 8004988:	f340 808a 	ble.w	8004aa0 <_dtoa_r+0x920>
 800498c:	f1c0 001c 	rsb	r0, r0, #28
 8004990:	9b06      	ldr	r3, [sp, #24]
 8004992:	4407      	add	r7, r0
 8004994:	4403      	add	r3, r0
 8004996:	9306      	str	r3, [sp, #24]
 8004998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800499a:	4403      	add	r3, r0
 800499c:	9309      	str	r3, [sp, #36]	; 0x24
 800499e:	9b06      	ldr	r3, [sp, #24]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	dd05      	ble.n	80049b0 <_dtoa_r+0x830>
 80049a4:	4659      	mov	r1, fp
 80049a6:	461a      	mov	r2, r3
 80049a8:	4628      	mov	r0, r5
 80049aa:	f000 fc0d 	bl	80051c8 <__lshift>
 80049ae:	4683      	mov	fp, r0
 80049b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	dd05      	ble.n	80049c2 <_dtoa_r+0x842>
 80049b6:	4621      	mov	r1, r4
 80049b8:	461a      	mov	r2, r3
 80049ba:	4628      	mov	r0, r5
 80049bc:	f000 fc04 	bl	80051c8 <__lshift>
 80049c0:	4604      	mov	r4, r0
 80049c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d070      	beq.n	8004aaa <_dtoa_r+0x92a>
 80049c8:	4621      	mov	r1, r4
 80049ca:	4658      	mov	r0, fp
 80049cc:	f000 fc6c 	bl	80052a8 <__mcmp>
 80049d0:	2800      	cmp	r0, #0
 80049d2:	da6a      	bge.n	8004aaa <_dtoa_r+0x92a>
 80049d4:	2300      	movs	r3, #0
 80049d6:	4659      	mov	r1, fp
 80049d8:	220a      	movs	r2, #10
 80049da:	4628      	mov	r0, r5
 80049dc:	f000 fa48 	bl	8004e70 <__multadd>
 80049e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049e2:	4683      	mov	fp, r0
 80049e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8194 	beq.w	8004d16 <_dtoa_r+0xb96>
 80049ee:	4631      	mov	r1, r6
 80049f0:	2300      	movs	r3, #0
 80049f2:	220a      	movs	r2, #10
 80049f4:	4628      	mov	r0, r5
 80049f6:	f000 fa3b 	bl	8004e70 <__multadd>
 80049fa:	f1b9 0f00 	cmp.w	r9, #0
 80049fe:	4606      	mov	r6, r0
 8004a00:	f300 8093 	bgt.w	8004b2a <_dtoa_r+0x9aa>
 8004a04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	dc57      	bgt.n	8004aba <_dtoa_r+0x93a>
 8004a0a:	e08e      	b.n	8004b2a <_dtoa_r+0x9aa>
 8004a0c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004a0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004a12:	e757      	b.n	80048c4 <_dtoa_r+0x744>
 8004a14:	9b08      	ldr	r3, [sp, #32]
 8004a16:	1e5c      	subs	r4, r3, #1
 8004a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a1a:	42a3      	cmp	r3, r4
 8004a1c:	bfb7      	itett	lt
 8004a1e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004a20:	1b1c      	subge	r4, r3, r4
 8004a22:	1ae2      	sublt	r2, r4, r3
 8004a24:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004a26:	bfbe      	ittt	lt
 8004a28:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004a2a:	189b      	addlt	r3, r3, r2
 8004a2c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004a2e:	9b08      	ldr	r3, [sp, #32]
 8004a30:	bfb8      	it	lt
 8004a32:	2400      	movlt	r4, #0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	bfbb      	ittet	lt
 8004a38:	9b06      	ldrlt	r3, [sp, #24]
 8004a3a:	9a08      	ldrlt	r2, [sp, #32]
 8004a3c:	9f06      	ldrge	r7, [sp, #24]
 8004a3e:	1a9f      	sublt	r7, r3, r2
 8004a40:	bfac      	ite	ge
 8004a42:	9b08      	ldrge	r3, [sp, #32]
 8004a44:	2300      	movlt	r3, #0
 8004a46:	e73f      	b.n	80048c8 <_dtoa_r+0x748>
 8004a48:	3fe00000 	.word	0x3fe00000
 8004a4c:	40240000 	.word	0x40240000
 8004a50:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004a52:	9f06      	ldr	r7, [sp, #24]
 8004a54:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004a56:	e742      	b.n	80048de <_dtoa_r+0x75e>
 8004a58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a5a:	e76b      	b.n	8004934 <_dtoa_r+0x7b4>
 8004a5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	dc19      	bgt.n	8004a96 <_dtoa_r+0x916>
 8004a62:	9b04      	ldr	r3, [sp, #16]
 8004a64:	b9bb      	cbnz	r3, 8004a96 <_dtoa_r+0x916>
 8004a66:	9b05      	ldr	r3, [sp, #20]
 8004a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a6c:	b99b      	cbnz	r3, 8004a96 <_dtoa_r+0x916>
 8004a6e:	9b05      	ldr	r3, [sp, #20]
 8004a70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a74:	0d1b      	lsrs	r3, r3, #20
 8004a76:	051b      	lsls	r3, r3, #20
 8004a78:	b183      	cbz	r3, 8004a9c <_dtoa_r+0x91c>
 8004a7a:	f04f 0801 	mov.w	r8, #1
 8004a7e:	9b06      	ldr	r3, [sp, #24]
 8004a80:	3301      	adds	r3, #1
 8004a82:	9306      	str	r3, [sp, #24]
 8004a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a86:	3301      	adds	r3, #1
 8004a88:	9309      	str	r3, [sp, #36]	; 0x24
 8004a8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f47f af6a 	bne.w	8004966 <_dtoa_r+0x7e6>
 8004a92:	2001      	movs	r0, #1
 8004a94:	e76f      	b.n	8004976 <_dtoa_r+0x7f6>
 8004a96:	f04f 0800 	mov.w	r8, #0
 8004a9a:	e7f6      	b.n	8004a8a <_dtoa_r+0x90a>
 8004a9c:	4698      	mov	r8, r3
 8004a9e:	e7f4      	b.n	8004a8a <_dtoa_r+0x90a>
 8004aa0:	f43f af7d 	beq.w	800499e <_dtoa_r+0x81e>
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	301c      	adds	r0, #28
 8004aa8:	e772      	b.n	8004990 <_dtoa_r+0x810>
 8004aaa:	9b08      	ldr	r3, [sp, #32]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	dc36      	bgt.n	8004b1e <_dtoa_r+0x99e>
 8004ab0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	dd33      	ble.n	8004b1e <_dtoa_r+0x99e>
 8004ab6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004aba:	f1b9 0f00 	cmp.w	r9, #0
 8004abe:	d10d      	bne.n	8004adc <_dtoa_r+0x95c>
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	464b      	mov	r3, r9
 8004ac4:	2205      	movs	r2, #5
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f000 f9d2 	bl	8004e70 <__multadd>
 8004acc:	4601      	mov	r1, r0
 8004ace:	4604      	mov	r4, r0
 8004ad0:	4658      	mov	r0, fp
 8004ad2:	f000 fbe9 	bl	80052a8 <__mcmp>
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	f73f adb8 	bgt.w	800464c <_dtoa_r+0x4cc>
 8004adc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004ade:	9f03      	ldr	r7, [sp, #12]
 8004ae0:	ea6f 0a03 	mvn.w	sl, r3
 8004ae4:	f04f 0800 	mov.w	r8, #0
 8004ae8:	4621      	mov	r1, r4
 8004aea:	4628      	mov	r0, r5
 8004aec:	f000 f99e 	bl	8004e2c <_Bfree>
 8004af0:	2e00      	cmp	r6, #0
 8004af2:	f43f aea7 	beq.w	8004844 <_dtoa_r+0x6c4>
 8004af6:	f1b8 0f00 	cmp.w	r8, #0
 8004afa:	d005      	beq.n	8004b08 <_dtoa_r+0x988>
 8004afc:	45b0      	cmp	r8, r6
 8004afe:	d003      	beq.n	8004b08 <_dtoa_r+0x988>
 8004b00:	4641      	mov	r1, r8
 8004b02:	4628      	mov	r0, r5
 8004b04:	f000 f992 	bl	8004e2c <_Bfree>
 8004b08:	4631      	mov	r1, r6
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	f000 f98e 	bl	8004e2c <_Bfree>
 8004b10:	e698      	b.n	8004844 <_dtoa_r+0x6c4>
 8004b12:	2400      	movs	r4, #0
 8004b14:	4626      	mov	r6, r4
 8004b16:	e7e1      	b.n	8004adc <_dtoa_r+0x95c>
 8004b18:	46c2      	mov	sl, r8
 8004b1a:	4626      	mov	r6, r4
 8004b1c:	e596      	b.n	800464c <_dtoa_r+0x4cc>
 8004b1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 80fd 	beq.w	8004d24 <_dtoa_r+0xba4>
 8004b2a:	2f00      	cmp	r7, #0
 8004b2c:	dd05      	ble.n	8004b3a <_dtoa_r+0x9ba>
 8004b2e:	4631      	mov	r1, r6
 8004b30:	463a      	mov	r2, r7
 8004b32:	4628      	mov	r0, r5
 8004b34:	f000 fb48 	bl	80051c8 <__lshift>
 8004b38:	4606      	mov	r6, r0
 8004b3a:	f1b8 0f00 	cmp.w	r8, #0
 8004b3e:	d05c      	beq.n	8004bfa <_dtoa_r+0xa7a>
 8004b40:	4628      	mov	r0, r5
 8004b42:	6871      	ldr	r1, [r6, #4]
 8004b44:	f000 f932 	bl	8004dac <_Balloc>
 8004b48:	4607      	mov	r7, r0
 8004b4a:	b928      	cbnz	r0, 8004b58 <_dtoa_r+0x9d8>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004b52:	4b7f      	ldr	r3, [pc, #508]	; (8004d50 <_dtoa_r+0xbd0>)
 8004b54:	f7ff bb28 	b.w	80041a8 <_dtoa_r+0x28>
 8004b58:	6932      	ldr	r2, [r6, #16]
 8004b5a:	f106 010c 	add.w	r1, r6, #12
 8004b5e:	3202      	adds	r2, #2
 8004b60:	0092      	lsls	r2, r2, #2
 8004b62:	300c      	adds	r0, #12
 8004b64:	f000 f914 	bl	8004d90 <memcpy>
 8004b68:	2201      	movs	r2, #1
 8004b6a:	4639      	mov	r1, r7
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	f000 fb2b 	bl	80051c8 <__lshift>
 8004b72:	46b0      	mov	r8, r6
 8004b74:	4606      	mov	r6, r0
 8004b76:	9b03      	ldr	r3, [sp, #12]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	9308      	str	r3, [sp, #32]
 8004b7c:	9b03      	ldr	r3, [sp, #12]
 8004b7e:	444b      	add	r3, r9
 8004b80:	930a      	str	r3, [sp, #40]	; 0x28
 8004b82:	9b04      	ldr	r3, [sp, #16]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	9309      	str	r3, [sp, #36]	; 0x24
 8004b8a:	9b08      	ldr	r3, [sp, #32]
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	4658      	mov	r0, fp
 8004b92:	9304      	str	r3, [sp, #16]
 8004b94:	f7ff fa68 	bl	8004068 <quorem>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	4641      	mov	r1, r8
 8004b9c:	3330      	adds	r3, #48	; 0x30
 8004b9e:	9006      	str	r0, [sp, #24]
 8004ba0:	4658      	mov	r0, fp
 8004ba2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ba4:	f000 fb80 	bl	80052a8 <__mcmp>
 8004ba8:	4632      	mov	r2, r6
 8004baa:	4681      	mov	r9, r0
 8004bac:	4621      	mov	r1, r4
 8004bae:	4628      	mov	r0, r5
 8004bb0:	f000 fb96 	bl	80052e0 <__mdiff>
 8004bb4:	68c2      	ldr	r2, [r0, #12]
 8004bb6:	4607      	mov	r7, r0
 8004bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bba:	bb02      	cbnz	r2, 8004bfe <_dtoa_r+0xa7e>
 8004bbc:	4601      	mov	r1, r0
 8004bbe:	4658      	mov	r0, fp
 8004bc0:	f000 fb72 	bl	80052a8 <__mcmp>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bc8:	4639      	mov	r1, r7
 8004bca:	4628      	mov	r0, r5
 8004bcc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004bd0:	f000 f92c 	bl	8004e2c <_Bfree>
 8004bd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bd8:	9f08      	ldr	r7, [sp, #32]
 8004bda:	ea43 0102 	orr.w	r1, r3, r2
 8004bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be0:	430b      	orrs	r3, r1
 8004be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004be4:	d10d      	bne.n	8004c02 <_dtoa_r+0xa82>
 8004be6:	2b39      	cmp	r3, #57	; 0x39
 8004be8:	d029      	beq.n	8004c3e <_dtoa_r+0xabe>
 8004bea:	f1b9 0f00 	cmp.w	r9, #0
 8004bee:	dd01      	ble.n	8004bf4 <_dtoa_r+0xa74>
 8004bf0:	9b06      	ldr	r3, [sp, #24]
 8004bf2:	3331      	adds	r3, #49	; 0x31
 8004bf4:	9a04      	ldr	r2, [sp, #16]
 8004bf6:	7013      	strb	r3, [r2, #0]
 8004bf8:	e776      	b.n	8004ae8 <_dtoa_r+0x968>
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	e7b9      	b.n	8004b72 <_dtoa_r+0x9f2>
 8004bfe:	2201      	movs	r2, #1
 8004c00:	e7e2      	b.n	8004bc8 <_dtoa_r+0xa48>
 8004c02:	f1b9 0f00 	cmp.w	r9, #0
 8004c06:	db06      	blt.n	8004c16 <_dtoa_r+0xa96>
 8004c08:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004c0a:	ea41 0909 	orr.w	r9, r1, r9
 8004c0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c10:	ea59 0101 	orrs.w	r1, r9, r1
 8004c14:	d120      	bne.n	8004c58 <_dtoa_r+0xad8>
 8004c16:	2a00      	cmp	r2, #0
 8004c18:	ddec      	ble.n	8004bf4 <_dtoa_r+0xa74>
 8004c1a:	4659      	mov	r1, fp
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	4628      	mov	r0, r5
 8004c20:	9308      	str	r3, [sp, #32]
 8004c22:	f000 fad1 	bl	80051c8 <__lshift>
 8004c26:	4621      	mov	r1, r4
 8004c28:	4683      	mov	fp, r0
 8004c2a:	f000 fb3d 	bl	80052a8 <__mcmp>
 8004c2e:	2800      	cmp	r0, #0
 8004c30:	9b08      	ldr	r3, [sp, #32]
 8004c32:	dc02      	bgt.n	8004c3a <_dtoa_r+0xaba>
 8004c34:	d1de      	bne.n	8004bf4 <_dtoa_r+0xa74>
 8004c36:	07da      	lsls	r2, r3, #31
 8004c38:	d5dc      	bpl.n	8004bf4 <_dtoa_r+0xa74>
 8004c3a:	2b39      	cmp	r3, #57	; 0x39
 8004c3c:	d1d8      	bne.n	8004bf0 <_dtoa_r+0xa70>
 8004c3e:	2339      	movs	r3, #57	; 0x39
 8004c40:	9a04      	ldr	r2, [sp, #16]
 8004c42:	7013      	strb	r3, [r2, #0]
 8004c44:	463b      	mov	r3, r7
 8004c46:	461f      	mov	r7, r3
 8004c48:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	2a39      	cmp	r2, #57	; 0x39
 8004c50:	d050      	beq.n	8004cf4 <_dtoa_r+0xb74>
 8004c52:	3201      	adds	r2, #1
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	e747      	b.n	8004ae8 <_dtoa_r+0x968>
 8004c58:	2a00      	cmp	r2, #0
 8004c5a:	dd03      	ble.n	8004c64 <_dtoa_r+0xae4>
 8004c5c:	2b39      	cmp	r3, #57	; 0x39
 8004c5e:	d0ee      	beq.n	8004c3e <_dtoa_r+0xabe>
 8004c60:	3301      	adds	r3, #1
 8004c62:	e7c7      	b.n	8004bf4 <_dtoa_r+0xa74>
 8004c64:	9a08      	ldr	r2, [sp, #32]
 8004c66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004c68:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004c6c:	428a      	cmp	r2, r1
 8004c6e:	d02a      	beq.n	8004cc6 <_dtoa_r+0xb46>
 8004c70:	4659      	mov	r1, fp
 8004c72:	2300      	movs	r3, #0
 8004c74:	220a      	movs	r2, #10
 8004c76:	4628      	mov	r0, r5
 8004c78:	f000 f8fa 	bl	8004e70 <__multadd>
 8004c7c:	45b0      	cmp	r8, r6
 8004c7e:	4683      	mov	fp, r0
 8004c80:	f04f 0300 	mov.w	r3, #0
 8004c84:	f04f 020a 	mov.w	r2, #10
 8004c88:	4641      	mov	r1, r8
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	d107      	bne.n	8004c9e <_dtoa_r+0xb1e>
 8004c8e:	f000 f8ef 	bl	8004e70 <__multadd>
 8004c92:	4680      	mov	r8, r0
 8004c94:	4606      	mov	r6, r0
 8004c96:	9b08      	ldr	r3, [sp, #32]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	9308      	str	r3, [sp, #32]
 8004c9c:	e775      	b.n	8004b8a <_dtoa_r+0xa0a>
 8004c9e:	f000 f8e7 	bl	8004e70 <__multadd>
 8004ca2:	4631      	mov	r1, r6
 8004ca4:	4680      	mov	r8, r0
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	220a      	movs	r2, #10
 8004caa:	4628      	mov	r0, r5
 8004cac:	f000 f8e0 	bl	8004e70 <__multadd>
 8004cb0:	4606      	mov	r6, r0
 8004cb2:	e7f0      	b.n	8004c96 <_dtoa_r+0xb16>
 8004cb4:	f1b9 0f00 	cmp.w	r9, #0
 8004cb8:	bfcc      	ite	gt
 8004cba:	464f      	movgt	r7, r9
 8004cbc:	2701      	movle	r7, #1
 8004cbe:	f04f 0800 	mov.w	r8, #0
 8004cc2:	9a03      	ldr	r2, [sp, #12]
 8004cc4:	4417      	add	r7, r2
 8004cc6:	4659      	mov	r1, fp
 8004cc8:	2201      	movs	r2, #1
 8004cca:	4628      	mov	r0, r5
 8004ccc:	9308      	str	r3, [sp, #32]
 8004cce:	f000 fa7b 	bl	80051c8 <__lshift>
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	4683      	mov	fp, r0
 8004cd6:	f000 fae7 	bl	80052a8 <__mcmp>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	dcb2      	bgt.n	8004c44 <_dtoa_r+0xac4>
 8004cde:	d102      	bne.n	8004ce6 <_dtoa_r+0xb66>
 8004ce0:	9b08      	ldr	r3, [sp, #32]
 8004ce2:	07db      	lsls	r3, r3, #31
 8004ce4:	d4ae      	bmi.n	8004c44 <_dtoa_r+0xac4>
 8004ce6:	463b      	mov	r3, r7
 8004ce8:	461f      	mov	r7, r3
 8004cea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004cee:	2a30      	cmp	r2, #48	; 0x30
 8004cf0:	d0fa      	beq.n	8004ce8 <_dtoa_r+0xb68>
 8004cf2:	e6f9      	b.n	8004ae8 <_dtoa_r+0x968>
 8004cf4:	9a03      	ldr	r2, [sp, #12]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d1a5      	bne.n	8004c46 <_dtoa_r+0xac6>
 8004cfa:	2331      	movs	r3, #49	; 0x31
 8004cfc:	f10a 0a01 	add.w	sl, sl, #1
 8004d00:	e779      	b.n	8004bf6 <_dtoa_r+0xa76>
 8004d02:	4b14      	ldr	r3, [pc, #80]	; (8004d54 <_dtoa_r+0xbd4>)
 8004d04:	f7ff baa8 	b.w	8004258 <_dtoa_r+0xd8>
 8004d08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f47f aa81 	bne.w	8004212 <_dtoa_r+0x92>
 8004d10:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <_dtoa_r+0xbd8>)
 8004d12:	f7ff baa1 	b.w	8004258 <_dtoa_r+0xd8>
 8004d16:	f1b9 0f00 	cmp.w	r9, #0
 8004d1a:	dc03      	bgt.n	8004d24 <_dtoa_r+0xba4>
 8004d1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	f73f aecb 	bgt.w	8004aba <_dtoa_r+0x93a>
 8004d24:	9f03      	ldr	r7, [sp, #12]
 8004d26:	4621      	mov	r1, r4
 8004d28:	4658      	mov	r0, fp
 8004d2a:	f7ff f99d 	bl	8004068 <quorem>
 8004d2e:	9a03      	ldr	r2, [sp, #12]
 8004d30:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004d34:	f807 3b01 	strb.w	r3, [r7], #1
 8004d38:	1aba      	subs	r2, r7, r2
 8004d3a:	4591      	cmp	r9, r2
 8004d3c:	ddba      	ble.n	8004cb4 <_dtoa_r+0xb34>
 8004d3e:	4659      	mov	r1, fp
 8004d40:	2300      	movs	r3, #0
 8004d42:	220a      	movs	r2, #10
 8004d44:	4628      	mov	r0, r5
 8004d46:	f000 f893 	bl	8004e70 <__multadd>
 8004d4a:	4683      	mov	fp, r0
 8004d4c:	e7eb      	b.n	8004d26 <_dtoa_r+0xba6>
 8004d4e:	bf00      	nop
 8004d50:	0800661f 	.word	0x0800661f
 8004d54:	0800657c 	.word	0x0800657c
 8004d58:	080065a0 	.word	0x080065a0

08004d5c <_localeconv_r>:
 8004d5c:	4800      	ldr	r0, [pc, #0]	; (8004d60 <_localeconv_r+0x4>)
 8004d5e:	4770      	bx	lr
 8004d60:	20000160 	.word	0x20000160

08004d64 <malloc>:
 8004d64:	4b02      	ldr	r3, [pc, #8]	; (8004d70 <malloc+0xc>)
 8004d66:	4601      	mov	r1, r0
 8004d68:	6818      	ldr	r0, [r3, #0]
 8004d6a:	f000 bc1d 	b.w	80055a8 <_malloc_r>
 8004d6e:	bf00      	nop
 8004d70:	2000000c 	.word	0x2000000c

08004d74 <memchr>:
 8004d74:	4603      	mov	r3, r0
 8004d76:	b510      	push	{r4, lr}
 8004d78:	b2c9      	uxtb	r1, r1
 8004d7a:	4402      	add	r2, r0
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	4618      	mov	r0, r3
 8004d80:	d101      	bne.n	8004d86 <memchr+0x12>
 8004d82:	2000      	movs	r0, #0
 8004d84:	e003      	b.n	8004d8e <memchr+0x1a>
 8004d86:	7804      	ldrb	r4, [r0, #0]
 8004d88:	3301      	adds	r3, #1
 8004d8a:	428c      	cmp	r4, r1
 8004d8c:	d1f6      	bne.n	8004d7c <memchr+0x8>
 8004d8e:	bd10      	pop	{r4, pc}

08004d90 <memcpy>:
 8004d90:	440a      	add	r2, r1
 8004d92:	4291      	cmp	r1, r2
 8004d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d98:	d100      	bne.n	8004d9c <memcpy+0xc>
 8004d9a:	4770      	bx	lr
 8004d9c:	b510      	push	{r4, lr}
 8004d9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004da2:	4291      	cmp	r1, r2
 8004da4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004da8:	d1f9      	bne.n	8004d9e <memcpy+0xe>
 8004daa:	bd10      	pop	{r4, pc}

08004dac <_Balloc>:
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004db0:	4604      	mov	r4, r0
 8004db2:	460d      	mov	r5, r1
 8004db4:	b976      	cbnz	r6, 8004dd4 <_Balloc+0x28>
 8004db6:	2010      	movs	r0, #16
 8004db8:	f7ff ffd4 	bl	8004d64 <malloc>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	6260      	str	r0, [r4, #36]	; 0x24
 8004dc0:	b920      	cbnz	r0, 8004dcc <_Balloc+0x20>
 8004dc2:	2166      	movs	r1, #102	; 0x66
 8004dc4:	4b17      	ldr	r3, [pc, #92]	; (8004e24 <_Balloc+0x78>)
 8004dc6:	4818      	ldr	r0, [pc, #96]	; (8004e28 <_Balloc+0x7c>)
 8004dc8:	f000 fdce 	bl	8005968 <__assert_func>
 8004dcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004dd0:	6006      	str	r6, [r0, #0]
 8004dd2:	60c6      	str	r6, [r0, #12]
 8004dd4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004dd6:	68f3      	ldr	r3, [r6, #12]
 8004dd8:	b183      	cbz	r3, 8004dfc <_Balloc+0x50>
 8004dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004de2:	b9b8      	cbnz	r0, 8004e14 <_Balloc+0x68>
 8004de4:	2101      	movs	r1, #1
 8004de6:	fa01 f605 	lsl.w	r6, r1, r5
 8004dea:	1d72      	adds	r2, r6, #5
 8004dec:	4620      	mov	r0, r4
 8004dee:	0092      	lsls	r2, r2, #2
 8004df0:	f000 fb5e 	bl	80054b0 <_calloc_r>
 8004df4:	b160      	cbz	r0, 8004e10 <_Balloc+0x64>
 8004df6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004dfa:	e00e      	b.n	8004e1a <_Balloc+0x6e>
 8004dfc:	2221      	movs	r2, #33	; 0x21
 8004dfe:	2104      	movs	r1, #4
 8004e00:	4620      	mov	r0, r4
 8004e02:	f000 fb55 	bl	80054b0 <_calloc_r>
 8004e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e08:	60f0      	str	r0, [r6, #12]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e4      	bne.n	8004dda <_Balloc+0x2e>
 8004e10:	2000      	movs	r0, #0
 8004e12:	bd70      	pop	{r4, r5, r6, pc}
 8004e14:	6802      	ldr	r2, [r0, #0]
 8004e16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e20:	e7f7      	b.n	8004e12 <_Balloc+0x66>
 8004e22:	bf00      	nop
 8004e24:	080065ad 	.word	0x080065ad
 8004e28:	08006630 	.word	0x08006630

08004e2c <_Bfree>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004e30:	4605      	mov	r5, r0
 8004e32:	460c      	mov	r4, r1
 8004e34:	b976      	cbnz	r6, 8004e54 <_Bfree+0x28>
 8004e36:	2010      	movs	r0, #16
 8004e38:	f7ff ff94 	bl	8004d64 <malloc>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	6268      	str	r0, [r5, #36]	; 0x24
 8004e40:	b920      	cbnz	r0, 8004e4c <_Bfree+0x20>
 8004e42:	218a      	movs	r1, #138	; 0x8a
 8004e44:	4b08      	ldr	r3, [pc, #32]	; (8004e68 <_Bfree+0x3c>)
 8004e46:	4809      	ldr	r0, [pc, #36]	; (8004e6c <_Bfree+0x40>)
 8004e48:	f000 fd8e 	bl	8005968 <__assert_func>
 8004e4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e50:	6006      	str	r6, [r0, #0]
 8004e52:	60c6      	str	r6, [r0, #12]
 8004e54:	b13c      	cbz	r4, 8004e66 <_Bfree+0x3a>
 8004e56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004e58:	6862      	ldr	r2, [r4, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e60:	6021      	str	r1, [r4, #0]
 8004e62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004e66:	bd70      	pop	{r4, r5, r6, pc}
 8004e68:	080065ad 	.word	0x080065ad
 8004e6c:	08006630 	.word	0x08006630

08004e70 <__multadd>:
 8004e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e74:	4607      	mov	r7, r0
 8004e76:	460c      	mov	r4, r1
 8004e78:	461e      	mov	r6, r3
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	690d      	ldr	r5, [r1, #16]
 8004e7e:	f101 0c14 	add.w	ip, r1, #20
 8004e82:	f8dc 3000 	ldr.w	r3, [ip]
 8004e86:	3001      	adds	r0, #1
 8004e88:	b299      	uxth	r1, r3
 8004e8a:	fb02 6101 	mla	r1, r2, r1, r6
 8004e8e:	0c1e      	lsrs	r6, r3, #16
 8004e90:	0c0b      	lsrs	r3, r1, #16
 8004e92:	fb02 3306 	mla	r3, r2, r6, r3
 8004e96:	b289      	uxth	r1, r1
 8004e98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004e9c:	4285      	cmp	r5, r0
 8004e9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004ea2:	f84c 1b04 	str.w	r1, [ip], #4
 8004ea6:	dcec      	bgt.n	8004e82 <__multadd+0x12>
 8004ea8:	b30e      	cbz	r6, 8004eee <__multadd+0x7e>
 8004eaa:	68a3      	ldr	r3, [r4, #8]
 8004eac:	42ab      	cmp	r3, r5
 8004eae:	dc19      	bgt.n	8004ee4 <__multadd+0x74>
 8004eb0:	6861      	ldr	r1, [r4, #4]
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	3101      	adds	r1, #1
 8004eb6:	f7ff ff79 	bl	8004dac <_Balloc>
 8004eba:	4680      	mov	r8, r0
 8004ebc:	b928      	cbnz	r0, 8004eca <__multadd+0x5a>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	21b5      	movs	r1, #181	; 0xb5
 8004ec2:	4b0c      	ldr	r3, [pc, #48]	; (8004ef4 <__multadd+0x84>)
 8004ec4:	480c      	ldr	r0, [pc, #48]	; (8004ef8 <__multadd+0x88>)
 8004ec6:	f000 fd4f 	bl	8005968 <__assert_func>
 8004eca:	6922      	ldr	r2, [r4, #16]
 8004ecc:	f104 010c 	add.w	r1, r4, #12
 8004ed0:	3202      	adds	r2, #2
 8004ed2:	0092      	lsls	r2, r2, #2
 8004ed4:	300c      	adds	r0, #12
 8004ed6:	f7ff ff5b 	bl	8004d90 <memcpy>
 8004eda:	4621      	mov	r1, r4
 8004edc:	4638      	mov	r0, r7
 8004ede:	f7ff ffa5 	bl	8004e2c <_Bfree>
 8004ee2:	4644      	mov	r4, r8
 8004ee4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004ee8:	3501      	adds	r5, #1
 8004eea:	615e      	str	r6, [r3, #20]
 8004eec:	6125      	str	r5, [r4, #16]
 8004eee:	4620      	mov	r0, r4
 8004ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ef4:	0800661f 	.word	0x0800661f
 8004ef8:	08006630 	.word	0x08006630

08004efc <__hi0bits>:
 8004efc:	0c02      	lsrs	r2, r0, #16
 8004efe:	0412      	lsls	r2, r2, #16
 8004f00:	4603      	mov	r3, r0
 8004f02:	b9ca      	cbnz	r2, 8004f38 <__hi0bits+0x3c>
 8004f04:	0403      	lsls	r3, r0, #16
 8004f06:	2010      	movs	r0, #16
 8004f08:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004f0c:	bf04      	itt	eq
 8004f0e:	021b      	lsleq	r3, r3, #8
 8004f10:	3008      	addeq	r0, #8
 8004f12:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004f16:	bf04      	itt	eq
 8004f18:	011b      	lsleq	r3, r3, #4
 8004f1a:	3004      	addeq	r0, #4
 8004f1c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004f20:	bf04      	itt	eq
 8004f22:	009b      	lsleq	r3, r3, #2
 8004f24:	3002      	addeq	r0, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	db05      	blt.n	8004f36 <__hi0bits+0x3a>
 8004f2a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004f2e:	f100 0001 	add.w	r0, r0, #1
 8004f32:	bf08      	it	eq
 8004f34:	2020      	moveq	r0, #32
 8004f36:	4770      	bx	lr
 8004f38:	2000      	movs	r0, #0
 8004f3a:	e7e5      	b.n	8004f08 <__hi0bits+0xc>

08004f3c <__lo0bits>:
 8004f3c:	6803      	ldr	r3, [r0, #0]
 8004f3e:	4602      	mov	r2, r0
 8004f40:	f013 0007 	ands.w	r0, r3, #7
 8004f44:	d00b      	beq.n	8004f5e <__lo0bits+0x22>
 8004f46:	07d9      	lsls	r1, r3, #31
 8004f48:	d421      	bmi.n	8004f8e <__lo0bits+0x52>
 8004f4a:	0798      	lsls	r0, r3, #30
 8004f4c:	bf49      	itett	mi
 8004f4e:	085b      	lsrmi	r3, r3, #1
 8004f50:	089b      	lsrpl	r3, r3, #2
 8004f52:	2001      	movmi	r0, #1
 8004f54:	6013      	strmi	r3, [r2, #0]
 8004f56:	bf5c      	itt	pl
 8004f58:	2002      	movpl	r0, #2
 8004f5a:	6013      	strpl	r3, [r2, #0]
 8004f5c:	4770      	bx	lr
 8004f5e:	b299      	uxth	r1, r3
 8004f60:	b909      	cbnz	r1, 8004f66 <__lo0bits+0x2a>
 8004f62:	2010      	movs	r0, #16
 8004f64:	0c1b      	lsrs	r3, r3, #16
 8004f66:	b2d9      	uxtb	r1, r3
 8004f68:	b909      	cbnz	r1, 8004f6e <__lo0bits+0x32>
 8004f6a:	3008      	adds	r0, #8
 8004f6c:	0a1b      	lsrs	r3, r3, #8
 8004f6e:	0719      	lsls	r1, r3, #28
 8004f70:	bf04      	itt	eq
 8004f72:	091b      	lsreq	r3, r3, #4
 8004f74:	3004      	addeq	r0, #4
 8004f76:	0799      	lsls	r1, r3, #30
 8004f78:	bf04      	itt	eq
 8004f7a:	089b      	lsreq	r3, r3, #2
 8004f7c:	3002      	addeq	r0, #2
 8004f7e:	07d9      	lsls	r1, r3, #31
 8004f80:	d403      	bmi.n	8004f8a <__lo0bits+0x4e>
 8004f82:	085b      	lsrs	r3, r3, #1
 8004f84:	f100 0001 	add.w	r0, r0, #1
 8004f88:	d003      	beq.n	8004f92 <__lo0bits+0x56>
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	4770      	bx	lr
 8004f8e:	2000      	movs	r0, #0
 8004f90:	4770      	bx	lr
 8004f92:	2020      	movs	r0, #32
 8004f94:	4770      	bx	lr
	...

08004f98 <__i2b>:
 8004f98:	b510      	push	{r4, lr}
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	f7ff ff05 	bl	8004dac <_Balloc>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	b928      	cbnz	r0, 8004fb2 <__i2b+0x1a>
 8004fa6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004faa:	4b04      	ldr	r3, [pc, #16]	; (8004fbc <__i2b+0x24>)
 8004fac:	4804      	ldr	r0, [pc, #16]	; (8004fc0 <__i2b+0x28>)
 8004fae:	f000 fcdb 	bl	8005968 <__assert_func>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	6144      	str	r4, [r0, #20]
 8004fb6:	6103      	str	r3, [r0, #16]
 8004fb8:	bd10      	pop	{r4, pc}
 8004fba:	bf00      	nop
 8004fbc:	0800661f 	.word	0x0800661f
 8004fc0:	08006630 	.word	0x08006630

08004fc4 <__multiply>:
 8004fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fc8:	4691      	mov	r9, r2
 8004fca:	690a      	ldr	r2, [r1, #16]
 8004fcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004fd0:	460c      	mov	r4, r1
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	bfbe      	ittt	lt
 8004fd6:	460b      	movlt	r3, r1
 8004fd8:	464c      	movlt	r4, r9
 8004fda:	4699      	movlt	r9, r3
 8004fdc:	6927      	ldr	r7, [r4, #16]
 8004fde:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004fe2:	68a3      	ldr	r3, [r4, #8]
 8004fe4:	6861      	ldr	r1, [r4, #4]
 8004fe6:	eb07 060a 	add.w	r6, r7, sl
 8004fea:	42b3      	cmp	r3, r6
 8004fec:	b085      	sub	sp, #20
 8004fee:	bfb8      	it	lt
 8004ff0:	3101      	addlt	r1, #1
 8004ff2:	f7ff fedb 	bl	8004dac <_Balloc>
 8004ff6:	b930      	cbnz	r0, 8005006 <__multiply+0x42>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	f240 115d 	movw	r1, #349	; 0x15d
 8004ffe:	4b43      	ldr	r3, [pc, #268]	; (800510c <__multiply+0x148>)
 8005000:	4843      	ldr	r0, [pc, #268]	; (8005110 <__multiply+0x14c>)
 8005002:	f000 fcb1 	bl	8005968 <__assert_func>
 8005006:	f100 0514 	add.w	r5, r0, #20
 800500a:	462b      	mov	r3, r5
 800500c:	2200      	movs	r2, #0
 800500e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005012:	4543      	cmp	r3, r8
 8005014:	d321      	bcc.n	800505a <__multiply+0x96>
 8005016:	f104 0314 	add.w	r3, r4, #20
 800501a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800501e:	f109 0314 	add.w	r3, r9, #20
 8005022:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005026:	9202      	str	r2, [sp, #8]
 8005028:	1b3a      	subs	r2, r7, r4
 800502a:	3a15      	subs	r2, #21
 800502c:	f022 0203 	bic.w	r2, r2, #3
 8005030:	3204      	adds	r2, #4
 8005032:	f104 0115 	add.w	r1, r4, #21
 8005036:	428f      	cmp	r7, r1
 8005038:	bf38      	it	cc
 800503a:	2204      	movcc	r2, #4
 800503c:	9201      	str	r2, [sp, #4]
 800503e:	9a02      	ldr	r2, [sp, #8]
 8005040:	9303      	str	r3, [sp, #12]
 8005042:	429a      	cmp	r2, r3
 8005044:	d80c      	bhi.n	8005060 <__multiply+0x9c>
 8005046:	2e00      	cmp	r6, #0
 8005048:	dd03      	ble.n	8005052 <__multiply+0x8e>
 800504a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800504e:	2b00      	cmp	r3, #0
 8005050:	d059      	beq.n	8005106 <__multiply+0x142>
 8005052:	6106      	str	r6, [r0, #16]
 8005054:	b005      	add	sp, #20
 8005056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800505a:	f843 2b04 	str.w	r2, [r3], #4
 800505e:	e7d8      	b.n	8005012 <__multiply+0x4e>
 8005060:	f8b3 a000 	ldrh.w	sl, [r3]
 8005064:	f1ba 0f00 	cmp.w	sl, #0
 8005068:	d023      	beq.n	80050b2 <__multiply+0xee>
 800506a:	46a9      	mov	r9, r5
 800506c:	f04f 0c00 	mov.w	ip, #0
 8005070:	f104 0e14 	add.w	lr, r4, #20
 8005074:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005078:	f8d9 1000 	ldr.w	r1, [r9]
 800507c:	fa1f fb82 	uxth.w	fp, r2
 8005080:	b289      	uxth	r1, r1
 8005082:	fb0a 110b 	mla	r1, sl, fp, r1
 8005086:	4461      	add	r1, ip
 8005088:	f8d9 c000 	ldr.w	ip, [r9]
 800508c:	0c12      	lsrs	r2, r2, #16
 800508e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005092:	fb0a c202 	mla	r2, sl, r2, ip
 8005096:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800509a:	b289      	uxth	r1, r1
 800509c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80050a0:	4577      	cmp	r7, lr
 80050a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80050a6:	f849 1b04 	str.w	r1, [r9], #4
 80050aa:	d8e3      	bhi.n	8005074 <__multiply+0xb0>
 80050ac:	9a01      	ldr	r2, [sp, #4]
 80050ae:	f845 c002 	str.w	ip, [r5, r2]
 80050b2:	9a03      	ldr	r2, [sp, #12]
 80050b4:	3304      	adds	r3, #4
 80050b6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80050ba:	f1b9 0f00 	cmp.w	r9, #0
 80050be:	d020      	beq.n	8005102 <__multiply+0x13e>
 80050c0:	46ae      	mov	lr, r5
 80050c2:	f04f 0a00 	mov.w	sl, #0
 80050c6:	6829      	ldr	r1, [r5, #0]
 80050c8:	f104 0c14 	add.w	ip, r4, #20
 80050cc:	f8bc b000 	ldrh.w	fp, [ip]
 80050d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80050d4:	b289      	uxth	r1, r1
 80050d6:	fb09 220b 	mla	r2, r9, fp, r2
 80050da:	4492      	add	sl, r2
 80050dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80050e0:	f84e 1b04 	str.w	r1, [lr], #4
 80050e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80050e8:	f8be 1000 	ldrh.w	r1, [lr]
 80050ec:	0c12      	lsrs	r2, r2, #16
 80050ee:	fb09 1102 	mla	r1, r9, r2, r1
 80050f2:	4567      	cmp	r7, ip
 80050f4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80050f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80050fc:	d8e6      	bhi.n	80050cc <__multiply+0x108>
 80050fe:	9a01      	ldr	r2, [sp, #4]
 8005100:	50a9      	str	r1, [r5, r2]
 8005102:	3504      	adds	r5, #4
 8005104:	e79b      	b.n	800503e <__multiply+0x7a>
 8005106:	3e01      	subs	r6, #1
 8005108:	e79d      	b.n	8005046 <__multiply+0x82>
 800510a:	bf00      	nop
 800510c:	0800661f 	.word	0x0800661f
 8005110:	08006630 	.word	0x08006630

08005114 <__pow5mult>:
 8005114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005118:	4615      	mov	r5, r2
 800511a:	f012 0203 	ands.w	r2, r2, #3
 800511e:	4606      	mov	r6, r0
 8005120:	460f      	mov	r7, r1
 8005122:	d007      	beq.n	8005134 <__pow5mult+0x20>
 8005124:	4c25      	ldr	r4, [pc, #148]	; (80051bc <__pow5mult+0xa8>)
 8005126:	3a01      	subs	r2, #1
 8005128:	2300      	movs	r3, #0
 800512a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800512e:	f7ff fe9f 	bl	8004e70 <__multadd>
 8005132:	4607      	mov	r7, r0
 8005134:	10ad      	asrs	r5, r5, #2
 8005136:	d03d      	beq.n	80051b4 <__pow5mult+0xa0>
 8005138:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800513a:	b97c      	cbnz	r4, 800515c <__pow5mult+0x48>
 800513c:	2010      	movs	r0, #16
 800513e:	f7ff fe11 	bl	8004d64 <malloc>
 8005142:	4602      	mov	r2, r0
 8005144:	6270      	str	r0, [r6, #36]	; 0x24
 8005146:	b928      	cbnz	r0, 8005154 <__pow5mult+0x40>
 8005148:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800514c:	4b1c      	ldr	r3, [pc, #112]	; (80051c0 <__pow5mult+0xac>)
 800514e:	481d      	ldr	r0, [pc, #116]	; (80051c4 <__pow5mult+0xb0>)
 8005150:	f000 fc0a 	bl	8005968 <__assert_func>
 8005154:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005158:	6004      	str	r4, [r0, #0]
 800515a:	60c4      	str	r4, [r0, #12]
 800515c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005160:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005164:	b94c      	cbnz	r4, 800517a <__pow5mult+0x66>
 8005166:	f240 2171 	movw	r1, #625	; 0x271
 800516a:	4630      	mov	r0, r6
 800516c:	f7ff ff14 	bl	8004f98 <__i2b>
 8005170:	2300      	movs	r3, #0
 8005172:	4604      	mov	r4, r0
 8005174:	f8c8 0008 	str.w	r0, [r8, #8]
 8005178:	6003      	str	r3, [r0, #0]
 800517a:	f04f 0900 	mov.w	r9, #0
 800517e:	07eb      	lsls	r3, r5, #31
 8005180:	d50a      	bpl.n	8005198 <__pow5mult+0x84>
 8005182:	4639      	mov	r1, r7
 8005184:	4622      	mov	r2, r4
 8005186:	4630      	mov	r0, r6
 8005188:	f7ff ff1c 	bl	8004fc4 <__multiply>
 800518c:	4680      	mov	r8, r0
 800518e:	4639      	mov	r1, r7
 8005190:	4630      	mov	r0, r6
 8005192:	f7ff fe4b 	bl	8004e2c <_Bfree>
 8005196:	4647      	mov	r7, r8
 8005198:	106d      	asrs	r5, r5, #1
 800519a:	d00b      	beq.n	80051b4 <__pow5mult+0xa0>
 800519c:	6820      	ldr	r0, [r4, #0]
 800519e:	b938      	cbnz	r0, 80051b0 <__pow5mult+0x9c>
 80051a0:	4622      	mov	r2, r4
 80051a2:	4621      	mov	r1, r4
 80051a4:	4630      	mov	r0, r6
 80051a6:	f7ff ff0d 	bl	8004fc4 <__multiply>
 80051aa:	6020      	str	r0, [r4, #0]
 80051ac:	f8c0 9000 	str.w	r9, [r0]
 80051b0:	4604      	mov	r4, r0
 80051b2:	e7e4      	b.n	800517e <__pow5mult+0x6a>
 80051b4:	4638      	mov	r0, r7
 80051b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ba:	bf00      	nop
 80051bc:	08006780 	.word	0x08006780
 80051c0:	080065ad 	.word	0x080065ad
 80051c4:	08006630 	.word	0x08006630

080051c8 <__lshift>:
 80051c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051cc:	460c      	mov	r4, r1
 80051ce:	4607      	mov	r7, r0
 80051d0:	4691      	mov	r9, r2
 80051d2:	6923      	ldr	r3, [r4, #16]
 80051d4:	6849      	ldr	r1, [r1, #4]
 80051d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80051da:	68a3      	ldr	r3, [r4, #8]
 80051dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80051e0:	f108 0601 	add.w	r6, r8, #1
 80051e4:	42b3      	cmp	r3, r6
 80051e6:	db0b      	blt.n	8005200 <__lshift+0x38>
 80051e8:	4638      	mov	r0, r7
 80051ea:	f7ff fddf 	bl	8004dac <_Balloc>
 80051ee:	4605      	mov	r5, r0
 80051f0:	b948      	cbnz	r0, 8005206 <__lshift+0x3e>
 80051f2:	4602      	mov	r2, r0
 80051f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80051f8:	4b29      	ldr	r3, [pc, #164]	; (80052a0 <__lshift+0xd8>)
 80051fa:	482a      	ldr	r0, [pc, #168]	; (80052a4 <__lshift+0xdc>)
 80051fc:	f000 fbb4 	bl	8005968 <__assert_func>
 8005200:	3101      	adds	r1, #1
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	e7ee      	b.n	80051e4 <__lshift+0x1c>
 8005206:	2300      	movs	r3, #0
 8005208:	f100 0114 	add.w	r1, r0, #20
 800520c:	f100 0210 	add.w	r2, r0, #16
 8005210:	4618      	mov	r0, r3
 8005212:	4553      	cmp	r3, sl
 8005214:	db37      	blt.n	8005286 <__lshift+0xbe>
 8005216:	6920      	ldr	r0, [r4, #16]
 8005218:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800521c:	f104 0314 	add.w	r3, r4, #20
 8005220:	f019 091f 	ands.w	r9, r9, #31
 8005224:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005228:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800522c:	d02f      	beq.n	800528e <__lshift+0xc6>
 800522e:	468a      	mov	sl, r1
 8005230:	f04f 0c00 	mov.w	ip, #0
 8005234:	f1c9 0e20 	rsb	lr, r9, #32
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	fa02 f209 	lsl.w	r2, r2, r9
 800523e:	ea42 020c 	orr.w	r2, r2, ip
 8005242:	f84a 2b04 	str.w	r2, [sl], #4
 8005246:	f853 2b04 	ldr.w	r2, [r3], #4
 800524a:	4298      	cmp	r0, r3
 800524c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005250:	d8f2      	bhi.n	8005238 <__lshift+0x70>
 8005252:	1b03      	subs	r3, r0, r4
 8005254:	3b15      	subs	r3, #21
 8005256:	f023 0303 	bic.w	r3, r3, #3
 800525a:	3304      	adds	r3, #4
 800525c:	f104 0215 	add.w	r2, r4, #21
 8005260:	4290      	cmp	r0, r2
 8005262:	bf38      	it	cc
 8005264:	2304      	movcc	r3, #4
 8005266:	f841 c003 	str.w	ip, [r1, r3]
 800526a:	f1bc 0f00 	cmp.w	ip, #0
 800526e:	d001      	beq.n	8005274 <__lshift+0xac>
 8005270:	f108 0602 	add.w	r6, r8, #2
 8005274:	3e01      	subs	r6, #1
 8005276:	4638      	mov	r0, r7
 8005278:	4621      	mov	r1, r4
 800527a:	612e      	str	r6, [r5, #16]
 800527c:	f7ff fdd6 	bl	8004e2c <_Bfree>
 8005280:	4628      	mov	r0, r5
 8005282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005286:	f842 0f04 	str.w	r0, [r2, #4]!
 800528a:	3301      	adds	r3, #1
 800528c:	e7c1      	b.n	8005212 <__lshift+0x4a>
 800528e:	3904      	subs	r1, #4
 8005290:	f853 2b04 	ldr.w	r2, [r3], #4
 8005294:	4298      	cmp	r0, r3
 8005296:	f841 2f04 	str.w	r2, [r1, #4]!
 800529a:	d8f9      	bhi.n	8005290 <__lshift+0xc8>
 800529c:	e7ea      	b.n	8005274 <__lshift+0xac>
 800529e:	bf00      	nop
 80052a0:	0800661f 	.word	0x0800661f
 80052a4:	08006630 	.word	0x08006630

080052a8 <__mcmp>:
 80052a8:	4603      	mov	r3, r0
 80052aa:	690a      	ldr	r2, [r1, #16]
 80052ac:	6900      	ldr	r0, [r0, #16]
 80052ae:	b530      	push	{r4, r5, lr}
 80052b0:	1a80      	subs	r0, r0, r2
 80052b2:	d10d      	bne.n	80052d0 <__mcmp+0x28>
 80052b4:	3314      	adds	r3, #20
 80052b6:	3114      	adds	r1, #20
 80052b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80052bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80052c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80052c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80052c8:	4295      	cmp	r5, r2
 80052ca:	d002      	beq.n	80052d2 <__mcmp+0x2a>
 80052cc:	d304      	bcc.n	80052d8 <__mcmp+0x30>
 80052ce:	2001      	movs	r0, #1
 80052d0:	bd30      	pop	{r4, r5, pc}
 80052d2:	42a3      	cmp	r3, r4
 80052d4:	d3f4      	bcc.n	80052c0 <__mcmp+0x18>
 80052d6:	e7fb      	b.n	80052d0 <__mcmp+0x28>
 80052d8:	f04f 30ff 	mov.w	r0, #4294967295
 80052dc:	e7f8      	b.n	80052d0 <__mcmp+0x28>
	...

080052e0 <__mdiff>:
 80052e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052e4:	460d      	mov	r5, r1
 80052e6:	4607      	mov	r7, r0
 80052e8:	4611      	mov	r1, r2
 80052ea:	4628      	mov	r0, r5
 80052ec:	4614      	mov	r4, r2
 80052ee:	f7ff ffdb 	bl	80052a8 <__mcmp>
 80052f2:	1e06      	subs	r6, r0, #0
 80052f4:	d111      	bne.n	800531a <__mdiff+0x3a>
 80052f6:	4631      	mov	r1, r6
 80052f8:	4638      	mov	r0, r7
 80052fa:	f7ff fd57 	bl	8004dac <_Balloc>
 80052fe:	4602      	mov	r2, r0
 8005300:	b928      	cbnz	r0, 800530e <__mdiff+0x2e>
 8005302:	f240 2132 	movw	r1, #562	; 0x232
 8005306:	4b3a      	ldr	r3, [pc, #232]	; (80053f0 <__mdiff+0x110>)
 8005308:	483a      	ldr	r0, [pc, #232]	; (80053f4 <__mdiff+0x114>)
 800530a:	f000 fb2d 	bl	8005968 <__assert_func>
 800530e:	2301      	movs	r3, #1
 8005310:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005314:	4610      	mov	r0, r2
 8005316:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800531a:	bfa4      	itt	ge
 800531c:	4623      	movge	r3, r4
 800531e:	462c      	movge	r4, r5
 8005320:	4638      	mov	r0, r7
 8005322:	6861      	ldr	r1, [r4, #4]
 8005324:	bfa6      	itte	ge
 8005326:	461d      	movge	r5, r3
 8005328:	2600      	movge	r6, #0
 800532a:	2601      	movlt	r6, #1
 800532c:	f7ff fd3e 	bl	8004dac <_Balloc>
 8005330:	4602      	mov	r2, r0
 8005332:	b918      	cbnz	r0, 800533c <__mdiff+0x5c>
 8005334:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005338:	4b2d      	ldr	r3, [pc, #180]	; (80053f0 <__mdiff+0x110>)
 800533a:	e7e5      	b.n	8005308 <__mdiff+0x28>
 800533c:	f102 0814 	add.w	r8, r2, #20
 8005340:	46c2      	mov	sl, r8
 8005342:	f04f 0c00 	mov.w	ip, #0
 8005346:	6927      	ldr	r7, [r4, #16]
 8005348:	60c6      	str	r6, [r0, #12]
 800534a:	692e      	ldr	r6, [r5, #16]
 800534c:	f104 0014 	add.w	r0, r4, #20
 8005350:	f105 0914 	add.w	r9, r5, #20
 8005354:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005358:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800535c:	3410      	adds	r4, #16
 800535e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005362:	f859 3b04 	ldr.w	r3, [r9], #4
 8005366:	fa1f f18b 	uxth.w	r1, fp
 800536a:	448c      	add	ip, r1
 800536c:	b299      	uxth	r1, r3
 800536e:	0c1b      	lsrs	r3, r3, #16
 8005370:	ebac 0101 	sub.w	r1, ip, r1
 8005374:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005378:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800537c:	b289      	uxth	r1, r1
 800537e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005382:	454e      	cmp	r6, r9
 8005384:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005388:	f84a 3b04 	str.w	r3, [sl], #4
 800538c:	d8e7      	bhi.n	800535e <__mdiff+0x7e>
 800538e:	1b73      	subs	r3, r6, r5
 8005390:	3b15      	subs	r3, #21
 8005392:	f023 0303 	bic.w	r3, r3, #3
 8005396:	3515      	adds	r5, #21
 8005398:	3304      	adds	r3, #4
 800539a:	42ae      	cmp	r6, r5
 800539c:	bf38      	it	cc
 800539e:	2304      	movcc	r3, #4
 80053a0:	4418      	add	r0, r3
 80053a2:	4443      	add	r3, r8
 80053a4:	461e      	mov	r6, r3
 80053a6:	4605      	mov	r5, r0
 80053a8:	4575      	cmp	r5, lr
 80053aa:	d30e      	bcc.n	80053ca <__mdiff+0xea>
 80053ac:	f10e 0103 	add.w	r1, lr, #3
 80053b0:	1a09      	subs	r1, r1, r0
 80053b2:	f021 0103 	bic.w	r1, r1, #3
 80053b6:	3803      	subs	r0, #3
 80053b8:	4586      	cmp	lr, r0
 80053ba:	bf38      	it	cc
 80053bc:	2100      	movcc	r1, #0
 80053be:	4419      	add	r1, r3
 80053c0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80053c4:	b18b      	cbz	r3, 80053ea <__mdiff+0x10a>
 80053c6:	6117      	str	r7, [r2, #16]
 80053c8:	e7a4      	b.n	8005314 <__mdiff+0x34>
 80053ca:	f855 8b04 	ldr.w	r8, [r5], #4
 80053ce:	fa1f f188 	uxth.w	r1, r8
 80053d2:	4461      	add	r1, ip
 80053d4:	140c      	asrs	r4, r1, #16
 80053d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80053da:	b289      	uxth	r1, r1
 80053dc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80053e0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80053e4:	f846 1b04 	str.w	r1, [r6], #4
 80053e8:	e7de      	b.n	80053a8 <__mdiff+0xc8>
 80053ea:	3f01      	subs	r7, #1
 80053ec:	e7e8      	b.n	80053c0 <__mdiff+0xe0>
 80053ee:	bf00      	nop
 80053f0:	0800661f 	.word	0x0800661f
 80053f4:	08006630 	.word	0x08006630

080053f8 <__d2b>:
 80053f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80053fc:	2101      	movs	r1, #1
 80053fe:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005402:	4690      	mov	r8, r2
 8005404:	461d      	mov	r5, r3
 8005406:	f7ff fcd1 	bl	8004dac <_Balloc>
 800540a:	4604      	mov	r4, r0
 800540c:	b930      	cbnz	r0, 800541c <__d2b+0x24>
 800540e:	4602      	mov	r2, r0
 8005410:	f240 310a 	movw	r1, #778	; 0x30a
 8005414:	4b24      	ldr	r3, [pc, #144]	; (80054a8 <__d2b+0xb0>)
 8005416:	4825      	ldr	r0, [pc, #148]	; (80054ac <__d2b+0xb4>)
 8005418:	f000 faa6 	bl	8005968 <__assert_func>
 800541c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005420:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005424:	bb2d      	cbnz	r5, 8005472 <__d2b+0x7a>
 8005426:	9301      	str	r3, [sp, #4]
 8005428:	f1b8 0300 	subs.w	r3, r8, #0
 800542c:	d026      	beq.n	800547c <__d2b+0x84>
 800542e:	4668      	mov	r0, sp
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	f7ff fd83 	bl	8004f3c <__lo0bits>
 8005436:	9900      	ldr	r1, [sp, #0]
 8005438:	b1f0      	cbz	r0, 8005478 <__d2b+0x80>
 800543a:	9a01      	ldr	r2, [sp, #4]
 800543c:	f1c0 0320 	rsb	r3, r0, #32
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	430b      	orrs	r3, r1
 8005446:	40c2      	lsrs	r2, r0
 8005448:	6163      	str	r3, [r4, #20]
 800544a:	9201      	str	r2, [sp, #4]
 800544c:	9b01      	ldr	r3, [sp, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	bf14      	ite	ne
 8005452:	2102      	movne	r1, #2
 8005454:	2101      	moveq	r1, #1
 8005456:	61a3      	str	r3, [r4, #24]
 8005458:	6121      	str	r1, [r4, #16]
 800545a:	b1c5      	cbz	r5, 800548e <__d2b+0x96>
 800545c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005460:	4405      	add	r5, r0
 8005462:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005466:	603d      	str	r5, [r7, #0]
 8005468:	6030      	str	r0, [r6, #0]
 800546a:	4620      	mov	r0, r4
 800546c:	b002      	add	sp, #8
 800546e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005472:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005476:	e7d6      	b.n	8005426 <__d2b+0x2e>
 8005478:	6161      	str	r1, [r4, #20]
 800547a:	e7e7      	b.n	800544c <__d2b+0x54>
 800547c:	a801      	add	r0, sp, #4
 800547e:	f7ff fd5d 	bl	8004f3c <__lo0bits>
 8005482:	2101      	movs	r1, #1
 8005484:	9b01      	ldr	r3, [sp, #4]
 8005486:	6121      	str	r1, [r4, #16]
 8005488:	6163      	str	r3, [r4, #20]
 800548a:	3020      	adds	r0, #32
 800548c:	e7e5      	b.n	800545a <__d2b+0x62>
 800548e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005492:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005496:	6038      	str	r0, [r7, #0]
 8005498:	6918      	ldr	r0, [r3, #16]
 800549a:	f7ff fd2f 	bl	8004efc <__hi0bits>
 800549e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80054a2:	6031      	str	r1, [r6, #0]
 80054a4:	e7e1      	b.n	800546a <__d2b+0x72>
 80054a6:	bf00      	nop
 80054a8:	0800661f 	.word	0x0800661f
 80054ac:	08006630 	.word	0x08006630

080054b0 <_calloc_r>:
 80054b0:	b570      	push	{r4, r5, r6, lr}
 80054b2:	fba1 5402 	umull	r5, r4, r1, r2
 80054b6:	b934      	cbnz	r4, 80054c6 <_calloc_r+0x16>
 80054b8:	4629      	mov	r1, r5
 80054ba:	f000 f875 	bl	80055a8 <_malloc_r>
 80054be:	4606      	mov	r6, r0
 80054c0:	b928      	cbnz	r0, 80054ce <_calloc_r+0x1e>
 80054c2:	4630      	mov	r0, r6
 80054c4:	bd70      	pop	{r4, r5, r6, pc}
 80054c6:	220c      	movs	r2, #12
 80054c8:	2600      	movs	r6, #0
 80054ca:	6002      	str	r2, [r0, #0]
 80054cc:	e7f9      	b.n	80054c2 <_calloc_r+0x12>
 80054ce:	462a      	mov	r2, r5
 80054d0:	4621      	mov	r1, r4
 80054d2:	f7fe f941 	bl	8003758 <memset>
 80054d6:	e7f4      	b.n	80054c2 <_calloc_r+0x12>

080054d8 <_free_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4605      	mov	r5, r0
 80054dc:	2900      	cmp	r1, #0
 80054de:	d040      	beq.n	8005562 <_free_r+0x8a>
 80054e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054e4:	1f0c      	subs	r4, r1, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	bfb8      	it	lt
 80054ea:	18e4      	addlt	r4, r4, r3
 80054ec:	f000 fa98 	bl	8005a20 <__malloc_lock>
 80054f0:	4a1c      	ldr	r2, [pc, #112]	; (8005564 <_free_r+0x8c>)
 80054f2:	6813      	ldr	r3, [r2, #0]
 80054f4:	b933      	cbnz	r3, 8005504 <_free_r+0x2c>
 80054f6:	6063      	str	r3, [r4, #4]
 80054f8:	6014      	str	r4, [r2, #0]
 80054fa:	4628      	mov	r0, r5
 80054fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005500:	f000 ba94 	b.w	8005a2c <__malloc_unlock>
 8005504:	42a3      	cmp	r3, r4
 8005506:	d908      	bls.n	800551a <_free_r+0x42>
 8005508:	6820      	ldr	r0, [r4, #0]
 800550a:	1821      	adds	r1, r4, r0
 800550c:	428b      	cmp	r3, r1
 800550e:	bf01      	itttt	eq
 8005510:	6819      	ldreq	r1, [r3, #0]
 8005512:	685b      	ldreq	r3, [r3, #4]
 8005514:	1809      	addeq	r1, r1, r0
 8005516:	6021      	streq	r1, [r4, #0]
 8005518:	e7ed      	b.n	80054f6 <_free_r+0x1e>
 800551a:	461a      	mov	r2, r3
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	b10b      	cbz	r3, 8005524 <_free_r+0x4c>
 8005520:	42a3      	cmp	r3, r4
 8005522:	d9fa      	bls.n	800551a <_free_r+0x42>
 8005524:	6811      	ldr	r1, [r2, #0]
 8005526:	1850      	adds	r0, r2, r1
 8005528:	42a0      	cmp	r0, r4
 800552a:	d10b      	bne.n	8005544 <_free_r+0x6c>
 800552c:	6820      	ldr	r0, [r4, #0]
 800552e:	4401      	add	r1, r0
 8005530:	1850      	adds	r0, r2, r1
 8005532:	4283      	cmp	r3, r0
 8005534:	6011      	str	r1, [r2, #0]
 8005536:	d1e0      	bne.n	80054fa <_free_r+0x22>
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	4401      	add	r1, r0
 800553e:	6011      	str	r1, [r2, #0]
 8005540:	6053      	str	r3, [r2, #4]
 8005542:	e7da      	b.n	80054fa <_free_r+0x22>
 8005544:	d902      	bls.n	800554c <_free_r+0x74>
 8005546:	230c      	movs	r3, #12
 8005548:	602b      	str	r3, [r5, #0]
 800554a:	e7d6      	b.n	80054fa <_free_r+0x22>
 800554c:	6820      	ldr	r0, [r4, #0]
 800554e:	1821      	adds	r1, r4, r0
 8005550:	428b      	cmp	r3, r1
 8005552:	bf01      	itttt	eq
 8005554:	6819      	ldreq	r1, [r3, #0]
 8005556:	685b      	ldreq	r3, [r3, #4]
 8005558:	1809      	addeq	r1, r1, r0
 800555a:	6021      	streq	r1, [r4, #0]
 800555c:	6063      	str	r3, [r4, #4]
 800555e:	6054      	str	r4, [r2, #4]
 8005560:	e7cb      	b.n	80054fa <_free_r+0x22>
 8005562:	bd38      	pop	{r3, r4, r5, pc}
 8005564:	200002b8 	.word	0x200002b8

08005568 <sbrk_aligned>:
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	4e0e      	ldr	r6, [pc, #56]	; (80055a4 <sbrk_aligned+0x3c>)
 800556c:	460c      	mov	r4, r1
 800556e:	6831      	ldr	r1, [r6, #0]
 8005570:	4605      	mov	r5, r0
 8005572:	b911      	cbnz	r1, 800557a <sbrk_aligned+0x12>
 8005574:	f000 f9e8 	bl	8005948 <_sbrk_r>
 8005578:	6030      	str	r0, [r6, #0]
 800557a:	4621      	mov	r1, r4
 800557c:	4628      	mov	r0, r5
 800557e:	f000 f9e3 	bl	8005948 <_sbrk_r>
 8005582:	1c43      	adds	r3, r0, #1
 8005584:	d00a      	beq.n	800559c <sbrk_aligned+0x34>
 8005586:	1cc4      	adds	r4, r0, #3
 8005588:	f024 0403 	bic.w	r4, r4, #3
 800558c:	42a0      	cmp	r0, r4
 800558e:	d007      	beq.n	80055a0 <sbrk_aligned+0x38>
 8005590:	1a21      	subs	r1, r4, r0
 8005592:	4628      	mov	r0, r5
 8005594:	f000 f9d8 	bl	8005948 <_sbrk_r>
 8005598:	3001      	adds	r0, #1
 800559a:	d101      	bne.n	80055a0 <sbrk_aligned+0x38>
 800559c:	f04f 34ff 	mov.w	r4, #4294967295
 80055a0:	4620      	mov	r0, r4
 80055a2:	bd70      	pop	{r4, r5, r6, pc}
 80055a4:	200002bc 	.word	0x200002bc

080055a8 <_malloc_r>:
 80055a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ac:	1ccd      	adds	r5, r1, #3
 80055ae:	f025 0503 	bic.w	r5, r5, #3
 80055b2:	3508      	adds	r5, #8
 80055b4:	2d0c      	cmp	r5, #12
 80055b6:	bf38      	it	cc
 80055b8:	250c      	movcc	r5, #12
 80055ba:	2d00      	cmp	r5, #0
 80055bc:	4607      	mov	r7, r0
 80055be:	db01      	blt.n	80055c4 <_malloc_r+0x1c>
 80055c0:	42a9      	cmp	r1, r5
 80055c2:	d905      	bls.n	80055d0 <_malloc_r+0x28>
 80055c4:	230c      	movs	r3, #12
 80055c6:	2600      	movs	r6, #0
 80055c8:	603b      	str	r3, [r7, #0]
 80055ca:	4630      	mov	r0, r6
 80055cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055d0:	4e2e      	ldr	r6, [pc, #184]	; (800568c <_malloc_r+0xe4>)
 80055d2:	f000 fa25 	bl	8005a20 <__malloc_lock>
 80055d6:	6833      	ldr	r3, [r6, #0]
 80055d8:	461c      	mov	r4, r3
 80055da:	bb34      	cbnz	r4, 800562a <_malloc_r+0x82>
 80055dc:	4629      	mov	r1, r5
 80055de:	4638      	mov	r0, r7
 80055e0:	f7ff ffc2 	bl	8005568 <sbrk_aligned>
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	4604      	mov	r4, r0
 80055e8:	d14d      	bne.n	8005686 <_malloc_r+0xde>
 80055ea:	6834      	ldr	r4, [r6, #0]
 80055ec:	4626      	mov	r6, r4
 80055ee:	2e00      	cmp	r6, #0
 80055f0:	d140      	bne.n	8005674 <_malloc_r+0xcc>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	4631      	mov	r1, r6
 80055f6:	4638      	mov	r0, r7
 80055f8:	eb04 0803 	add.w	r8, r4, r3
 80055fc:	f000 f9a4 	bl	8005948 <_sbrk_r>
 8005600:	4580      	cmp	r8, r0
 8005602:	d13a      	bne.n	800567a <_malloc_r+0xd2>
 8005604:	6821      	ldr	r1, [r4, #0]
 8005606:	3503      	adds	r5, #3
 8005608:	1a6d      	subs	r5, r5, r1
 800560a:	f025 0503 	bic.w	r5, r5, #3
 800560e:	3508      	adds	r5, #8
 8005610:	2d0c      	cmp	r5, #12
 8005612:	bf38      	it	cc
 8005614:	250c      	movcc	r5, #12
 8005616:	4638      	mov	r0, r7
 8005618:	4629      	mov	r1, r5
 800561a:	f7ff ffa5 	bl	8005568 <sbrk_aligned>
 800561e:	3001      	adds	r0, #1
 8005620:	d02b      	beq.n	800567a <_malloc_r+0xd2>
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	442b      	add	r3, r5
 8005626:	6023      	str	r3, [r4, #0]
 8005628:	e00e      	b.n	8005648 <_malloc_r+0xa0>
 800562a:	6822      	ldr	r2, [r4, #0]
 800562c:	1b52      	subs	r2, r2, r5
 800562e:	d41e      	bmi.n	800566e <_malloc_r+0xc6>
 8005630:	2a0b      	cmp	r2, #11
 8005632:	d916      	bls.n	8005662 <_malloc_r+0xba>
 8005634:	1961      	adds	r1, r4, r5
 8005636:	42a3      	cmp	r3, r4
 8005638:	6025      	str	r5, [r4, #0]
 800563a:	bf18      	it	ne
 800563c:	6059      	strne	r1, [r3, #4]
 800563e:	6863      	ldr	r3, [r4, #4]
 8005640:	bf08      	it	eq
 8005642:	6031      	streq	r1, [r6, #0]
 8005644:	5162      	str	r2, [r4, r5]
 8005646:	604b      	str	r3, [r1, #4]
 8005648:	4638      	mov	r0, r7
 800564a:	f104 060b 	add.w	r6, r4, #11
 800564e:	f000 f9ed 	bl	8005a2c <__malloc_unlock>
 8005652:	f026 0607 	bic.w	r6, r6, #7
 8005656:	1d23      	adds	r3, r4, #4
 8005658:	1af2      	subs	r2, r6, r3
 800565a:	d0b6      	beq.n	80055ca <_malloc_r+0x22>
 800565c:	1b9b      	subs	r3, r3, r6
 800565e:	50a3      	str	r3, [r4, r2]
 8005660:	e7b3      	b.n	80055ca <_malloc_r+0x22>
 8005662:	6862      	ldr	r2, [r4, #4]
 8005664:	42a3      	cmp	r3, r4
 8005666:	bf0c      	ite	eq
 8005668:	6032      	streq	r2, [r6, #0]
 800566a:	605a      	strne	r2, [r3, #4]
 800566c:	e7ec      	b.n	8005648 <_malloc_r+0xa0>
 800566e:	4623      	mov	r3, r4
 8005670:	6864      	ldr	r4, [r4, #4]
 8005672:	e7b2      	b.n	80055da <_malloc_r+0x32>
 8005674:	4634      	mov	r4, r6
 8005676:	6876      	ldr	r6, [r6, #4]
 8005678:	e7b9      	b.n	80055ee <_malloc_r+0x46>
 800567a:	230c      	movs	r3, #12
 800567c:	4638      	mov	r0, r7
 800567e:	603b      	str	r3, [r7, #0]
 8005680:	f000 f9d4 	bl	8005a2c <__malloc_unlock>
 8005684:	e7a1      	b.n	80055ca <_malloc_r+0x22>
 8005686:	6025      	str	r5, [r4, #0]
 8005688:	e7de      	b.n	8005648 <_malloc_r+0xa0>
 800568a:	bf00      	nop
 800568c:	200002b8 	.word	0x200002b8

08005690 <__ssputs_r>:
 8005690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005694:	688e      	ldr	r6, [r1, #8]
 8005696:	4682      	mov	sl, r0
 8005698:	429e      	cmp	r6, r3
 800569a:	460c      	mov	r4, r1
 800569c:	4690      	mov	r8, r2
 800569e:	461f      	mov	r7, r3
 80056a0:	d838      	bhi.n	8005714 <__ssputs_r+0x84>
 80056a2:	898a      	ldrh	r2, [r1, #12]
 80056a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056a8:	d032      	beq.n	8005710 <__ssputs_r+0x80>
 80056aa:	6825      	ldr	r5, [r4, #0]
 80056ac:	6909      	ldr	r1, [r1, #16]
 80056ae:	3301      	adds	r3, #1
 80056b0:	eba5 0901 	sub.w	r9, r5, r1
 80056b4:	6965      	ldr	r5, [r4, #20]
 80056b6:	444b      	add	r3, r9
 80056b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056c0:	106d      	asrs	r5, r5, #1
 80056c2:	429d      	cmp	r5, r3
 80056c4:	bf38      	it	cc
 80056c6:	461d      	movcc	r5, r3
 80056c8:	0553      	lsls	r3, r2, #21
 80056ca:	d531      	bpl.n	8005730 <__ssputs_r+0xa0>
 80056cc:	4629      	mov	r1, r5
 80056ce:	f7ff ff6b 	bl	80055a8 <_malloc_r>
 80056d2:	4606      	mov	r6, r0
 80056d4:	b950      	cbnz	r0, 80056ec <__ssputs_r+0x5c>
 80056d6:	230c      	movs	r3, #12
 80056d8:	f04f 30ff 	mov.w	r0, #4294967295
 80056dc:	f8ca 3000 	str.w	r3, [sl]
 80056e0:	89a3      	ldrh	r3, [r4, #12]
 80056e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056e6:	81a3      	strh	r3, [r4, #12]
 80056e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ec:	464a      	mov	r2, r9
 80056ee:	6921      	ldr	r1, [r4, #16]
 80056f0:	f7ff fb4e 	bl	8004d90 <memcpy>
 80056f4:	89a3      	ldrh	r3, [r4, #12]
 80056f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80056fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056fe:	81a3      	strh	r3, [r4, #12]
 8005700:	6126      	str	r6, [r4, #16]
 8005702:	444e      	add	r6, r9
 8005704:	6026      	str	r6, [r4, #0]
 8005706:	463e      	mov	r6, r7
 8005708:	6165      	str	r5, [r4, #20]
 800570a:	eba5 0509 	sub.w	r5, r5, r9
 800570e:	60a5      	str	r5, [r4, #8]
 8005710:	42be      	cmp	r6, r7
 8005712:	d900      	bls.n	8005716 <__ssputs_r+0x86>
 8005714:	463e      	mov	r6, r7
 8005716:	4632      	mov	r2, r6
 8005718:	4641      	mov	r1, r8
 800571a:	6820      	ldr	r0, [r4, #0]
 800571c:	f000 f966 	bl	80059ec <memmove>
 8005720:	68a3      	ldr	r3, [r4, #8]
 8005722:	2000      	movs	r0, #0
 8005724:	1b9b      	subs	r3, r3, r6
 8005726:	60a3      	str	r3, [r4, #8]
 8005728:	6823      	ldr	r3, [r4, #0]
 800572a:	4433      	add	r3, r6
 800572c:	6023      	str	r3, [r4, #0]
 800572e:	e7db      	b.n	80056e8 <__ssputs_r+0x58>
 8005730:	462a      	mov	r2, r5
 8005732:	f000 f981 	bl	8005a38 <_realloc_r>
 8005736:	4606      	mov	r6, r0
 8005738:	2800      	cmp	r0, #0
 800573a:	d1e1      	bne.n	8005700 <__ssputs_r+0x70>
 800573c:	4650      	mov	r0, sl
 800573e:	6921      	ldr	r1, [r4, #16]
 8005740:	f7ff feca 	bl	80054d8 <_free_r>
 8005744:	e7c7      	b.n	80056d6 <__ssputs_r+0x46>
	...

08005748 <_svfiprintf_r>:
 8005748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574c:	4698      	mov	r8, r3
 800574e:	898b      	ldrh	r3, [r1, #12]
 8005750:	4607      	mov	r7, r0
 8005752:	061b      	lsls	r3, r3, #24
 8005754:	460d      	mov	r5, r1
 8005756:	4614      	mov	r4, r2
 8005758:	b09d      	sub	sp, #116	; 0x74
 800575a:	d50e      	bpl.n	800577a <_svfiprintf_r+0x32>
 800575c:	690b      	ldr	r3, [r1, #16]
 800575e:	b963      	cbnz	r3, 800577a <_svfiprintf_r+0x32>
 8005760:	2140      	movs	r1, #64	; 0x40
 8005762:	f7ff ff21 	bl	80055a8 <_malloc_r>
 8005766:	6028      	str	r0, [r5, #0]
 8005768:	6128      	str	r0, [r5, #16]
 800576a:	b920      	cbnz	r0, 8005776 <_svfiprintf_r+0x2e>
 800576c:	230c      	movs	r3, #12
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	f04f 30ff 	mov.w	r0, #4294967295
 8005774:	e0d1      	b.n	800591a <_svfiprintf_r+0x1d2>
 8005776:	2340      	movs	r3, #64	; 0x40
 8005778:	616b      	str	r3, [r5, #20]
 800577a:	2300      	movs	r3, #0
 800577c:	9309      	str	r3, [sp, #36]	; 0x24
 800577e:	2320      	movs	r3, #32
 8005780:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005784:	2330      	movs	r3, #48	; 0x30
 8005786:	f04f 0901 	mov.w	r9, #1
 800578a:	f8cd 800c 	str.w	r8, [sp, #12]
 800578e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005934 <_svfiprintf_r+0x1ec>
 8005792:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005796:	4623      	mov	r3, r4
 8005798:	469a      	mov	sl, r3
 800579a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800579e:	b10a      	cbz	r2, 80057a4 <_svfiprintf_r+0x5c>
 80057a0:	2a25      	cmp	r2, #37	; 0x25
 80057a2:	d1f9      	bne.n	8005798 <_svfiprintf_r+0x50>
 80057a4:	ebba 0b04 	subs.w	fp, sl, r4
 80057a8:	d00b      	beq.n	80057c2 <_svfiprintf_r+0x7a>
 80057aa:	465b      	mov	r3, fp
 80057ac:	4622      	mov	r2, r4
 80057ae:	4629      	mov	r1, r5
 80057b0:	4638      	mov	r0, r7
 80057b2:	f7ff ff6d 	bl	8005690 <__ssputs_r>
 80057b6:	3001      	adds	r0, #1
 80057b8:	f000 80aa 	beq.w	8005910 <_svfiprintf_r+0x1c8>
 80057bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057be:	445a      	add	r2, fp
 80057c0:	9209      	str	r2, [sp, #36]	; 0x24
 80057c2:	f89a 3000 	ldrb.w	r3, [sl]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 80a2 	beq.w	8005910 <_svfiprintf_r+0x1c8>
 80057cc:	2300      	movs	r3, #0
 80057ce:	f04f 32ff 	mov.w	r2, #4294967295
 80057d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057d6:	f10a 0a01 	add.w	sl, sl, #1
 80057da:	9304      	str	r3, [sp, #16]
 80057dc:	9307      	str	r3, [sp, #28]
 80057de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057e2:	931a      	str	r3, [sp, #104]	; 0x68
 80057e4:	4654      	mov	r4, sl
 80057e6:	2205      	movs	r2, #5
 80057e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ec:	4851      	ldr	r0, [pc, #324]	; (8005934 <_svfiprintf_r+0x1ec>)
 80057ee:	f7ff fac1 	bl	8004d74 <memchr>
 80057f2:	9a04      	ldr	r2, [sp, #16]
 80057f4:	b9d8      	cbnz	r0, 800582e <_svfiprintf_r+0xe6>
 80057f6:	06d0      	lsls	r0, r2, #27
 80057f8:	bf44      	itt	mi
 80057fa:	2320      	movmi	r3, #32
 80057fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005800:	0711      	lsls	r1, r2, #28
 8005802:	bf44      	itt	mi
 8005804:	232b      	movmi	r3, #43	; 0x2b
 8005806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800580a:	f89a 3000 	ldrb.w	r3, [sl]
 800580e:	2b2a      	cmp	r3, #42	; 0x2a
 8005810:	d015      	beq.n	800583e <_svfiprintf_r+0xf6>
 8005812:	4654      	mov	r4, sl
 8005814:	2000      	movs	r0, #0
 8005816:	f04f 0c0a 	mov.w	ip, #10
 800581a:	9a07      	ldr	r2, [sp, #28]
 800581c:	4621      	mov	r1, r4
 800581e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005822:	3b30      	subs	r3, #48	; 0x30
 8005824:	2b09      	cmp	r3, #9
 8005826:	d94e      	bls.n	80058c6 <_svfiprintf_r+0x17e>
 8005828:	b1b0      	cbz	r0, 8005858 <_svfiprintf_r+0x110>
 800582a:	9207      	str	r2, [sp, #28]
 800582c:	e014      	b.n	8005858 <_svfiprintf_r+0x110>
 800582e:	eba0 0308 	sub.w	r3, r0, r8
 8005832:	fa09 f303 	lsl.w	r3, r9, r3
 8005836:	4313      	orrs	r3, r2
 8005838:	46a2      	mov	sl, r4
 800583a:	9304      	str	r3, [sp, #16]
 800583c:	e7d2      	b.n	80057e4 <_svfiprintf_r+0x9c>
 800583e:	9b03      	ldr	r3, [sp, #12]
 8005840:	1d19      	adds	r1, r3, #4
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	9103      	str	r1, [sp, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	bfbb      	ittet	lt
 800584a:	425b      	neglt	r3, r3
 800584c:	f042 0202 	orrlt.w	r2, r2, #2
 8005850:	9307      	strge	r3, [sp, #28]
 8005852:	9307      	strlt	r3, [sp, #28]
 8005854:	bfb8      	it	lt
 8005856:	9204      	strlt	r2, [sp, #16]
 8005858:	7823      	ldrb	r3, [r4, #0]
 800585a:	2b2e      	cmp	r3, #46	; 0x2e
 800585c:	d10c      	bne.n	8005878 <_svfiprintf_r+0x130>
 800585e:	7863      	ldrb	r3, [r4, #1]
 8005860:	2b2a      	cmp	r3, #42	; 0x2a
 8005862:	d135      	bne.n	80058d0 <_svfiprintf_r+0x188>
 8005864:	9b03      	ldr	r3, [sp, #12]
 8005866:	3402      	adds	r4, #2
 8005868:	1d1a      	adds	r2, r3, #4
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	9203      	str	r2, [sp, #12]
 800586e:	2b00      	cmp	r3, #0
 8005870:	bfb8      	it	lt
 8005872:	f04f 33ff 	movlt.w	r3, #4294967295
 8005876:	9305      	str	r3, [sp, #20]
 8005878:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005938 <_svfiprintf_r+0x1f0>
 800587c:	2203      	movs	r2, #3
 800587e:	4650      	mov	r0, sl
 8005880:	7821      	ldrb	r1, [r4, #0]
 8005882:	f7ff fa77 	bl	8004d74 <memchr>
 8005886:	b140      	cbz	r0, 800589a <_svfiprintf_r+0x152>
 8005888:	2340      	movs	r3, #64	; 0x40
 800588a:	eba0 000a 	sub.w	r0, r0, sl
 800588e:	fa03 f000 	lsl.w	r0, r3, r0
 8005892:	9b04      	ldr	r3, [sp, #16]
 8005894:	3401      	adds	r4, #1
 8005896:	4303      	orrs	r3, r0
 8005898:	9304      	str	r3, [sp, #16]
 800589a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800589e:	2206      	movs	r2, #6
 80058a0:	4826      	ldr	r0, [pc, #152]	; (800593c <_svfiprintf_r+0x1f4>)
 80058a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058a6:	f7ff fa65 	bl	8004d74 <memchr>
 80058aa:	2800      	cmp	r0, #0
 80058ac:	d038      	beq.n	8005920 <_svfiprintf_r+0x1d8>
 80058ae:	4b24      	ldr	r3, [pc, #144]	; (8005940 <_svfiprintf_r+0x1f8>)
 80058b0:	bb1b      	cbnz	r3, 80058fa <_svfiprintf_r+0x1b2>
 80058b2:	9b03      	ldr	r3, [sp, #12]
 80058b4:	3307      	adds	r3, #7
 80058b6:	f023 0307 	bic.w	r3, r3, #7
 80058ba:	3308      	adds	r3, #8
 80058bc:	9303      	str	r3, [sp, #12]
 80058be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c0:	4433      	add	r3, r6
 80058c2:	9309      	str	r3, [sp, #36]	; 0x24
 80058c4:	e767      	b.n	8005796 <_svfiprintf_r+0x4e>
 80058c6:	460c      	mov	r4, r1
 80058c8:	2001      	movs	r0, #1
 80058ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80058ce:	e7a5      	b.n	800581c <_svfiprintf_r+0xd4>
 80058d0:	2300      	movs	r3, #0
 80058d2:	f04f 0c0a 	mov.w	ip, #10
 80058d6:	4619      	mov	r1, r3
 80058d8:	3401      	adds	r4, #1
 80058da:	9305      	str	r3, [sp, #20]
 80058dc:	4620      	mov	r0, r4
 80058de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058e2:	3a30      	subs	r2, #48	; 0x30
 80058e4:	2a09      	cmp	r2, #9
 80058e6:	d903      	bls.n	80058f0 <_svfiprintf_r+0x1a8>
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d0c5      	beq.n	8005878 <_svfiprintf_r+0x130>
 80058ec:	9105      	str	r1, [sp, #20]
 80058ee:	e7c3      	b.n	8005878 <_svfiprintf_r+0x130>
 80058f0:	4604      	mov	r4, r0
 80058f2:	2301      	movs	r3, #1
 80058f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80058f8:	e7f0      	b.n	80058dc <_svfiprintf_r+0x194>
 80058fa:	ab03      	add	r3, sp, #12
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	462a      	mov	r2, r5
 8005900:	4638      	mov	r0, r7
 8005902:	4b10      	ldr	r3, [pc, #64]	; (8005944 <_svfiprintf_r+0x1fc>)
 8005904:	a904      	add	r1, sp, #16
 8005906:	f7fd ffcd 	bl	80038a4 <_printf_float>
 800590a:	1c42      	adds	r2, r0, #1
 800590c:	4606      	mov	r6, r0
 800590e:	d1d6      	bne.n	80058be <_svfiprintf_r+0x176>
 8005910:	89ab      	ldrh	r3, [r5, #12]
 8005912:	065b      	lsls	r3, r3, #25
 8005914:	f53f af2c 	bmi.w	8005770 <_svfiprintf_r+0x28>
 8005918:	9809      	ldr	r0, [sp, #36]	; 0x24
 800591a:	b01d      	add	sp, #116	; 0x74
 800591c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005920:	ab03      	add	r3, sp, #12
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	462a      	mov	r2, r5
 8005926:	4638      	mov	r0, r7
 8005928:	4b06      	ldr	r3, [pc, #24]	; (8005944 <_svfiprintf_r+0x1fc>)
 800592a:	a904      	add	r1, sp, #16
 800592c:	f7fe fa56 	bl	8003ddc <_printf_i>
 8005930:	e7eb      	b.n	800590a <_svfiprintf_r+0x1c2>
 8005932:	bf00      	nop
 8005934:	0800678c 	.word	0x0800678c
 8005938:	08006792 	.word	0x08006792
 800593c:	08006796 	.word	0x08006796
 8005940:	080038a5 	.word	0x080038a5
 8005944:	08005691 	.word	0x08005691

08005948 <_sbrk_r>:
 8005948:	b538      	push	{r3, r4, r5, lr}
 800594a:	2300      	movs	r3, #0
 800594c:	4d05      	ldr	r5, [pc, #20]	; (8005964 <_sbrk_r+0x1c>)
 800594e:	4604      	mov	r4, r0
 8005950:	4608      	mov	r0, r1
 8005952:	602b      	str	r3, [r5, #0]
 8005954:	f7fb fc84 	bl	8001260 <_sbrk>
 8005958:	1c43      	adds	r3, r0, #1
 800595a:	d102      	bne.n	8005962 <_sbrk_r+0x1a>
 800595c:	682b      	ldr	r3, [r5, #0]
 800595e:	b103      	cbz	r3, 8005962 <_sbrk_r+0x1a>
 8005960:	6023      	str	r3, [r4, #0]
 8005962:	bd38      	pop	{r3, r4, r5, pc}
 8005964:	200002c0 	.word	0x200002c0

08005968 <__assert_func>:
 8005968:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800596a:	4614      	mov	r4, r2
 800596c:	461a      	mov	r2, r3
 800596e:	4b09      	ldr	r3, [pc, #36]	; (8005994 <__assert_func+0x2c>)
 8005970:	4605      	mov	r5, r0
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68d8      	ldr	r0, [r3, #12]
 8005976:	b14c      	cbz	r4, 800598c <__assert_func+0x24>
 8005978:	4b07      	ldr	r3, [pc, #28]	; (8005998 <__assert_func+0x30>)
 800597a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800597e:	9100      	str	r1, [sp, #0]
 8005980:	462b      	mov	r3, r5
 8005982:	4906      	ldr	r1, [pc, #24]	; (800599c <__assert_func+0x34>)
 8005984:	f000 f80e 	bl	80059a4 <fiprintf>
 8005988:	f000 faaa 	bl	8005ee0 <abort>
 800598c:	4b04      	ldr	r3, [pc, #16]	; (80059a0 <__assert_func+0x38>)
 800598e:	461c      	mov	r4, r3
 8005990:	e7f3      	b.n	800597a <__assert_func+0x12>
 8005992:	bf00      	nop
 8005994:	2000000c 	.word	0x2000000c
 8005998:	0800679d 	.word	0x0800679d
 800599c:	080067aa 	.word	0x080067aa
 80059a0:	080067d8 	.word	0x080067d8

080059a4 <fiprintf>:
 80059a4:	b40e      	push	{r1, r2, r3}
 80059a6:	b503      	push	{r0, r1, lr}
 80059a8:	4601      	mov	r1, r0
 80059aa:	ab03      	add	r3, sp, #12
 80059ac:	4805      	ldr	r0, [pc, #20]	; (80059c4 <fiprintf+0x20>)
 80059ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80059b2:	6800      	ldr	r0, [r0, #0]
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	f000 f895 	bl	8005ae4 <_vfiprintf_r>
 80059ba:	b002      	add	sp, #8
 80059bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80059c0:	b003      	add	sp, #12
 80059c2:	4770      	bx	lr
 80059c4:	2000000c 	.word	0x2000000c

080059c8 <__ascii_mbtowc>:
 80059c8:	b082      	sub	sp, #8
 80059ca:	b901      	cbnz	r1, 80059ce <__ascii_mbtowc+0x6>
 80059cc:	a901      	add	r1, sp, #4
 80059ce:	b142      	cbz	r2, 80059e2 <__ascii_mbtowc+0x1a>
 80059d0:	b14b      	cbz	r3, 80059e6 <__ascii_mbtowc+0x1e>
 80059d2:	7813      	ldrb	r3, [r2, #0]
 80059d4:	600b      	str	r3, [r1, #0]
 80059d6:	7812      	ldrb	r2, [r2, #0]
 80059d8:	1e10      	subs	r0, r2, #0
 80059da:	bf18      	it	ne
 80059dc:	2001      	movne	r0, #1
 80059de:	b002      	add	sp, #8
 80059e0:	4770      	bx	lr
 80059e2:	4610      	mov	r0, r2
 80059e4:	e7fb      	b.n	80059de <__ascii_mbtowc+0x16>
 80059e6:	f06f 0001 	mvn.w	r0, #1
 80059ea:	e7f8      	b.n	80059de <__ascii_mbtowc+0x16>

080059ec <memmove>:
 80059ec:	4288      	cmp	r0, r1
 80059ee:	b510      	push	{r4, lr}
 80059f0:	eb01 0402 	add.w	r4, r1, r2
 80059f4:	d902      	bls.n	80059fc <memmove+0x10>
 80059f6:	4284      	cmp	r4, r0
 80059f8:	4623      	mov	r3, r4
 80059fa:	d807      	bhi.n	8005a0c <memmove+0x20>
 80059fc:	1e43      	subs	r3, r0, #1
 80059fe:	42a1      	cmp	r1, r4
 8005a00:	d008      	beq.n	8005a14 <memmove+0x28>
 8005a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a0a:	e7f8      	b.n	80059fe <memmove+0x12>
 8005a0c:	4601      	mov	r1, r0
 8005a0e:	4402      	add	r2, r0
 8005a10:	428a      	cmp	r2, r1
 8005a12:	d100      	bne.n	8005a16 <memmove+0x2a>
 8005a14:	bd10      	pop	{r4, pc}
 8005a16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a1e:	e7f7      	b.n	8005a10 <memmove+0x24>

08005a20 <__malloc_lock>:
 8005a20:	4801      	ldr	r0, [pc, #4]	; (8005a28 <__malloc_lock+0x8>)
 8005a22:	f000 bc19 	b.w	8006258 <__retarget_lock_acquire_recursive>
 8005a26:	bf00      	nop
 8005a28:	200002c4 	.word	0x200002c4

08005a2c <__malloc_unlock>:
 8005a2c:	4801      	ldr	r0, [pc, #4]	; (8005a34 <__malloc_unlock+0x8>)
 8005a2e:	f000 bc14 	b.w	800625a <__retarget_lock_release_recursive>
 8005a32:	bf00      	nop
 8005a34:	200002c4 	.word	0x200002c4

08005a38 <_realloc_r>:
 8005a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3c:	4680      	mov	r8, r0
 8005a3e:	4614      	mov	r4, r2
 8005a40:	460e      	mov	r6, r1
 8005a42:	b921      	cbnz	r1, 8005a4e <_realloc_r+0x16>
 8005a44:	4611      	mov	r1, r2
 8005a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a4a:	f7ff bdad 	b.w	80055a8 <_malloc_r>
 8005a4e:	b92a      	cbnz	r2, 8005a5c <_realloc_r+0x24>
 8005a50:	f7ff fd42 	bl	80054d8 <_free_r>
 8005a54:	4625      	mov	r5, r4
 8005a56:	4628      	mov	r0, r5
 8005a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a5c:	f000 fc64 	bl	8006328 <_malloc_usable_size_r>
 8005a60:	4284      	cmp	r4, r0
 8005a62:	4607      	mov	r7, r0
 8005a64:	d802      	bhi.n	8005a6c <_realloc_r+0x34>
 8005a66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005a6a:	d812      	bhi.n	8005a92 <_realloc_r+0x5a>
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	4640      	mov	r0, r8
 8005a70:	f7ff fd9a 	bl	80055a8 <_malloc_r>
 8005a74:	4605      	mov	r5, r0
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d0ed      	beq.n	8005a56 <_realloc_r+0x1e>
 8005a7a:	42bc      	cmp	r4, r7
 8005a7c:	4622      	mov	r2, r4
 8005a7e:	4631      	mov	r1, r6
 8005a80:	bf28      	it	cs
 8005a82:	463a      	movcs	r2, r7
 8005a84:	f7ff f984 	bl	8004d90 <memcpy>
 8005a88:	4631      	mov	r1, r6
 8005a8a:	4640      	mov	r0, r8
 8005a8c:	f7ff fd24 	bl	80054d8 <_free_r>
 8005a90:	e7e1      	b.n	8005a56 <_realloc_r+0x1e>
 8005a92:	4635      	mov	r5, r6
 8005a94:	e7df      	b.n	8005a56 <_realloc_r+0x1e>

08005a96 <__sfputc_r>:
 8005a96:	6893      	ldr	r3, [r2, #8]
 8005a98:	b410      	push	{r4}
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	6093      	str	r3, [r2, #8]
 8005aa0:	da07      	bge.n	8005ab2 <__sfputc_r+0x1c>
 8005aa2:	6994      	ldr	r4, [r2, #24]
 8005aa4:	42a3      	cmp	r3, r4
 8005aa6:	db01      	blt.n	8005aac <__sfputc_r+0x16>
 8005aa8:	290a      	cmp	r1, #10
 8005aaa:	d102      	bne.n	8005ab2 <__sfputc_r+0x1c>
 8005aac:	bc10      	pop	{r4}
 8005aae:	f000 b949 	b.w	8005d44 <__swbuf_r>
 8005ab2:	6813      	ldr	r3, [r2, #0]
 8005ab4:	1c58      	adds	r0, r3, #1
 8005ab6:	6010      	str	r0, [r2, #0]
 8005ab8:	7019      	strb	r1, [r3, #0]
 8005aba:	4608      	mov	r0, r1
 8005abc:	bc10      	pop	{r4}
 8005abe:	4770      	bx	lr

08005ac0 <__sfputs_r>:
 8005ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	460f      	mov	r7, r1
 8005ac6:	4614      	mov	r4, r2
 8005ac8:	18d5      	adds	r5, r2, r3
 8005aca:	42ac      	cmp	r4, r5
 8005acc:	d101      	bne.n	8005ad2 <__sfputs_r+0x12>
 8005ace:	2000      	movs	r0, #0
 8005ad0:	e007      	b.n	8005ae2 <__sfputs_r+0x22>
 8005ad2:	463a      	mov	r2, r7
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ada:	f7ff ffdc 	bl	8005a96 <__sfputc_r>
 8005ade:	1c43      	adds	r3, r0, #1
 8005ae0:	d1f3      	bne.n	8005aca <__sfputs_r+0xa>
 8005ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005ae4 <_vfiprintf_r>:
 8005ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae8:	460d      	mov	r5, r1
 8005aea:	4614      	mov	r4, r2
 8005aec:	4698      	mov	r8, r3
 8005aee:	4606      	mov	r6, r0
 8005af0:	b09d      	sub	sp, #116	; 0x74
 8005af2:	b118      	cbz	r0, 8005afc <_vfiprintf_r+0x18>
 8005af4:	6983      	ldr	r3, [r0, #24]
 8005af6:	b90b      	cbnz	r3, 8005afc <_vfiprintf_r+0x18>
 8005af8:	f000 fb10 	bl	800611c <__sinit>
 8005afc:	4b89      	ldr	r3, [pc, #548]	; (8005d24 <_vfiprintf_r+0x240>)
 8005afe:	429d      	cmp	r5, r3
 8005b00:	d11b      	bne.n	8005b3a <_vfiprintf_r+0x56>
 8005b02:	6875      	ldr	r5, [r6, #4]
 8005b04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b06:	07d9      	lsls	r1, r3, #31
 8005b08:	d405      	bmi.n	8005b16 <_vfiprintf_r+0x32>
 8005b0a:	89ab      	ldrh	r3, [r5, #12]
 8005b0c:	059a      	lsls	r2, r3, #22
 8005b0e:	d402      	bmi.n	8005b16 <_vfiprintf_r+0x32>
 8005b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b12:	f000 fba1 	bl	8006258 <__retarget_lock_acquire_recursive>
 8005b16:	89ab      	ldrh	r3, [r5, #12]
 8005b18:	071b      	lsls	r3, r3, #28
 8005b1a:	d501      	bpl.n	8005b20 <_vfiprintf_r+0x3c>
 8005b1c:	692b      	ldr	r3, [r5, #16]
 8005b1e:	b9eb      	cbnz	r3, 8005b5c <_vfiprintf_r+0x78>
 8005b20:	4629      	mov	r1, r5
 8005b22:	4630      	mov	r0, r6
 8005b24:	f000 f96e 	bl	8005e04 <__swsetup_r>
 8005b28:	b1c0      	cbz	r0, 8005b5c <_vfiprintf_r+0x78>
 8005b2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b2c:	07dc      	lsls	r4, r3, #31
 8005b2e:	d50e      	bpl.n	8005b4e <_vfiprintf_r+0x6a>
 8005b30:	f04f 30ff 	mov.w	r0, #4294967295
 8005b34:	b01d      	add	sp, #116	; 0x74
 8005b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b3a:	4b7b      	ldr	r3, [pc, #492]	; (8005d28 <_vfiprintf_r+0x244>)
 8005b3c:	429d      	cmp	r5, r3
 8005b3e:	d101      	bne.n	8005b44 <_vfiprintf_r+0x60>
 8005b40:	68b5      	ldr	r5, [r6, #8]
 8005b42:	e7df      	b.n	8005b04 <_vfiprintf_r+0x20>
 8005b44:	4b79      	ldr	r3, [pc, #484]	; (8005d2c <_vfiprintf_r+0x248>)
 8005b46:	429d      	cmp	r5, r3
 8005b48:	bf08      	it	eq
 8005b4a:	68f5      	ldreq	r5, [r6, #12]
 8005b4c:	e7da      	b.n	8005b04 <_vfiprintf_r+0x20>
 8005b4e:	89ab      	ldrh	r3, [r5, #12]
 8005b50:	0598      	lsls	r0, r3, #22
 8005b52:	d4ed      	bmi.n	8005b30 <_vfiprintf_r+0x4c>
 8005b54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b56:	f000 fb80 	bl	800625a <__retarget_lock_release_recursive>
 8005b5a:	e7e9      	b.n	8005b30 <_vfiprintf_r+0x4c>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b60:	2320      	movs	r3, #32
 8005b62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b66:	2330      	movs	r3, #48	; 0x30
 8005b68:	f04f 0901 	mov.w	r9, #1
 8005b6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b70:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005d30 <_vfiprintf_r+0x24c>
 8005b74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b78:	4623      	mov	r3, r4
 8005b7a:	469a      	mov	sl, r3
 8005b7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b80:	b10a      	cbz	r2, 8005b86 <_vfiprintf_r+0xa2>
 8005b82:	2a25      	cmp	r2, #37	; 0x25
 8005b84:	d1f9      	bne.n	8005b7a <_vfiprintf_r+0x96>
 8005b86:	ebba 0b04 	subs.w	fp, sl, r4
 8005b8a:	d00b      	beq.n	8005ba4 <_vfiprintf_r+0xc0>
 8005b8c:	465b      	mov	r3, fp
 8005b8e:	4622      	mov	r2, r4
 8005b90:	4629      	mov	r1, r5
 8005b92:	4630      	mov	r0, r6
 8005b94:	f7ff ff94 	bl	8005ac0 <__sfputs_r>
 8005b98:	3001      	adds	r0, #1
 8005b9a:	f000 80aa 	beq.w	8005cf2 <_vfiprintf_r+0x20e>
 8005b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ba0:	445a      	add	r2, fp
 8005ba2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f000 80a2 	beq.w	8005cf2 <_vfiprintf_r+0x20e>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bb8:	f10a 0a01 	add.w	sl, sl, #1
 8005bbc:	9304      	str	r3, [sp, #16]
 8005bbe:	9307      	str	r3, [sp, #28]
 8005bc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bc4:	931a      	str	r3, [sp, #104]	; 0x68
 8005bc6:	4654      	mov	r4, sl
 8005bc8:	2205      	movs	r2, #5
 8005bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bce:	4858      	ldr	r0, [pc, #352]	; (8005d30 <_vfiprintf_r+0x24c>)
 8005bd0:	f7ff f8d0 	bl	8004d74 <memchr>
 8005bd4:	9a04      	ldr	r2, [sp, #16]
 8005bd6:	b9d8      	cbnz	r0, 8005c10 <_vfiprintf_r+0x12c>
 8005bd8:	06d1      	lsls	r1, r2, #27
 8005bda:	bf44      	itt	mi
 8005bdc:	2320      	movmi	r3, #32
 8005bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005be2:	0713      	lsls	r3, r2, #28
 8005be4:	bf44      	itt	mi
 8005be6:	232b      	movmi	r3, #43	; 0x2b
 8005be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bec:	f89a 3000 	ldrb.w	r3, [sl]
 8005bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8005bf2:	d015      	beq.n	8005c20 <_vfiprintf_r+0x13c>
 8005bf4:	4654      	mov	r4, sl
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	f04f 0c0a 	mov.w	ip, #10
 8005bfc:	9a07      	ldr	r2, [sp, #28]
 8005bfe:	4621      	mov	r1, r4
 8005c00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c04:	3b30      	subs	r3, #48	; 0x30
 8005c06:	2b09      	cmp	r3, #9
 8005c08:	d94e      	bls.n	8005ca8 <_vfiprintf_r+0x1c4>
 8005c0a:	b1b0      	cbz	r0, 8005c3a <_vfiprintf_r+0x156>
 8005c0c:	9207      	str	r2, [sp, #28]
 8005c0e:	e014      	b.n	8005c3a <_vfiprintf_r+0x156>
 8005c10:	eba0 0308 	sub.w	r3, r0, r8
 8005c14:	fa09 f303 	lsl.w	r3, r9, r3
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	46a2      	mov	sl, r4
 8005c1c:	9304      	str	r3, [sp, #16]
 8005c1e:	e7d2      	b.n	8005bc6 <_vfiprintf_r+0xe2>
 8005c20:	9b03      	ldr	r3, [sp, #12]
 8005c22:	1d19      	adds	r1, r3, #4
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	9103      	str	r1, [sp, #12]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	bfbb      	ittet	lt
 8005c2c:	425b      	neglt	r3, r3
 8005c2e:	f042 0202 	orrlt.w	r2, r2, #2
 8005c32:	9307      	strge	r3, [sp, #28]
 8005c34:	9307      	strlt	r3, [sp, #28]
 8005c36:	bfb8      	it	lt
 8005c38:	9204      	strlt	r2, [sp, #16]
 8005c3a:	7823      	ldrb	r3, [r4, #0]
 8005c3c:	2b2e      	cmp	r3, #46	; 0x2e
 8005c3e:	d10c      	bne.n	8005c5a <_vfiprintf_r+0x176>
 8005c40:	7863      	ldrb	r3, [r4, #1]
 8005c42:	2b2a      	cmp	r3, #42	; 0x2a
 8005c44:	d135      	bne.n	8005cb2 <_vfiprintf_r+0x1ce>
 8005c46:	9b03      	ldr	r3, [sp, #12]
 8005c48:	3402      	adds	r4, #2
 8005c4a:	1d1a      	adds	r2, r3, #4
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	9203      	str	r2, [sp, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	bfb8      	it	lt
 8005c54:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c58:	9305      	str	r3, [sp, #20]
 8005c5a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005d34 <_vfiprintf_r+0x250>
 8005c5e:	2203      	movs	r2, #3
 8005c60:	4650      	mov	r0, sl
 8005c62:	7821      	ldrb	r1, [r4, #0]
 8005c64:	f7ff f886 	bl	8004d74 <memchr>
 8005c68:	b140      	cbz	r0, 8005c7c <_vfiprintf_r+0x198>
 8005c6a:	2340      	movs	r3, #64	; 0x40
 8005c6c:	eba0 000a 	sub.w	r0, r0, sl
 8005c70:	fa03 f000 	lsl.w	r0, r3, r0
 8005c74:	9b04      	ldr	r3, [sp, #16]
 8005c76:	3401      	adds	r4, #1
 8005c78:	4303      	orrs	r3, r0
 8005c7a:	9304      	str	r3, [sp, #16]
 8005c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c80:	2206      	movs	r2, #6
 8005c82:	482d      	ldr	r0, [pc, #180]	; (8005d38 <_vfiprintf_r+0x254>)
 8005c84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c88:	f7ff f874 	bl	8004d74 <memchr>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	d03f      	beq.n	8005d10 <_vfiprintf_r+0x22c>
 8005c90:	4b2a      	ldr	r3, [pc, #168]	; (8005d3c <_vfiprintf_r+0x258>)
 8005c92:	bb1b      	cbnz	r3, 8005cdc <_vfiprintf_r+0x1f8>
 8005c94:	9b03      	ldr	r3, [sp, #12]
 8005c96:	3307      	adds	r3, #7
 8005c98:	f023 0307 	bic.w	r3, r3, #7
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	9303      	str	r3, [sp, #12]
 8005ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca2:	443b      	add	r3, r7
 8005ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ca6:	e767      	b.n	8005b78 <_vfiprintf_r+0x94>
 8005ca8:	460c      	mov	r4, r1
 8005caa:	2001      	movs	r0, #1
 8005cac:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cb0:	e7a5      	b.n	8005bfe <_vfiprintf_r+0x11a>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f04f 0c0a 	mov.w	ip, #10
 8005cb8:	4619      	mov	r1, r3
 8005cba:	3401      	adds	r4, #1
 8005cbc:	9305      	str	r3, [sp, #20]
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cc4:	3a30      	subs	r2, #48	; 0x30
 8005cc6:	2a09      	cmp	r2, #9
 8005cc8:	d903      	bls.n	8005cd2 <_vfiprintf_r+0x1ee>
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d0c5      	beq.n	8005c5a <_vfiprintf_r+0x176>
 8005cce:	9105      	str	r1, [sp, #20]
 8005cd0:	e7c3      	b.n	8005c5a <_vfiprintf_r+0x176>
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cda:	e7f0      	b.n	8005cbe <_vfiprintf_r+0x1da>
 8005cdc:	ab03      	add	r3, sp, #12
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	462a      	mov	r2, r5
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	4b16      	ldr	r3, [pc, #88]	; (8005d40 <_vfiprintf_r+0x25c>)
 8005ce6:	a904      	add	r1, sp, #16
 8005ce8:	f7fd fddc 	bl	80038a4 <_printf_float>
 8005cec:	4607      	mov	r7, r0
 8005cee:	1c78      	adds	r0, r7, #1
 8005cf0:	d1d6      	bne.n	8005ca0 <_vfiprintf_r+0x1bc>
 8005cf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cf4:	07d9      	lsls	r1, r3, #31
 8005cf6:	d405      	bmi.n	8005d04 <_vfiprintf_r+0x220>
 8005cf8:	89ab      	ldrh	r3, [r5, #12]
 8005cfa:	059a      	lsls	r2, r3, #22
 8005cfc:	d402      	bmi.n	8005d04 <_vfiprintf_r+0x220>
 8005cfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d00:	f000 faab 	bl	800625a <__retarget_lock_release_recursive>
 8005d04:	89ab      	ldrh	r3, [r5, #12]
 8005d06:	065b      	lsls	r3, r3, #25
 8005d08:	f53f af12 	bmi.w	8005b30 <_vfiprintf_r+0x4c>
 8005d0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d0e:	e711      	b.n	8005b34 <_vfiprintf_r+0x50>
 8005d10:	ab03      	add	r3, sp, #12
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	462a      	mov	r2, r5
 8005d16:	4630      	mov	r0, r6
 8005d18:	4b09      	ldr	r3, [pc, #36]	; (8005d40 <_vfiprintf_r+0x25c>)
 8005d1a:	a904      	add	r1, sp, #16
 8005d1c:	f7fe f85e 	bl	8003ddc <_printf_i>
 8005d20:	e7e4      	b.n	8005cec <_vfiprintf_r+0x208>
 8005d22:	bf00      	nop
 8005d24:	08006904 	.word	0x08006904
 8005d28:	08006924 	.word	0x08006924
 8005d2c:	080068e4 	.word	0x080068e4
 8005d30:	0800678c 	.word	0x0800678c
 8005d34:	08006792 	.word	0x08006792
 8005d38:	08006796 	.word	0x08006796
 8005d3c:	080038a5 	.word	0x080038a5
 8005d40:	08005ac1 	.word	0x08005ac1

08005d44 <__swbuf_r>:
 8005d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d46:	460e      	mov	r6, r1
 8005d48:	4614      	mov	r4, r2
 8005d4a:	4605      	mov	r5, r0
 8005d4c:	b118      	cbz	r0, 8005d56 <__swbuf_r+0x12>
 8005d4e:	6983      	ldr	r3, [r0, #24]
 8005d50:	b90b      	cbnz	r3, 8005d56 <__swbuf_r+0x12>
 8005d52:	f000 f9e3 	bl	800611c <__sinit>
 8005d56:	4b21      	ldr	r3, [pc, #132]	; (8005ddc <__swbuf_r+0x98>)
 8005d58:	429c      	cmp	r4, r3
 8005d5a:	d12b      	bne.n	8005db4 <__swbuf_r+0x70>
 8005d5c:	686c      	ldr	r4, [r5, #4]
 8005d5e:	69a3      	ldr	r3, [r4, #24]
 8005d60:	60a3      	str	r3, [r4, #8]
 8005d62:	89a3      	ldrh	r3, [r4, #12]
 8005d64:	071a      	lsls	r2, r3, #28
 8005d66:	d52f      	bpl.n	8005dc8 <__swbuf_r+0x84>
 8005d68:	6923      	ldr	r3, [r4, #16]
 8005d6a:	b36b      	cbz	r3, 8005dc8 <__swbuf_r+0x84>
 8005d6c:	6923      	ldr	r3, [r4, #16]
 8005d6e:	6820      	ldr	r0, [r4, #0]
 8005d70:	b2f6      	uxtb	r6, r6
 8005d72:	1ac0      	subs	r0, r0, r3
 8005d74:	6963      	ldr	r3, [r4, #20]
 8005d76:	4637      	mov	r7, r6
 8005d78:	4283      	cmp	r3, r0
 8005d7a:	dc04      	bgt.n	8005d86 <__swbuf_r+0x42>
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f000 f938 	bl	8005ff4 <_fflush_r>
 8005d84:	bb30      	cbnz	r0, 8005dd4 <__swbuf_r+0x90>
 8005d86:	68a3      	ldr	r3, [r4, #8]
 8005d88:	3001      	adds	r0, #1
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	60a3      	str	r3, [r4, #8]
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	6022      	str	r2, [r4, #0]
 8005d94:	701e      	strb	r6, [r3, #0]
 8005d96:	6963      	ldr	r3, [r4, #20]
 8005d98:	4283      	cmp	r3, r0
 8005d9a:	d004      	beq.n	8005da6 <__swbuf_r+0x62>
 8005d9c:	89a3      	ldrh	r3, [r4, #12]
 8005d9e:	07db      	lsls	r3, r3, #31
 8005da0:	d506      	bpl.n	8005db0 <__swbuf_r+0x6c>
 8005da2:	2e0a      	cmp	r6, #10
 8005da4:	d104      	bne.n	8005db0 <__swbuf_r+0x6c>
 8005da6:	4621      	mov	r1, r4
 8005da8:	4628      	mov	r0, r5
 8005daa:	f000 f923 	bl	8005ff4 <_fflush_r>
 8005dae:	b988      	cbnz	r0, 8005dd4 <__swbuf_r+0x90>
 8005db0:	4638      	mov	r0, r7
 8005db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005db4:	4b0a      	ldr	r3, [pc, #40]	; (8005de0 <__swbuf_r+0x9c>)
 8005db6:	429c      	cmp	r4, r3
 8005db8:	d101      	bne.n	8005dbe <__swbuf_r+0x7a>
 8005dba:	68ac      	ldr	r4, [r5, #8]
 8005dbc:	e7cf      	b.n	8005d5e <__swbuf_r+0x1a>
 8005dbe:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <__swbuf_r+0xa0>)
 8005dc0:	429c      	cmp	r4, r3
 8005dc2:	bf08      	it	eq
 8005dc4:	68ec      	ldreq	r4, [r5, #12]
 8005dc6:	e7ca      	b.n	8005d5e <__swbuf_r+0x1a>
 8005dc8:	4621      	mov	r1, r4
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f000 f81a 	bl	8005e04 <__swsetup_r>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	d0cb      	beq.n	8005d6c <__swbuf_r+0x28>
 8005dd4:	f04f 37ff 	mov.w	r7, #4294967295
 8005dd8:	e7ea      	b.n	8005db0 <__swbuf_r+0x6c>
 8005dda:	bf00      	nop
 8005ddc:	08006904 	.word	0x08006904
 8005de0:	08006924 	.word	0x08006924
 8005de4:	080068e4 	.word	0x080068e4

08005de8 <__ascii_wctomb>:
 8005de8:	4603      	mov	r3, r0
 8005dea:	4608      	mov	r0, r1
 8005dec:	b141      	cbz	r1, 8005e00 <__ascii_wctomb+0x18>
 8005dee:	2aff      	cmp	r2, #255	; 0xff
 8005df0:	d904      	bls.n	8005dfc <__ascii_wctomb+0x14>
 8005df2:	228a      	movs	r2, #138	; 0x8a
 8005df4:	f04f 30ff 	mov.w	r0, #4294967295
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	4770      	bx	lr
 8005dfc:	2001      	movs	r0, #1
 8005dfe:	700a      	strb	r2, [r1, #0]
 8005e00:	4770      	bx	lr
	...

08005e04 <__swsetup_r>:
 8005e04:	4b32      	ldr	r3, [pc, #200]	; (8005ed0 <__swsetup_r+0xcc>)
 8005e06:	b570      	push	{r4, r5, r6, lr}
 8005e08:	681d      	ldr	r5, [r3, #0]
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	460c      	mov	r4, r1
 8005e0e:	b125      	cbz	r5, 8005e1a <__swsetup_r+0x16>
 8005e10:	69ab      	ldr	r3, [r5, #24]
 8005e12:	b913      	cbnz	r3, 8005e1a <__swsetup_r+0x16>
 8005e14:	4628      	mov	r0, r5
 8005e16:	f000 f981 	bl	800611c <__sinit>
 8005e1a:	4b2e      	ldr	r3, [pc, #184]	; (8005ed4 <__swsetup_r+0xd0>)
 8005e1c:	429c      	cmp	r4, r3
 8005e1e:	d10f      	bne.n	8005e40 <__swsetup_r+0x3c>
 8005e20:	686c      	ldr	r4, [r5, #4]
 8005e22:	89a3      	ldrh	r3, [r4, #12]
 8005e24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e28:	0719      	lsls	r1, r3, #28
 8005e2a:	d42c      	bmi.n	8005e86 <__swsetup_r+0x82>
 8005e2c:	06dd      	lsls	r5, r3, #27
 8005e2e:	d411      	bmi.n	8005e54 <__swsetup_r+0x50>
 8005e30:	2309      	movs	r3, #9
 8005e32:	6033      	str	r3, [r6, #0]
 8005e34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e38:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3c:	81a3      	strh	r3, [r4, #12]
 8005e3e:	e03e      	b.n	8005ebe <__swsetup_r+0xba>
 8005e40:	4b25      	ldr	r3, [pc, #148]	; (8005ed8 <__swsetup_r+0xd4>)
 8005e42:	429c      	cmp	r4, r3
 8005e44:	d101      	bne.n	8005e4a <__swsetup_r+0x46>
 8005e46:	68ac      	ldr	r4, [r5, #8]
 8005e48:	e7eb      	b.n	8005e22 <__swsetup_r+0x1e>
 8005e4a:	4b24      	ldr	r3, [pc, #144]	; (8005edc <__swsetup_r+0xd8>)
 8005e4c:	429c      	cmp	r4, r3
 8005e4e:	bf08      	it	eq
 8005e50:	68ec      	ldreq	r4, [r5, #12]
 8005e52:	e7e6      	b.n	8005e22 <__swsetup_r+0x1e>
 8005e54:	0758      	lsls	r0, r3, #29
 8005e56:	d512      	bpl.n	8005e7e <__swsetup_r+0x7a>
 8005e58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e5a:	b141      	cbz	r1, 8005e6e <__swsetup_r+0x6a>
 8005e5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e60:	4299      	cmp	r1, r3
 8005e62:	d002      	beq.n	8005e6a <__swsetup_r+0x66>
 8005e64:	4630      	mov	r0, r6
 8005e66:	f7ff fb37 	bl	80054d8 <_free_r>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	6363      	str	r3, [r4, #52]	; 0x34
 8005e6e:	89a3      	ldrh	r3, [r4, #12]
 8005e70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e74:	81a3      	strh	r3, [r4, #12]
 8005e76:	2300      	movs	r3, #0
 8005e78:	6063      	str	r3, [r4, #4]
 8005e7a:	6923      	ldr	r3, [r4, #16]
 8005e7c:	6023      	str	r3, [r4, #0]
 8005e7e:	89a3      	ldrh	r3, [r4, #12]
 8005e80:	f043 0308 	orr.w	r3, r3, #8
 8005e84:	81a3      	strh	r3, [r4, #12]
 8005e86:	6923      	ldr	r3, [r4, #16]
 8005e88:	b94b      	cbnz	r3, 8005e9e <__swsetup_r+0x9a>
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e94:	d003      	beq.n	8005e9e <__swsetup_r+0x9a>
 8005e96:	4621      	mov	r1, r4
 8005e98:	4630      	mov	r0, r6
 8005e9a:	f000 fa05 	bl	80062a8 <__smakebuf_r>
 8005e9e:	89a0      	ldrh	r0, [r4, #12]
 8005ea0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ea4:	f010 0301 	ands.w	r3, r0, #1
 8005ea8:	d00a      	beq.n	8005ec0 <__swsetup_r+0xbc>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	60a3      	str	r3, [r4, #8]
 8005eae:	6963      	ldr	r3, [r4, #20]
 8005eb0:	425b      	negs	r3, r3
 8005eb2:	61a3      	str	r3, [r4, #24]
 8005eb4:	6923      	ldr	r3, [r4, #16]
 8005eb6:	b943      	cbnz	r3, 8005eca <__swsetup_r+0xc6>
 8005eb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ebc:	d1ba      	bne.n	8005e34 <__swsetup_r+0x30>
 8005ebe:	bd70      	pop	{r4, r5, r6, pc}
 8005ec0:	0781      	lsls	r1, r0, #30
 8005ec2:	bf58      	it	pl
 8005ec4:	6963      	ldrpl	r3, [r4, #20]
 8005ec6:	60a3      	str	r3, [r4, #8]
 8005ec8:	e7f4      	b.n	8005eb4 <__swsetup_r+0xb0>
 8005eca:	2000      	movs	r0, #0
 8005ecc:	e7f7      	b.n	8005ebe <__swsetup_r+0xba>
 8005ece:	bf00      	nop
 8005ed0:	2000000c 	.word	0x2000000c
 8005ed4:	08006904 	.word	0x08006904
 8005ed8:	08006924 	.word	0x08006924
 8005edc:	080068e4 	.word	0x080068e4

08005ee0 <abort>:
 8005ee0:	2006      	movs	r0, #6
 8005ee2:	b508      	push	{r3, lr}
 8005ee4:	f000 fa50 	bl	8006388 <raise>
 8005ee8:	2001      	movs	r0, #1
 8005eea:	f7fb f945 	bl	8001178 <_exit>
	...

08005ef0 <__sflush_r>:
 8005ef0:	898a      	ldrh	r2, [r1, #12]
 8005ef2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ef4:	4605      	mov	r5, r0
 8005ef6:	0710      	lsls	r0, r2, #28
 8005ef8:	460c      	mov	r4, r1
 8005efa:	d457      	bmi.n	8005fac <__sflush_r+0xbc>
 8005efc:	684b      	ldr	r3, [r1, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	dc04      	bgt.n	8005f0c <__sflush_r+0x1c>
 8005f02:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	dc01      	bgt.n	8005f0c <__sflush_r+0x1c>
 8005f08:	2000      	movs	r0, #0
 8005f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f0e:	2e00      	cmp	r6, #0
 8005f10:	d0fa      	beq.n	8005f08 <__sflush_r+0x18>
 8005f12:	2300      	movs	r3, #0
 8005f14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f18:	682f      	ldr	r7, [r5, #0]
 8005f1a:	602b      	str	r3, [r5, #0]
 8005f1c:	d032      	beq.n	8005f84 <__sflush_r+0x94>
 8005f1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f20:	89a3      	ldrh	r3, [r4, #12]
 8005f22:	075a      	lsls	r2, r3, #29
 8005f24:	d505      	bpl.n	8005f32 <__sflush_r+0x42>
 8005f26:	6863      	ldr	r3, [r4, #4]
 8005f28:	1ac0      	subs	r0, r0, r3
 8005f2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f2c:	b10b      	cbz	r3, 8005f32 <__sflush_r+0x42>
 8005f2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f30:	1ac0      	subs	r0, r0, r3
 8005f32:	2300      	movs	r3, #0
 8005f34:	4602      	mov	r2, r0
 8005f36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f38:	4628      	mov	r0, r5
 8005f3a:	6a21      	ldr	r1, [r4, #32]
 8005f3c:	47b0      	blx	r6
 8005f3e:	1c43      	adds	r3, r0, #1
 8005f40:	89a3      	ldrh	r3, [r4, #12]
 8005f42:	d106      	bne.n	8005f52 <__sflush_r+0x62>
 8005f44:	6829      	ldr	r1, [r5, #0]
 8005f46:	291d      	cmp	r1, #29
 8005f48:	d82c      	bhi.n	8005fa4 <__sflush_r+0xb4>
 8005f4a:	4a29      	ldr	r2, [pc, #164]	; (8005ff0 <__sflush_r+0x100>)
 8005f4c:	40ca      	lsrs	r2, r1
 8005f4e:	07d6      	lsls	r6, r2, #31
 8005f50:	d528      	bpl.n	8005fa4 <__sflush_r+0xb4>
 8005f52:	2200      	movs	r2, #0
 8005f54:	6062      	str	r2, [r4, #4]
 8005f56:	6922      	ldr	r2, [r4, #16]
 8005f58:	04d9      	lsls	r1, r3, #19
 8005f5a:	6022      	str	r2, [r4, #0]
 8005f5c:	d504      	bpl.n	8005f68 <__sflush_r+0x78>
 8005f5e:	1c42      	adds	r2, r0, #1
 8005f60:	d101      	bne.n	8005f66 <__sflush_r+0x76>
 8005f62:	682b      	ldr	r3, [r5, #0]
 8005f64:	b903      	cbnz	r3, 8005f68 <__sflush_r+0x78>
 8005f66:	6560      	str	r0, [r4, #84]	; 0x54
 8005f68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f6a:	602f      	str	r7, [r5, #0]
 8005f6c:	2900      	cmp	r1, #0
 8005f6e:	d0cb      	beq.n	8005f08 <__sflush_r+0x18>
 8005f70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f74:	4299      	cmp	r1, r3
 8005f76:	d002      	beq.n	8005f7e <__sflush_r+0x8e>
 8005f78:	4628      	mov	r0, r5
 8005f7a:	f7ff faad 	bl	80054d8 <_free_r>
 8005f7e:	2000      	movs	r0, #0
 8005f80:	6360      	str	r0, [r4, #52]	; 0x34
 8005f82:	e7c2      	b.n	8005f0a <__sflush_r+0x1a>
 8005f84:	6a21      	ldr	r1, [r4, #32]
 8005f86:	2301      	movs	r3, #1
 8005f88:	4628      	mov	r0, r5
 8005f8a:	47b0      	blx	r6
 8005f8c:	1c41      	adds	r1, r0, #1
 8005f8e:	d1c7      	bne.n	8005f20 <__sflush_r+0x30>
 8005f90:	682b      	ldr	r3, [r5, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0c4      	beq.n	8005f20 <__sflush_r+0x30>
 8005f96:	2b1d      	cmp	r3, #29
 8005f98:	d001      	beq.n	8005f9e <__sflush_r+0xae>
 8005f9a:	2b16      	cmp	r3, #22
 8005f9c:	d101      	bne.n	8005fa2 <__sflush_r+0xb2>
 8005f9e:	602f      	str	r7, [r5, #0]
 8005fa0:	e7b2      	b.n	8005f08 <__sflush_r+0x18>
 8005fa2:	89a3      	ldrh	r3, [r4, #12]
 8005fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fa8:	81a3      	strh	r3, [r4, #12]
 8005faa:	e7ae      	b.n	8005f0a <__sflush_r+0x1a>
 8005fac:	690f      	ldr	r7, [r1, #16]
 8005fae:	2f00      	cmp	r7, #0
 8005fb0:	d0aa      	beq.n	8005f08 <__sflush_r+0x18>
 8005fb2:	0793      	lsls	r3, r2, #30
 8005fb4:	bf18      	it	ne
 8005fb6:	2300      	movne	r3, #0
 8005fb8:	680e      	ldr	r6, [r1, #0]
 8005fba:	bf08      	it	eq
 8005fbc:	694b      	ldreq	r3, [r1, #20]
 8005fbe:	1bf6      	subs	r6, r6, r7
 8005fc0:	600f      	str	r7, [r1, #0]
 8005fc2:	608b      	str	r3, [r1, #8]
 8005fc4:	2e00      	cmp	r6, #0
 8005fc6:	dd9f      	ble.n	8005f08 <__sflush_r+0x18>
 8005fc8:	4633      	mov	r3, r6
 8005fca:	463a      	mov	r2, r7
 8005fcc:	4628      	mov	r0, r5
 8005fce:	6a21      	ldr	r1, [r4, #32]
 8005fd0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005fd4:	47e0      	blx	ip
 8005fd6:	2800      	cmp	r0, #0
 8005fd8:	dc06      	bgt.n	8005fe8 <__sflush_r+0xf8>
 8005fda:	89a3      	ldrh	r3, [r4, #12]
 8005fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fe4:	81a3      	strh	r3, [r4, #12]
 8005fe6:	e790      	b.n	8005f0a <__sflush_r+0x1a>
 8005fe8:	4407      	add	r7, r0
 8005fea:	1a36      	subs	r6, r6, r0
 8005fec:	e7ea      	b.n	8005fc4 <__sflush_r+0xd4>
 8005fee:	bf00      	nop
 8005ff0:	20400001 	.word	0x20400001

08005ff4 <_fflush_r>:
 8005ff4:	b538      	push	{r3, r4, r5, lr}
 8005ff6:	690b      	ldr	r3, [r1, #16]
 8005ff8:	4605      	mov	r5, r0
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	b913      	cbnz	r3, 8006004 <_fflush_r+0x10>
 8005ffe:	2500      	movs	r5, #0
 8006000:	4628      	mov	r0, r5
 8006002:	bd38      	pop	{r3, r4, r5, pc}
 8006004:	b118      	cbz	r0, 800600e <_fflush_r+0x1a>
 8006006:	6983      	ldr	r3, [r0, #24]
 8006008:	b90b      	cbnz	r3, 800600e <_fflush_r+0x1a>
 800600a:	f000 f887 	bl	800611c <__sinit>
 800600e:	4b14      	ldr	r3, [pc, #80]	; (8006060 <_fflush_r+0x6c>)
 8006010:	429c      	cmp	r4, r3
 8006012:	d11b      	bne.n	800604c <_fflush_r+0x58>
 8006014:	686c      	ldr	r4, [r5, #4]
 8006016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0ef      	beq.n	8005ffe <_fflush_r+0xa>
 800601e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006020:	07d0      	lsls	r0, r2, #31
 8006022:	d404      	bmi.n	800602e <_fflush_r+0x3a>
 8006024:	0599      	lsls	r1, r3, #22
 8006026:	d402      	bmi.n	800602e <_fflush_r+0x3a>
 8006028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800602a:	f000 f915 	bl	8006258 <__retarget_lock_acquire_recursive>
 800602e:	4628      	mov	r0, r5
 8006030:	4621      	mov	r1, r4
 8006032:	f7ff ff5d 	bl	8005ef0 <__sflush_r>
 8006036:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006038:	4605      	mov	r5, r0
 800603a:	07da      	lsls	r2, r3, #31
 800603c:	d4e0      	bmi.n	8006000 <_fflush_r+0xc>
 800603e:	89a3      	ldrh	r3, [r4, #12]
 8006040:	059b      	lsls	r3, r3, #22
 8006042:	d4dd      	bmi.n	8006000 <_fflush_r+0xc>
 8006044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006046:	f000 f908 	bl	800625a <__retarget_lock_release_recursive>
 800604a:	e7d9      	b.n	8006000 <_fflush_r+0xc>
 800604c:	4b05      	ldr	r3, [pc, #20]	; (8006064 <_fflush_r+0x70>)
 800604e:	429c      	cmp	r4, r3
 8006050:	d101      	bne.n	8006056 <_fflush_r+0x62>
 8006052:	68ac      	ldr	r4, [r5, #8]
 8006054:	e7df      	b.n	8006016 <_fflush_r+0x22>
 8006056:	4b04      	ldr	r3, [pc, #16]	; (8006068 <_fflush_r+0x74>)
 8006058:	429c      	cmp	r4, r3
 800605a:	bf08      	it	eq
 800605c:	68ec      	ldreq	r4, [r5, #12]
 800605e:	e7da      	b.n	8006016 <_fflush_r+0x22>
 8006060:	08006904 	.word	0x08006904
 8006064:	08006924 	.word	0x08006924
 8006068:	080068e4 	.word	0x080068e4

0800606c <std>:
 800606c:	2300      	movs	r3, #0
 800606e:	b510      	push	{r4, lr}
 8006070:	4604      	mov	r4, r0
 8006072:	e9c0 3300 	strd	r3, r3, [r0]
 8006076:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800607a:	6083      	str	r3, [r0, #8]
 800607c:	8181      	strh	r1, [r0, #12]
 800607e:	6643      	str	r3, [r0, #100]	; 0x64
 8006080:	81c2      	strh	r2, [r0, #14]
 8006082:	6183      	str	r3, [r0, #24]
 8006084:	4619      	mov	r1, r3
 8006086:	2208      	movs	r2, #8
 8006088:	305c      	adds	r0, #92	; 0x5c
 800608a:	f7fd fb65 	bl	8003758 <memset>
 800608e:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <std+0x38>)
 8006090:	6224      	str	r4, [r4, #32]
 8006092:	6263      	str	r3, [r4, #36]	; 0x24
 8006094:	4b04      	ldr	r3, [pc, #16]	; (80060a8 <std+0x3c>)
 8006096:	62a3      	str	r3, [r4, #40]	; 0x28
 8006098:	4b04      	ldr	r3, [pc, #16]	; (80060ac <std+0x40>)
 800609a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800609c:	4b04      	ldr	r3, [pc, #16]	; (80060b0 <std+0x44>)
 800609e:	6323      	str	r3, [r4, #48]	; 0x30
 80060a0:	bd10      	pop	{r4, pc}
 80060a2:	bf00      	nop
 80060a4:	080063c1 	.word	0x080063c1
 80060a8:	080063e3 	.word	0x080063e3
 80060ac:	0800641b 	.word	0x0800641b
 80060b0:	0800643f 	.word	0x0800643f

080060b4 <_cleanup_r>:
 80060b4:	4901      	ldr	r1, [pc, #4]	; (80060bc <_cleanup_r+0x8>)
 80060b6:	f000 b8af 	b.w	8006218 <_fwalk_reent>
 80060ba:	bf00      	nop
 80060bc:	08005ff5 	.word	0x08005ff5

080060c0 <__sfmoreglue>:
 80060c0:	2268      	movs	r2, #104	; 0x68
 80060c2:	b570      	push	{r4, r5, r6, lr}
 80060c4:	1e4d      	subs	r5, r1, #1
 80060c6:	4355      	muls	r5, r2
 80060c8:	460e      	mov	r6, r1
 80060ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80060ce:	f7ff fa6b 	bl	80055a8 <_malloc_r>
 80060d2:	4604      	mov	r4, r0
 80060d4:	b140      	cbz	r0, 80060e8 <__sfmoreglue+0x28>
 80060d6:	2100      	movs	r1, #0
 80060d8:	e9c0 1600 	strd	r1, r6, [r0]
 80060dc:	300c      	adds	r0, #12
 80060de:	60a0      	str	r0, [r4, #8]
 80060e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80060e4:	f7fd fb38 	bl	8003758 <memset>
 80060e8:	4620      	mov	r0, r4
 80060ea:	bd70      	pop	{r4, r5, r6, pc}

080060ec <__sfp_lock_acquire>:
 80060ec:	4801      	ldr	r0, [pc, #4]	; (80060f4 <__sfp_lock_acquire+0x8>)
 80060ee:	f000 b8b3 	b.w	8006258 <__retarget_lock_acquire_recursive>
 80060f2:	bf00      	nop
 80060f4:	200002c5 	.word	0x200002c5

080060f8 <__sfp_lock_release>:
 80060f8:	4801      	ldr	r0, [pc, #4]	; (8006100 <__sfp_lock_release+0x8>)
 80060fa:	f000 b8ae 	b.w	800625a <__retarget_lock_release_recursive>
 80060fe:	bf00      	nop
 8006100:	200002c5 	.word	0x200002c5

08006104 <__sinit_lock_acquire>:
 8006104:	4801      	ldr	r0, [pc, #4]	; (800610c <__sinit_lock_acquire+0x8>)
 8006106:	f000 b8a7 	b.w	8006258 <__retarget_lock_acquire_recursive>
 800610a:	bf00      	nop
 800610c:	200002c6 	.word	0x200002c6

08006110 <__sinit_lock_release>:
 8006110:	4801      	ldr	r0, [pc, #4]	; (8006118 <__sinit_lock_release+0x8>)
 8006112:	f000 b8a2 	b.w	800625a <__retarget_lock_release_recursive>
 8006116:	bf00      	nop
 8006118:	200002c6 	.word	0x200002c6

0800611c <__sinit>:
 800611c:	b510      	push	{r4, lr}
 800611e:	4604      	mov	r4, r0
 8006120:	f7ff fff0 	bl	8006104 <__sinit_lock_acquire>
 8006124:	69a3      	ldr	r3, [r4, #24]
 8006126:	b11b      	cbz	r3, 8006130 <__sinit+0x14>
 8006128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800612c:	f7ff bff0 	b.w	8006110 <__sinit_lock_release>
 8006130:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006134:	6523      	str	r3, [r4, #80]	; 0x50
 8006136:	4b13      	ldr	r3, [pc, #76]	; (8006184 <__sinit+0x68>)
 8006138:	4a13      	ldr	r2, [pc, #76]	; (8006188 <__sinit+0x6c>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	62a2      	str	r2, [r4, #40]	; 0x28
 800613e:	42a3      	cmp	r3, r4
 8006140:	bf08      	it	eq
 8006142:	2301      	moveq	r3, #1
 8006144:	4620      	mov	r0, r4
 8006146:	bf08      	it	eq
 8006148:	61a3      	streq	r3, [r4, #24]
 800614a:	f000 f81f 	bl	800618c <__sfp>
 800614e:	6060      	str	r0, [r4, #4]
 8006150:	4620      	mov	r0, r4
 8006152:	f000 f81b 	bl	800618c <__sfp>
 8006156:	60a0      	str	r0, [r4, #8]
 8006158:	4620      	mov	r0, r4
 800615a:	f000 f817 	bl	800618c <__sfp>
 800615e:	2200      	movs	r2, #0
 8006160:	2104      	movs	r1, #4
 8006162:	60e0      	str	r0, [r4, #12]
 8006164:	6860      	ldr	r0, [r4, #4]
 8006166:	f7ff ff81 	bl	800606c <std>
 800616a:	2201      	movs	r2, #1
 800616c:	2109      	movs	r1, #9
 800616e:	68a0      	ldr	r0, [r4, #8]
 8006170:	f7ff ff7c 	bl	800606c <std>
 8006174:	2202      	movs	r2, #2
 8006176:	2112      	movs	r1, #18
 8006178:	68e0      	ldr	r0, [r4, #12]
 800617a:	f7ff ff77 	bl	800606c <std>
 800617e:	2301      	movs	r3, #1
 8006180:	61a3      	str	r3, [r4, #24]
 8006182:	e7d1      	b.n	8006128 <__sinit+0xc>
 8006184:	08006568 	.word	0x08006568
 8006188:	080060b5 	.word	0x080060b5

0800618c <__sfp>:
 800618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618e:	4607      	mov	r7, r0
 8006190:	f7ff ffac 	bl	80060ec <__sfp_lock_acquire>
 8006194:	4b1e      	ldr	r3, [pc, #120]	; (8006210 <__sfp+0x84>)
 8006196:	681e      	ldr	r6, [r3, #0]
 8006198:	69b3      	ldr	r3, [r6, #24]
 800619a:	b913      	cbnz	r3, 80061a2 <__sfp+0x16>
 800619c:	4630      	mov	r0, r6
 800619e:	f7ff ffbd 	bl	800611c <__sinit>
 80061a2:	3648      	adds	r6, #72	; 0x48
 80061a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80061a8:	3b01      	subs	r3, #1
 80061aa:	d503      	bpl.n	80061b4 <__sfp+0x28>
 80061ac:	6833      	ldr	r3, [r6, #0]
 80061ae:	b30b      	cbz	r3, 80061f4 <__sfp+0x68>
 80061b0:	6836      	ldr	r6, [r6, #0]
 80061b2:	e7f7      	b.n	80061a4 <__sfp+0x18>
 80061b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80061b8:	b9d5      	cbnz	r5, 80061f0 <__sfp+0x64>
 80061ba:	4b16      	ldr	r3, [pc, #88]	; (8006214 <__sfp+0x88>)
 80061bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80061c0:	60e3      	str	r3, [r4, #12]
 80061c2:	6665      	str	r5, [r4, #100]	; 0x64
 80061c4:	f000 f847 	bl	8006256 <__retarget_lock_init_recursive>
 80061c8:	f7ff ff96 	bl	80060f8 <__sfp_lock_release>
 80061cc:	2208      	movs	r2, #8
 80061ce:	4629      	mov	r1, r5
 80061d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80061d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80061d8:	6025      	str	r5, [r4, #0]
 80061da:	61a5      	str	r5, [r4, #24]
 80061dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061e0:	f7fd faba 	bl	8003758 <memset>
 80061e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061ec:	4620      	mov	r0, r4
 80061ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061f0:	3468      	adds	r4, #104	; 0x68
 80061f2:	e7d9      	b.n	80061a8 <__sfp+0x1c>
 80061f4:	2104      	movs	r1, #4
 80061f6:	4638      	mov	r0, r7
 80061f8:	f7ff ff62 	bl	80060c0 <__sfmoreglue>
 80061fc:	4604      	mov	r4, r0
 80061fe:	6030      	str	r0, [r6, #0]
 8006200:	2800      	cmp	r0, #0
 8006202:	d1d5      	bne.n	80061b0 <__sfp+0x24>
 8006204:	f7ff ff78 	bl	80060f8 <__sfp_lock_release>
 8006208:	230c      	movs	r3, #12
 800620a:	603b      	str	r3, [r7, #0]
 800620c:	e7ee      	b.n	80061ec <__sfp+0x60>
 800620e:	bf00      	nop
 8006210:	08006568 	.word	0x08006568
 8006214:	ffff0001 	.word	0xffff0001

08006218 <_fwalk_reent>:
 8006218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800621c:	4606      	mov	r6, r0
 800621e:	4688      	mov	r8, r1
 8006220:	2700      	movs	r7, #0
 8006222:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006226:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800622a:	f1b9 0901 	subs.w	r9, r9, #1
 800622e:	d505      	bpl.n	800623c <_fwalk_reent+0x24>
 8006230:	6824      	ldr	r4, [r4, #0]
 8006232:	2c00      	cmp	r4, #0
 8006234:	d1f7      	bne.n	8006226 <_fwalk_reent+0xe>
 8006236:	4638      	mov	r0, r7
 8006238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800623c:	89ab      	ldrh	r3, [r5, #12]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d907      	bls.n	8006252 <_fwalk_reent+0x3a>
 8006242:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006246:	3301      	adds	r3, #1
 8006248:	d003      	beq.n	8006252 <_fwalk_reent+0x3a>
 800624a:	4629      	mov	r1, r5
 800624c:	4630      	mov	r0, r6
 800624e:	47c0      	blx	r8
 8006250:	4307      	orrs	r7, r0
 8006252:	3568      	adds	r5, #104	; 0x68
 8006254:	e7e9      	b.n	800622a <_fwalk_reent+0x12>

08006256 <__retarget_lock_init_recursive>:
 8006256:	4770      	bx	lr

08006258 <__retarget_lock_acquire_recursive>:
 8006258:	4770      	bx	lr

0800625a <__retarget_lock_release_recursive>:
 800625a:	4770      	bx	lr

0800625c <__swhatbuf_r>:
 800625c:	b570      	push	{r4, r5, r6, lr}
 800625e:	460e      	mov	r6, r1
 8006260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006264:	4614      	mov	r4, r2
 8006266:	2900      	cmp	r1, #0
 8006268:	461d      	mov	r5, r3
 800626a:	b096      	sub	sp, #88	; 0x58
 800626c:	da08      	bge.n	8006280 <__swhatbuf_r+0x24>
 800626e:	2200      	movs	r2, #0
 8006270:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006274:	602a      	str	r2, [r5, #0]
 8006276:	061a      	lsls	r2, r3, #24
 8006278:	d410      	bmi.n	800629c <__swhatbuf_r+0x40>
 800627a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800627e:	e00e      	b.n	800629e <__swhatbuf_r+0x42>
 8006280:	466a      	mov	r2, sp
 8006282:	f000 f903 	bl	800648c <_fstat_r>
 8006286:	2800      	cmp	r0, #0
 8006288:	dbf1      	blt.n	800626e <__swhatbuf_r+0x12>
 800628a:	9a01      	ldr	r2, [sp, #4]
 800628c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006290:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006294:	425a      	negs	r2, r3
 8006296:	415a      	adcs	r2, r3
 8006298:	602a      	str	r2, [r5, #0]
 800629a:	e7ee      	b.n	800627a <__swhatbuf_r+0x1e>
 800629c:	2340      	movs	r3, #64	; 0x40
 800629e:	2000      	movs	r0, #0
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	b016      	add	sp, #88	; 0x58
 80062a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080062a8 <__smakebuf_r>:
 80062a8:	898b      	ldrh	r3, [r1, #12]
 80062aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062ac:	079d      	lsls	r5, r3, #30
 80062ae:	4606      	mov	r6, r0
 80062b0:	460c      	mov	r4, r1
 80062b2:	d507      	bpl.n	80062c4 <__smakebuf_r+0x1c>
 80062b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	6123      	str	r3, [r4, #16]
 80062bc:	2301      	movs	r3, #1
 80062be:	6163      	str	r3, [r4, #20]
 80062c0:	b002      	add	sp, #8
 80062c2:	bd70      	pop	{r4, r5, r6, pc}
 80062c4:	466a      	mov	r2, sp
 80062c6:	ab01      	add	r3, sp, #4
 80062c8:	f7ff ffc8 	bl	800625c <__swhatbuf_r>
 80062cc:	9900      	ldr	r1, [sp, #0]
 80062ce:	4605      	mov	r5, r0
 80062d0:	4630      	mov	r0, r6
 80062d2:	f7ff f969 	bl	80055a8 <_malloc_r>
 80062d6:	b948      	cbnz	r0, 80062ec <__smakebuf_r+0x44>
 80062d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062dc:	059a      	lsls	r2, r3, #22
 80062de:	d4ef      	bmi.n	80062c0 <__smakebuf_r+0x18>
 80062e0:	f023 0303 	bic.w	r3, r3, #3
 80062e4:	f043 0302 	orr.w	r3, r3, #2
 80062e8:	81a3      	strh	r3, [r4, #12]
 80062ea:	e7e3      	b.n	80062b4 <__smakebuf_r+0xc>
 80062ec:	4b0d      	ldr	r3, [pc, #52]	; (8006324 <__smakebuf_r+0x7c>)
 80062ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80062f0:	89a3      	ldrh	r3, [r4, #12]
 80062f2:	6020      	str	r0, [r4, #0]
 80062f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062f8:	81a3      	strh	r3, [r4, #12]
 80062fa:	9b00      	ldr	r3, [sp, #0]
 80062fc:	6120      	str	r0, [r4, #16]
 80062fe:	6163      	str	r3, [r4, #20]
 8006300:	9b01      	ldr	r3, [sp, #4]
 8006302:	b15b      	cbz	r3, 800631c <__smakebuf_r+0x74>
 8006304:	4630      	mov	r0, r6
 8006306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800630a:	f000 f8d1 	bl	80064b0 <_isatty_r>
 800630e:	b128      	cbz	r0, 800631c <__smakebuf_r+0x74>
 8006310:	89a3      	ldrh	r3, [r4, #12]
 8006312:	f023 0303 	bic.w	r3, r3, #3
 8006316:	f043 0301 	orr.w	r3, r3, #1
 800631a:	81a3      	strh	r3, [r4, #12]
 800631c:	89a0      	ldrh	r0, [r4, #12]
 800631e:	4305      	orrs	r5, r0
 8006320:	81a5      	strh	r5, [r4, #12]
 8006322:	e7cd      	b.n	80062c0 <__smakebuf_r+0x18>
 8006324:	080060b5 	.word	0x080060b5

08006328 <_malloc_usable_size_r>:
 8006328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800632c:	1f18      	subs	r0, r3, #4
 800632e:	2b00      	cmp	r3, #0
 8006330:	bfbc      	itt	lt
 8006332:	580b      	ldrlt	r3, [r1, r0]
 8006334:	18c0      	addlt	r0, r0, r3
 8006336:	4770      	bx	lr

08006338 <_raise_r>:
 8006338:	291f      	cmp	r1, #31
 800633a:	b538      	push	{r3, r4, r5, lr}
 800633c:	4604      	mov	r4, r0
 800633e:	460d      	mov	r5, r1
 8006340:	d904      	bls.n	800634c <_raise_r+0x14>
 8006342:	2316      	movs	r3, #22
 8006344:	6003      	str	r3, [r0, #0]
 8006346:	f04f 30ff 	mov.w	r0, #4294967295
 800634a:	bd38      	pop	{r3, r4, r5, pc}
 800634c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800634e:	b112      	cbz	r2, 8006356 <_raise_r+0x1e>
 8006350:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006354:	b94b      	cbnz	r3, 800636a <_raise_r+0x32>
 8006356:	4620      	mov	r0, r4
 8006358:	f000 f830 	bl	80063bc <_getpid_r>
 800635c:	462a      	mov	r2, r5
 800635e:	4601      	mov	r1, r0
 8006360:	4620      	mov	r0, r4
 8006362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006366:	f000 b817 	b.w	8006398 <_kill_r>
 800636a:	2b01      	cmp	r3, #1
 800636c:	d00a      	beq.n	8006384 <_raise_r+0x4c>
 800636e:	1c59      	adds	r1, r3, #1
 8006370:	d103      	bne.n	800637a <_raise_r+0x42>
 8006372:	2316      	movs	r3, #22
 8006374:	6003      	str	r3, [r0, #0]
 8006376:	2001      	movs	r0, #1
 8006378:	e7e7      	b.n	800634a <_raise_r+0x12>
 800637a:	2400      	movs	r4, #0
 800637c:	4628      	mov	r0, r5
 800637e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006382:	4798      	blx	r3
 8006384:	2000      	movs	r0, #0
 8006386:	e7e0      	b.n	800634a <_raise_r+0x12>

08006388 <raise>:
 8006388:	4b02      	ldr	r3, [pc, #8]	; (8006394 <raise+0xc>)
 800638a:	4601      	mov	r1, r0
 800638c:	6818      	ldr	r0, [r3, #0]
 800638e:	f7ff bfd3 	b.w	8006338 <_raise_r>
 8006392:	bf00      	nop
 8006394:	2000000c 	.word	0x2000000c

08006398 <_kill_r>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	2300      	movs	r3, #0
 800639c:	4d06      	ldr	r5, [pc, #24]	; (80063b8 <_kill_r+0x20>)
 800639e:	4604      	mov	r4, r0
 80063a0:	4608      	mov	r0, r1
 80063a2:	4611      	mov	r1, r2
 80063a4:	602b      	str	r3, [r5, #0]
 80063a6:	f7fa fed7 	bl	8001158 <_kill>
 80063aa:	1c43      	adds	r3, r0, #1
 80063ac:	d102      	bne.n	80063b4 <_kill_r+0x1c>
 80063ae:	682b      	ldr	r3, [r5, #0]
 80063b0:	b103      	cbz	r3, 80063b4 <_kill_r+0x1c>
 80063b2:	6023      	str	r3, [r4, #0]
 80063b4:	bd38      	pop	{r3, r4, r5, pc}
 80063b6:	bf00      	nop
 80063b8:	200002c0 	.word	0x200002c0

080063bc <_getpid_r>:
 80063bc:	f7fa bec5 	b.w	800114a <_getpid>

080063c0 <__sread>:
 80063c0:	b510      	push	{r4, lr}
 80063c2:	460c      	mov	r4, r1
 80063c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c8:	f000 f894 	bl	80064f4 <_read_r>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	bfab      	itete	ge
 80063d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80063d2:	89a3      	ldrhlt	r3, [r4, #12]
 80063d4:	181b      	addge	r3, r3, r0
 80063d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80063da:	bfac      	ite	ge
 80063dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80063de:	81a3      	strhlt	r3, [r4, #12]
 80063e0:	bd10      	pop	{r4, pc}

080063e2 <__swrite>:
 80063e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063e6:	461f      	mov	r7, r3
 80063e8:	898b      	ldrh	r3, [r1, #12]
 80063ea:	4605      	mov	r5, r0
 80063ec:	05db      	lsls	r3, r3, #23
 80063ee:	460c      	mov	r4, r1
 80063f0:	4616      	mov	r6, r2
 80063f2:	d505      	bpl.n	8006400 <__swrite+0x1e>
 80063f4:	2302      	movs	r3, #2
 80063f6:	2200      	movs	r2, #0
 80063f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063fc:	f000 f868 	bl	80064d0 <_lseek_r>
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	4632      	mov	r2, r6
 8006404:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006408:	81a3      	strh	r3, [r4, #12]
 800640a:	4628      	mov	r0, r5
 800640c:	463b      	mov	r3, r7
 800640e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006416:	f000 b817 	b.w	8006448 <_write_r>

0800641a <__sseek>:
 800641a:	b510      	push	{r4, lr}
 800641c:	460c      	mov	r4, r1
 800641e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006422:	f000 f855 	bl	80064d0 <_lseek_r>
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	bf15      	itete	ne
 800642c:	6560      	strne	r0, [r4, #84]	; 0x54
 800642e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006432:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006436:	81a3      	strheq	r3, [r4, #12]
 8006438:	bf18      	it	ne
 800643a:	81a3      	strhne	r3, [r4, #12]
 800643c:	bd10      	pop	{r4, pc}

0800643e <__sclose>:
 800643e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006442:	f000 b813 	b.w	800646c <_close_r>
	...

08006448 <_write_r>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	4604      	mov	r4, r0
 800644c:	4608      	mov	r0, r1
 800644e:	4611      	mov	r1, r2
 8006450:	2200      	movs	r2, #0
 8006452:	4d05      	ldr	r5, [pc, #20]	; (8006468 <_write_r+0x20>)
 8006454:	602a      	str	r2, [r5, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	f7fa feb5 	bl	80011c6 <_write>
 800645c:	1c43      	adds	r3, r0, #1
 800645e:	d102      	bne.n	8006466 <_write_r+0x1e>
 8006460:	682b      	ldr	r3, [r5, #0]
 8006462:	b103      	cbz	r3, 8006466 <_write_r+0x1e>
 8006464:	6023      	str	r3, [r4, #0]
 8006466:	bd38      	pop	{r3, r4, r5, pc}
 8006468:	200002c0 	.word	0x200002c0

0800646c <_close_r>:
 800646c:	b538      	push	{r3, r4, r5, lr}
 800646e:	2300      	movs	r3, #0
 8006470:	4d05      	ldr	r5, [pc, #20]	; (8006488 <_close_r+0x1c>)
 8006472:	4604      	mov	r4, r0
 8006474:	4608      	mov	r0, r1
 8006476:	602b      	str	r3, [r5, #0]
 8006478:	f7fa fec1 	bl	80011fe <_close>
 800647c:	1c43      	adds	r3, r0, #1
 800647e:	d102      	bne.n	8006486 <_close_r+0x1a>
 8006480:	682b      	ldr	r3, [r5, #0]
 8006482:	b103      	cbz	r3, 8006486 <_close_r+0x1a>
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	bd38      	pop	{r3, r4, r5, pc}
 8006488:	200002c0 	.word	0x200002c0

0800648c <_fstat_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	2300      	movs	r3, #0
 8006490:	4d06      	ldr	r5, [pc, #24]	; (80064ac <_fstat_r+0x20>)
 8006492:	4604      	mov	r4, r0
 8006494:	4608      	mov	r0, r1
 8006496:	4611      	mov	r1, r2
 8006498:	602b      	str	r3, [r5, #0]
 800649a:	f7fa febb 	bl	8001214 <_fstat>
 800649e:	1c43      	adds	r3, r0, #1
 80064a0:	d102      	bne.n	80064a8 <_fstat_r+0x1c>
 80064a2:	682b      	ldr	r3, [r5, #0]
 80064a4:	b103      	cbz	r3, 80064a8 <_fstat_r+0x1c>
 80064a6:	6023      	str	r3, [r4, #0]
 80064a8:	bd38      	pop	{r3, r4, r5, pc}
 80064aa:	bf00      	nop
 80064ac:	200002c0 	.word	0x200002c0

080064b0 <_isatty_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	2300      	movs	r3, #0
 80064b4:	4d05      	ldr	r5, [pc, #20]	; (80064cc <_isatty_r+0x1c>)
 80064b6:	4604      	mov	r4, r0
 80064b8:	4608      	mov	r0, r1
 80064ba:	602b      	str	r3, [r5, #0]
 80064bc:	f7fa feb9 	bl	8001232 <_isatty>
 80064c0:	1c43      	adds	r3, r0, #1
 80064c2:	d102      	bne.n	80064ca <_isatty_r+0x1a>
 80064c4:	682b      	ldr	r3, [r5, #0]
 80064c6:	b103      	cbz	r3, 80064ca <_isatty_r+0x1a>
 80064c8:	6023      	str	r3, [r4, #0]
 80064ca:	bd38      	pop	{r3, r4, r5, pc}
 80064cc:	200002c0 	.word	0x200002c0

080064d0 <_lseek_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	4604      	mov	r4, r0
 80064d4:	4608      	mov	r0, r1
 80064d6:	4611      	mov	r1, r2
 80064d8:	2200      	movs	r2, #0
 80064da:	4d05      	ldr	r5, [pc, #20]	; (80064f0 <_lseek_r+0x20>)
 80064dc:	602a      	str	r2, [r5, #0]
 80064de:	461a      	mov	r2, r3
 80064e0:	f7fa feb1 	bl	8001246 <_lseek>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d102      	bne.n	80064ee <_lseek_r+0x1e>
 80064e8:	682b      	ldr	r3, [r5, #0]
 80064ea:	b103      	cbz	r3, 80064ee <_lseek_r+0x1e>
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	bd38      	pop	{r3, r4, r5, pc}
 80064f0:	200002c0 	.word	0x200002c0

080064f4 <_read_r>:
 80064f4:	b538      	push	{r3, r4, r5, lr}
 80064f6:	4604      	mov	r4, r0
 80064f8:	4608      	mov	r0, r1
 80064fa:	4611      	mov	r1, r2
 80064fc:	2200      	movs	r2, #0
 80064fe:	4d05      	ldr	r5, [pc, #20]	; (8006514 <_read_r+0x20>)
 8006500:	602a      	str	r2, [r5, #0]
 8006502:	461a      	mov	r2, r3
 8006504:	f7fa fe42 	bl	800118c <_read>
 8006508:	1c43      	adds	r3, r0, #1
 800650a:	d102      	bne.n	8006512 <_read_r+0x1e>
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	b103      	cbz	r3, 8006512 <_read_r+0x1e>
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	bd38      	pop	{r3, r4, r5, pc}
 8006514:	200002c0 	.word	0x200002c0

08006518 <_init>:
 8006518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800651a:	bf00      	nop
 800651c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800651e:	bc08      	pop	{r3}
 8006520:	469e      	mov	lr, r3
 8006522:	4770      	bx	lr

08006524 <_fini>:
 8006524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006526:	bf00      	nop
 8006528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800652a:	bc08      	pop	{r3}
 800652c:	469e      	mov	lr, r3
 800652e:	4770      	bx	lr
