
CodeDoNhietDo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a60  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08007b70  08007b70  00017b70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008004  08008004  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08008004  08008004  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008004  08008004  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008004  08008004  00018004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008008  08008008  00018008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800800c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  200001e8  080081f4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  080081f4  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000e823  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0000b2ea  00000000  00000000  0002ea34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002420  00000000  00000000  00039d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  0003c140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00086800  00000000  00000000  0003cd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000af0  00000000  00000000  000c3510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00018fc2  00000000  00000000  000c4000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dcfc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041e8  00000000  00000000  000dd014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007b58 	.word	0x08007b58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08007b58 	.word	0x08007b58

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800111c:	480c      	ldr	r0, [pc, #48]	; (8001150 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800111e:	490d      	ldr	r1, [pc, #52]	; (8001154 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001124:	e002      	b.n	800112c <LoopCopyDataInit>

08001126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112a:	3304      	adds	r3, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800112c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001130:	d3f9      	bcc.n	8001126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001134:	4c0a      	ldr	r4, [pc, #40]	; (8001160 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001138:	e001      	b.n	800113e <LoopFillZerobss>

0800113a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800113c:	3204      	adds	r2, #4

0800113e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001140:	d3fb      	bcc.n	800113a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001142:	f000 fdcd 	bl	8001ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001146:	f003 fe01 	bl	8004d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800114a:	f000 fa77 	bl	800163c <main>
  bx lr
 800114e:	4770      	bx	lr
  ldr r0, =_sdata
 8001150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001154:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001158:	0800800c 	.word	0x0800800c
  ldr r2, =_sbss
 800115c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001160:	2000032c 	.word	0x2000032c

08001164 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC1_2_IRQHandler>
	...

08001168 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117c:	4b45      	ldr	r3, [pc, #276]	; (8001294 <MX_GPIO_Init+0x12c>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	4a44      	ldr	r2, [pc, #272]	; (8001294 <MX_GPIO_Init+0x12c>)
 8001182:	f043 0310 	orr.w	r3, r3, #16
 8001186:	6193      	str	r3, [r2, #24]
 8001188:	4b42      	ldr	r3, [pc, #264]	; (8001294 <MX_GPIO_Init+0x12c>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f003 0310 	and.w	r3, r3, #16
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001194:	4b3f      	ldr	r3, [pc, #252]	; (8001294 <MX_GPIO_Init+0x12c>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a3e      	ldr	r2, [pc, #248]	; (8001294 <MX_GPIO_Init+0x12c>)
 800119a:	f043 0320 	orr.w	r3, r3, #32
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b3c      	ldr	r3, [pc, #240]	; (8001294 <MX_GPIO_Init+0x12c>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f003 0320 	and.w	r3, r3, #32
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b39      	ldr	r3, [pc, #228]	; (8001294 <MX_GPIO_Init+0x12c>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a38      	ldr	r2, [pc, #224]	; (8001294 <MX_GPIO_Init+0x12c>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b36      	ldr	r3, [pc, #216]	; (8001294 <MX_GPIO_Init+0x12c>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c4:	4b33      	ldr	r3, [pc, #204]	; (8001294 <MX_GPIO_Init+0x12c>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a32      	ldr	r2, [pc, #200]	; (8001294 <MX_GPIO_Init+0x12c>)
 80011ca:	f043 0308 	orr.w	r3, r3, #8
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b30      	ldr	r3, [pc, #192]	; (8001294 <MX_GPIO_Init+0x12c>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0308 	and.w	r3, r3, #8
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STT_GPIO_Port, LED_STT_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e2:	482d      	ldr	r0, [pc, #180]	; (8001298 <MX_GPIO_Init+0x130>)
 80011e4:	f001 fc99 	bl	8002b1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin|RL4_Pin|RL3_Pin
 80011e8:	2200      	movs	r2, #0
 80011ea:	f64c 4140 	movw	r1, #52288	; 0xcc40
 80011ee:	482b      	ldr	r0, [pc, #172]	; (800129c <MX_GPIO_Init+0x134>)
 80011f0:	f001 fc93 	bl	8002b1a <HAL_GPIO_WritePin>
                          |RL1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RL2_GPIO_Port, RL2_Pin, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011fa:	4829      	ldr	r0, [pc, #164]	; (80012a0 <MX_GPIO_Init+0x138>)
 80011fc:	f001 fc8d 	bl	8002b1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_STT_Pin;
 8001200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001204:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2302      	movs	r3, #2
 8001210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_STT_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	4619      	mov	r1, r3
 8001218:	481f      	ldr	r0, [pc, #124]	; (8001298 <MX_GPIO_Init+0x130>)
 800121a:	f001 fae3 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TC2_Pin|TC1_Pin|BTN_OK_Pin|BTN_UP_Pin;
 800121e:	231b      	movs	r3, #27
 8001220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	4619      	mov	r1, r3
 8001230:	481a      	ldr	r0, [pc, #104]	; (800129c <MX_GPIO_Init+0x134>)
 8001232:	f001 fad7 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|RL4_Pin|RL3_Pin
 8001236:	f64c 4340 	movw	r3, #52288	; 0xcc40
 800123a:	613b      	str	r3, [r7, #16]
                          |RL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2302      	movs	r3, #2
 8001246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	4619      	mov	r1, r3
 800124e:	4813      	ldr	r0, [pc, #76]	; (800129c <MX_GPIO_Init+0x134>)
 8001250:	f001 fac8 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RL2_Pin;
 8001254:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001258:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2302      	movs	r3, #2
 8001264:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RL2_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 0310 	add.w	r3, r7, #16
 800126a:	4619      	mov	r1, r3
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <MX_GPIO_Init+0x138>)
 800126e:	f001 fab9 	bl	80027e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_DOWN_Pin;
 8001272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001276:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_DOWN_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	4619      	mov	r1, r3
 8001286:	4806      	ldr	r0, [pc, #24]	; (80012a0 <MX_GPIO_Init+0x138>)
 8001288:	f001 faac 	bl	80027e4 <HAL_GPIO_Init>

}
 800128c:	bf00      	nop
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40021000 	.word	0x40021000
 8001298:	40011000 	.word	0x40011000
 800129c:	40010c00 	.word	0x40010c00
 80012a0:	40010800 	.word	0x40010800

080012a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012aa:	4a13      	ldr	r2, [pc, #76]	; (80012f8 <MX_I2C1_Init+0x54>)
 80012ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012b0:	4a12      	ldr	r2, [pc, #72]	; (80012fc <MX_I2C1_Init+0x58>)
 80012b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e0:	4804      	ldr	r0, [pc, #16]	; (80012f4 <MX_I2C1_Init+0x50>)
 80012e2:	f001 fc4b 	bl	8002b7c <HAL_I2C_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012ec:	f000 fbcf 	bl	8001a8e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000204 	.word	0x20000204
 80012f8:	40005400 	.word	0x40005400
 80012fc:	000186a0 	.word	0x000186a0

08001300 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a1d      	ldr	r2, [pc, #116]	; (8001390 <HAL_I2C_MspInit+0x90>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d132      	bne.n	8001386 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001320:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <HAL_I2C_MspInit+0x94>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a1b      	ldr	r2, [pc, #108]	; (8001394 <HAL_I2C_MspInit+0x94>)
 8001326:	f043 0308 	orr.w	r3, r3, #8
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b19      	ldr	r3, [pc, #100]	; (8001394 <HAL_I2C_MspInit+0x94>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001338:	f44f 7340 	mov.w	r3, #768	; 0x300
 800133c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800133e:	2312      	movs	r3, #18
 8001340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001342:	2303      	movs	r3, #3
 8001344:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4812      	ldr	r0, [pc, #72]	; (8001398 <HAL_I2C_MspInit+0x98>)
 800134e:	f001 fa49 	bl	80027e4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_I2C_MspInit+0x9c>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	f043 0302 	orr.w	r3, r3, #2
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
 8001368:	4a0c      	ldr	r2, [pc, #48]	; (800139c <HAL_I2C_MspInit+0x9c>)
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <HAL_I2C_MspInit+0x94>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a08      	ldr	r2, [pc, #32]	; (8001394 <HAL_I2C_MspInit+0x94>)
 8001374:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001378:	61d3      	str	r3, [r2, #28]
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <HAL_I2C_MspInit+0x94>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001386:	bf00      	nop
 8001388:	3728      	adds	r7, #40	; 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40005400 	.word	0x40005400
 8001394:	40021000 	.word	0x40021000
 8001398:	40010c00 	.word	0x40010c00
 800139c:	40010000 	.word	0x40010000

080013a0 <delay_user>:
float nhiet_do=0;

void delay_user(int t);

void delay_user(int t)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
	while(t>0)
 80013a8:	e039      	b.n	800141e <delay_user+0x7e>
	{
		t--;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	607b      	str	r3, [r7, #4]
		HAL_Delay(1);
 80013b0:	2001      	movs	r0, #1
 80013b2:	f001 f835 	bl	8002420 <HAL_Delay>
		if(!ReadTC2)
 80013b6:	2102      	movs	r1, #2
 80013b8:	481d      	ldr	r0, [pc, #116]	; (8001430 <delay_user+0x90>)
 80013ba:	f001 fb97 	bl	8002aec <HAL_GPIO_ReadPin>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d109      	bne.n	80013d8 <delay_user+0x38>
		{
		  RL4(ON);
 80013c4:	2201      	movs	r2, #1
 80013c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ca:	4819      	ldr	r0, [pc, #100]	; (8001430 <delay_user+0x90>)
 80013cc:	f001 fba5 	bl	8002b1a <HAL_GPIO_WritePin>
		  HAL_Delay(50);
 80013d0:	2032      	movs	r0, #50	; 0x32
 80013d2:	f001 f825 	bl	8002420 <HAL_Delay>
 80013d6:	e005      	b.n	80013e4 <delay_user+0x44>
		}
		else RL4(OFF);
 80013d8:	2200      	movs	r2, #0
 80013da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013de:	4814      	ldr	r0, [pc, #80]	; (8001430 <delay_user+0x90>)
 80013e0:	f001 fb9b 	bl	8002b1a <HAL_GPIO_WritePin>
		if(!(ReadTC1)) break;
 80013e4:	2101      	movs	r1, #1
 80013e6:	4812      	ldr	r0, [pc, #72]	; (8001430 <delay_user+0x90>)
 80013e8:	f001 fb80 	bl	8002aec <HAL_GPIO_ReadPin>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d019      	beq.n	8001426 <delay_user+0x86>
		else if(ReadBtnDown || ReadBtnOk || ReadBtnUp) break;
 80013f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013f6:	480f      	ldr	r0, [pc, #60]	; (8001434 <delay_user+0x94>)
 80013f8:	f001 fb78 	bl	8002aec <HAL_GPIO_ReadPin>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d112      	bne.n	8001428 <delay_user+0x88>
 8001402:	2108      	movs	r1, #8
 8001404:	480a      	ldr	r0, [pc, #40]	; (8001430 <delay_user+0x90>)
 8001406:	f001 fb71 	bl	8002aec <HAL_GPIO_ReadPin>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d10b      	bne.n	8001428 <delay_user+0x88>
 8001410:	2110      	movs	r1, #16
 8001412:	4807      	ldr	r0, [pc, #28]	; (8001430 <delay_user+0x90>)
 8001414:	f001 fb6a 	bl	8002aec <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d104      	bne.n	8001428 <delay_user+0x88>
	while(t>0)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	dcc2      	bgt.n	80013aa <delay_user+0xa>
	}
}
 8001424:	e000      	b.n	8001428 <delay_user+0x88>
		if(!(ReadTC1)) break;
 8001426:	bf00      	nop
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40010c00 	.word	0x40010c00
 8001434:	40010800 	.word	0x40010800

08001438 <phatAmThanhNhietDo>:

void phatAmThanhNhietDo(float t);
void phatAmThanhNhietDo(float t)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	float t_temp=t*100;
 8001440:	4933      	ldr	r1, [pc, #204]	; (8001510 <phatAmThanhNhietDo+0xd8>)
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fc7e 	bl	8000d44 <__aeabi_fmul>
 8001448:	4603      	mov	r3, r0
 800144a:	60fb      	str	r3, [r7, #12]
	DFPLAYER_PlayFileInFolder(&MP3,F_01,nhietDoLa); HAL_Delay(2000); //phay
 800144c:	2201      	movs	r2, #1
 800144e:	2101      	movs	r1, #1
 8001450:	4830      	ldr	r0, [pc, #192]	; (8001514 <phatAmThanhNhietDo+0xdc>)
 8001452:	f000 fdf5 	bl	8002040 <DFPLAYER_PlayFileInFolder>
 8001456:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800145a:	f000 ffe1 	bl	8002420 <HAL_Delay>
	mapSound((int)t_temp/1000%10, 1200);
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f7ff fe36 	bl	80010d0 <__aeabi_f2iz>
 8001464:	4603      	mov	r3, r0
 8001466:	4a2c      	ldr	r2, [pc, #176]	; (8001518 <phatAmThanhNhietDo+0xe0>)
 8001468:	fb82 1203 	smull	r1, r2, r2, r3
 800146c:	1192      	asrs	r2, r2, #6
 800146e:	17db      	asrs	r3, r3, #31
 8001470:	1ad2      	subs	r2, r2, r3
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <phatAmThanhNhietDo+0xe4>)
 8001474:	fb83 1302 	smull	r1, r3, r3, r2
 8001478:	1099      	asrs	r1, r3, #2
 800147a:	17d3      	asrs	r3, r2, #31
 800147c:	1ac8      	subs	r0, r1, r3
 800147e:	4603      	mov	r3, r0
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4403      	add	r3, r0
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	1ad0      	subs	r0, r2, r3
 8001488:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800148c:	f000 f84a 	bl	8001524 <mapSound>
	mapSound((int)t_temp/100%10, 1000);
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f7ff fe1d 	bl	80010d0 <__aeabi_f2iz>
 8001496:	4603      	mov	r3, r0
 8001498:	4a21      	ldr	r2, [pc, #132]	; (8001520 <phatAmThanhNhietDo+0xe8>)
 800149a:	fb82 1203 	smull	r1, r2, r2, r3
 800149e:	1152      	asrs	r2, r2, #5
 80014a0:	17db      	asrs	r3, r3, #31
 80014a2:	1ad2      	subs	r2, r2, r3
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <phatAmThanhNhietDo+0xe4>)
 80014a6:	fb83 1302 	smull	r1, r3, r3, r2
 80014aa:	1099      	asrs	r1, r3, #2
 80014ac:	17d3      	asrs	r3, r2, #31
 80014ae:	1ac8      	subs	r0, r1, r3
 80014b0:	4603      	mov	r3, r0
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4403      	add	r3, r0
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	1ad0      	subs	r0, r2, r3
 80014ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014be:	f000 f831 	bl	8001524 <mapSound>
	DFPLAYER_PlayFileInFolder(&MP3,F_01,phay); HAL_Delay(1000); //phay
 80014c2:	2200      	movs	r2, #0
 80014c4:	2101      	movs	r1, #1
 80014c6:	4813      	ldr	r0, [pc, #76]	; (8001514 <phatAmThanhNhietDo+0xdc>)
 80014c8:	f000 fdba 	bl	8002040 <DFPLAYER_PlayFileInFolder>
 80014cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d0:	f000 ffa6 	bl	8002420 <HAL_Delay>
	mapSound((int)t_temp/10%10, 1000);
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f7ff fdfb 	bl	80010d0 <__aeabi_f2iz>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a0f      	ldr	r2, [pc, #60]	; (800151c <phatAmThanhNhietDo+0xe4>)
 80014de:	fb82 1203 	smull	r1, r2, r2, r3
 80014e2:	1092      	asrs	r2, r2, #2
 80014e4:	17db      	asrs	r3, r3, #31
 80014e6:	1ad2      	subs	r2, r2, r3
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <phatAmThanhNhietDo+0xe4>)
 80014ea:	fb83 1302 	smull	r1, r3, r3, r2
 80014ee:	1099      	asrs	r1, r3, #2
 80014f0:	17d3      	asrs	r3, r2, #31
 80014f2:	1ac8      	subs	r0, r1, r3
 80014f4:	4603      	mov	r3, r0
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4403      	add	r3, r0
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	1ad0      	subs	r0, r2, r3
 80014fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001502:	f000 f80f 	bl	8001524 <mapSound>
	//mapSound(t_temp%10, 1000);
}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	42c80000 	.word	0x42c80000
 8001514:	20000278 	.word	0x20000278
 8001518:	10624dd3 	.word	0x10624dd3
 800151c:	66666667 	.word	0x66666667
 8001520:	51eb851f 	.word	0x51eb851f

08001524 <mapSound>:

void mapSound(int p,int t);
void mapSound(int p,int t)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
	switch(p)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b09      	cmp	r3, #9
 8001532:	d87b      	bhi.n	800162c <mapSound+0x108>
 8001534:	a201      	add	r2, pc, #4	; (adr r2, 800153c <mapSound+0x18>)
 8001536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153a:	bf00      	nop
 800153c:	08001565 	.word	0x08001565
 8001540:	08001579 	.word	0x08001579
 8001544:	0800158d 	.word	0x0800158d
 8001548:	080015a1 	.word	0x080015a1
 800154c:	080015b5 	.word	0x080015b5
 8001550:	080015c9 	.word	0x080015c9
 8001554:	080015dd 	.word	0x080015dd
 8001558:	080015f1 	.word	0x080015f1
 800155c:	08001605 	.word	0x08001605
 8001560:	08001619 	.word	0x08001619
	{
		case 0: DFPLAYER_PlayFileInFolder(&MP3,F_00,mp3_00); HAL_Delay(t); break;
 8001564:	2200      	movs	r2, #0
 8001566:	2100      	movs	r1, #0
 8001568:	4833      	ldr	r0, [pc, #204]	; (8001638 <mapSound+0x114>)
 800156a:	f000 fd69 	bl	8002040 <DFPLAYER_PlayFileInFolder>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f000 ff55 	bl	8002420 <HAL_Delay>
 8001576:	e05a      	b.n	800162e <mapSound+0x10a>
		case 1: DFPLAYER_PlayFileInFolder(&MP3,F_00,mp3_01); HAL_Delay(t); break;
 8001578:	2201      	movs	r2, #1
 800157a:	2100      	movs	r1, #0
 800157c:	482e      	ldr	r0, [pc, #184]	; (8001638 <mapSound+0x114>)
 800157e:	f000 fd5f 	bl	8002040 <DFPLAYER_PlayFileInFolder>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f000 ff4b 	bl	8002420 <HAL_Delay>
 800158a:	e050      	b.n	800162e <mapSound+0x10a>
		case 2: DFPLAYER_PlayFileInFolder(&MP3,F_00,mp3_02); HAL_Delay(t); break;
 800158c:	2202      	movs	r2, #2
 800158e:	2100      	movs	r1, #0
 8001590:	4829      	ldr	r0, [pc, #164]	; (8001638 <mapSound+0x114>)
 8001592:	f000 fd55 	bl	8002040 <DFPLAYER_PlayFileInFolder>
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f000 ff41 	bl	8002420 <HAL_Delay>
 800159e:	e046      	b.n	800162e <mapSound+0x10a>
		case 3: DFPLAYER_PlayFileInFolder(&MP3,F_00,mp3_03); HAL_Delay(t); break;
 80015a0:	2203      	movs	r2, #3
 80015a2:	2100      	movs	r1, #0
 80015a4:	4824      	ldr	r0, [pc, #144]	; (8001638 <mapSound+0x114>)
 80015a6:	f000 fd4b 	bl	8002040 <DFPLAYER_PlayFileInFolder>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 ff37 	bl	8002420 <HAL_Delay>
 80015b2:	e03c      	b.n	800162e <mapSound+0x10a>
		case 4: DFPLAYER_PlayFileInFolder(&MP3,F_00,mp3_04); HAL_Delay(t); break;
 80015b4:	2204      	movs	r2, #4
 80015b6:	2100      	movs	r1, #0
 80015b8:	481f      	ldr	r0, [pc, #124]	; (8001638 <mapSound+0x114>)
 80015ba:	f000 fd41 	bl	8002040 <DFPLAYER_PlayFileInFolder>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 ff2d 	bl	8002420 <HAL_Delay>
 80015c6:	e032      	b.n	800162e <mapSound+0x10a>
		case 5: DFPLAYER_PlayFileInFolder(&MP3,F_00,mp3_05); HAL_Delay(t); break;
 80015c8:	2205      	movs	r2, #5
 80015ca:	2100      	movs	r1, #0
 80015cc:	481a      	ldr	r0, [pc, #104]	; (8001638 <mapSound+0x114>)
 80015ce:	f000 fd37 	bl	8002040 <DFPLAYER_PlayFileInFolder>
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f000 ff23 	bl	8002420 <HAL_Delay>
 80015da:	e028      	b.n	800162e <mapSound+0x10a>
		case 6: DFPLAYER_PlayFileInFolder(&MP3,F_00,mp3_06); HAL_Delay(t); break;
 80015dc:	2206      	movs	r2, #6
 80015de:	2100      	movs	r1, #0
 80015e0:	4815      	ldr	r0, [pc, #84]	; (8001638 <mapSound+0x114>)
 80015e2:	f000 fd2d 	bl	8002040 <DFPLAYER_PlayFileInFolder>
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 ff19 	bl	8002420 <HAL_Delay>
 80015ee:	e01e      	b.n	800162e <mapSound+0x10a>
		case 7: DFPLAYER_PlayFileInFolder(&MP3,F_00,mp3_07); HAL_Delay(t); break;
 80015f0:	2207      	movs	r2, #7
 80015f2:	2100      	movs	r1, #0
 80015f4:	4810      	ldr	r0, [pc, #64]	; (8001638 <mapSound+0x114>)
 80015f6:	f000 fd23 	bl	8002040 <DFPLAYER_PlayFileInFolder>
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 ff0f 	bl	8002420 <HAL_Delay>
 8001602:	e014      	b.n	800162e <mapSound+0x10a>
		case 8: DFPLAYER_PlayFileInFolder(&MP3,F_00,mp3_08); HAL_Delay(t); break;
 8001604:	2208      	movs	r2, #8
 8001606:	2100      	movs	r1, #0
 8001608:	480b      	ldr	r0, [pc, #44]	; (8001638 <mapSound+0x114>)
 800160a:	f000 fd19 	bl	8002040 <DFPLAYER_PlayFileInFolder>
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f000 ff05 	bl	8002420 <HAL_Delay>
 8001616:	e00a      	b.n	800162e <mapSound+0x10a>
		case 9: DFPLAYER_PlayFileInFolder(&MP3,F_00,mp3_09); HAL_Delay(t); break;
 8001618:	2209      	movs	r2, #9
 800161a:	2100      	movs	r1, #0
 800161c:	4806      	ldr	r0, [pc, #24]	; (8001638 <mapSound+0x114>)
 800161e:	f000 fd0f 	bl	8002040 <DFPLAYER_PlayFileInFolder>
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fefb 	bl	8002420 <HAL_Delay>
 800162a:	e000      	b.n	800162e <mapSound+0x10a>
		default: break;
 800162c:	bf00      	nop
	}
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000278 	.word	0x20000278

0800163c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001642:	f000 fe8b 	bl	800235c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001646:	f000 f9e1 	bl	8001a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800164a:	f7ff fd8d 	bl	8001168 <MX_GPIO_Init>
  MX_I2C1_Init();
 800164e:	f7ff fe29 	bl	80012a4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001652:	f000 fb4b 	bl	8001cec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001656:	f000 fb73 	bl	8001d40 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RL1(OFF);
 800165a:	2200      	movs	r2, #0
 800165c:	2140      	movs	r1, #64	; 0x40
 800165e:	48bc      	ldr	r0, [pc, #752]	; (8001950 <main+0x314>)
 8001660:	f001 fa5b 	bl	8002b1a <HAL_GPIO_WritePin>
  RL2(OFF);
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800166a:	48ba      	ldr	r0, [pc, #744]	; (8001954 <main+0x318>)
 800166c:	f001 fa55 	bl	8002b1a <HAL_GPIO_WritePin>
  RL3(OFF);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001676:	48b6      	ldr	r0, [pc, #728]	; (8001950 <main+0x314>)
 8001678:	f001 fa4f 	bl	8002b1a <HAL_GPIO_WritePin>
  RL4(OFF);
 800167c:	2200      	movs	r2, #0
 800167e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001682:	48b3      	ldr	r0, [pc, #716]	; (8001950 <main+0x314>)
 8001684:	f001 fa49 	bl	8002b1a <HAL_GPIO_WritePin>

  HAL_Delay(2000);
 8001688:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800168c:	f000 fec8 	bl	8002420 <HAL_Delay>
  lcd_init();
 8001690:	f000 fdc8 	bl	8002224 <lcd_init>
  HAL_Delay(100);
 8001694:	2064      	movs	r0, #100	; 0x64
 8001696:	f000 fec3 	bl	8002420 <HAL_Delay>
  int count=0;
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
  int count1=0;
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
  int tempSet=36;
 80016a2:	2324      	movs	r3, #36	; 0x24
 80016a4:	60bb      	str	r3, [r7, #8]
  lcd_clear(); lcd_string(1, 1, "Run application");
 80016a6:	f000 fe00 	bl	80022aa <lcd_clear>
 80016aa:	4aab      	ldr	r2, [pc, #684]	; (8001958 <main+0x31c>)
 80016ac:	2101      	movs	r1, #1
 80016ae:	2001      	movs	r0, #1
 80016b0:	f000 fe3e 	bl	8002330 <lcd_string>
	DFPLAYER_Init(&MP3,&huart2);
 80016b4:	49a9      	ldr	r1, [pc, #676]	; (800195c <main+0x320>)
 80016b6:	48aa      	ldr	r0, [pc, #680]	; (8001960 <main+0x324>)
 80016b8:	f000 fc88 	bl	8001fcc <DFPLAYER_Init>
	DFPLAYER_SetVolume(&MP3,30);
 80016bc:	211e      	movs	r1, #30
 80016be:	48a8      	ldr	r0, [pc, #672]	; (8001960 <main+0x324>)
 80016c0:	f000 fca6 	bl	8002010 <DFPLAYER_SetVolume>
	HAL_Delay(500);
 80016c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016c8:	f000 feaa 	bl	8002420 <HAL_Delay>
	lcd_clear();
 80016cc:	f000 fded 	bl	80022aa <lcd_clear>

  while(1)
  {

	  nhiet_do=readObjectTempC();
 80016d0:	f000 fcc9 	bl	8002066 <readObjectTempC>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f7ff f9d4 	bl	8000a88 <__aeabi_d2f>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4aa0      	ldr	r2, [pc, #640]	; (8001964 <main+0x328>)
 80016e4:	6013      	str	r3, [r2, #0]
	  sprintf(txt,"Temp: %0.1f",nhiet_do);
 80016e6:	4b9f      	ldr	r3, [pc, #636]	; (8001964 <main+0x328>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe fe9c 	bl	8000428 <__aeabi_f2d>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	499c      	ldr	r1, [pc, #624]	; (8001968 <main+0x32c>)
 80016f6:	489d      	ldr	r0, [pc, #628]	; (800196c <main+0x330>)
 80016f8:	f003 ffb4 	bl	8005664 <siprintf>
	  lcd_string(1, 1, txt);
 80016fc:	4a9b      	ldr	r2, [pc, #620]	; (800196c <main+0x330>)
 80016fe:	2101      	movs	r1, #1
 8001700:	2001      	movs	r0, #1
 8001702:	f000 fe15 	bl	8002330 <lcd_string>
	  sprintf(txt,"Count: %d",count);
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4999      	ldr	r1, [pc, #612]	; (8001970 <main+0x334>)
 800170a:	4898      	ldr	r0, [pc, #608]	; (800196c <main+0x330>)
 800170c:	f003 ffaa 	bl	8005664 <siprintf>
	  lcd_string(2,1,txt);
 8001710:	4a96      	ldr	r2, [pc, #600]	; (800196c <main+0x330>)
 8001712:	2101      	movs	r1, #1
 8001714:	2002      	movs	r0, #2
 8001716:	f000 fe0b 	bl	8002330 <lcd_string>

	  if(!(ReadTC1))
 800171a:	2101      	movs	r1, #1
 800171c:	488c      	ldr	r0, [pc, #560]	; (8001950 <main+0x314>)
 800171e:	f001 f9e5 	bl	8002aec <HAL_GPIO_ReadPin>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	f040 80b1 	bne.w	800188c <main+0x250>
	  {
		  HAL_Delay(100);
 800172a:	2064      	movs	r0, #100	; 0x64
 800172c:	f000 fe78 	bl	8002420 <HAL_Delay>
		  sprintf(txt,"Temp: %0.1f",nhiet_do);
 8001730:	4b8c      	ldr	r3, [pc, #560]	; (8001964 <main+0x328>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe fe77 	bl	8000428 <__aeabi_f2d>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	498a      	ldr	r1, [pc, #552]	; (8001968 <main+0x32c>)
 8001740:	488a      	ldr	r0, [pc, #552]	; (800196c <main+0x330>)
 8001742:	f003 ff8f 	bl	8005664 <siprintf>
		  lcd_string(1, 1, txt);
 8001746:	4a89      	ldr	r2, [pc, #548]	; (800196c <main+0x330>)
 8001748:	2101      	movs	r1, #1
 800174a:	2001      	movs	r0, #1
 800174c:	f000 fdf0 	bl	8002330 <lcd_string>
		  count++;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3301      	adds	r3, #1
 8001754:	60fb      	str	r3, [r7, #12]
		  sprintf(txt,"Count: %d",count);
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	4985      	ldr	r1, [pc, #532]	; (8001970 <main+0x334>)
 800175a:	4884      	ldr	r0, [pc, #528]	; (800196c <main+0x330>)
 800175c:	f003 ff82 	bl	8005664 <siprintf>
		  lcd_string(2,1,txt);
 8001760:	4a82      	ldr	r2, [pc, #520]	; (800196c <main+0x330>)
 8001762:	2101      	movs	r1, #1
 8001764:	2002      	movs	r0, #2
 8001766:	f000 fde3 	bl	8002330 <lcd_string>

		  phatAmThanhNhietDo(nhiet_do);
 800176a:	4b7e      	ldr	r3, [pc, #504]	; (8001964 <main+0x328>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fe62 	bl	8001438 <phatAmThanhNhietDo>

		  if(nhiet_do>=tempSet)
 8001774:	68b8      	ldr	r0, [r7, #8]
 8001776:	f7ff fa91 	bl	8000c9c <__aeabi_i2f>
 800177a:	4602      	mov	r2, r0
 800177c:	4b79      	ldr	r3, [pc, #484]	; (8001964 <main+0x328>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	4610      	mov	r0, r2
 8001784:	f7ff fc86 	bl	8001094 <__aeabi_fcmple>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00c      	beq.n	80017a8 <main+0x16c>
		  {
			  lcd_clear();
 800178e:	f000 fd8c 	bl	80022aa <lcd_clear>
			  lcd_string(1, 2, "CANH BAO NHIET");
 8001792:	4a78      	ldr	r2, [pc, #480]	; (8001974 <main+0x338>)
 8001794:	2102      	movs	r1, #2
 8001796:	2001      	movs	r0, #1
 8001798:	f000 fdca 	bl	8002330 <lcd_string>
			  lcd_string(2, 6, "DO CAO");
 800179c:	4a76      	ldr	r2, [pc, #472]	; (8001978 <main+0x33c>)
 800179e:	2106      	movs	r1, #6
 80017a0:	2002      	movs	r0, #2
 80017a2:	f000 fdc5 	bl	8002330 <lcd_string>
 80017a6:	e00b      	b.n	80017c0 <main+0x184>
		  }
		  else
		  {
			  lcd_clear();
 80017a8:	f000 fd7f 	bl	80022aa <lcd_clear>
			  lcd_string(1,2, "NHIET DO BINH");
 80017ac:	4a73      	ldr	r2, [pc, #460]	; (800197c <main+0x340>)
 80017ae:	2102      	movs	r1, #2
 80017b0:	2001      	movs	r0, #1
 80017b2:	f000 fdbd 	bl	8002330 <lcd_string>
			  lcd_string(2,6, "THUONG");
 80017b6:	4a72      	ldr	r2, [pc, #456]	; (8001980 <main+0x344>)
 80017b8:	2106      	movs	r1, #6
 80017ba:	2002      	movs	r0, #2
 80017bc:	f000 fdb8 	bl	8002330 <lcd_string>
		  }

		  HAL_Delay(3000);
 80017c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80017c4:	f000 fe2c 	bl	8002420 <HAL_Delay>
		  lcd_clear(); lcd_string(1, 3, "YEU CAU KHU"); lcd_string(2, 6, "KHUAN");
 80017c8:	f000 fd6f 	bl	80022aa <lcd_clear>
 80017cc:	4a6d      	ldr	r2, [pc, #436]	; (8001984 <main+0x348>)
 80017ce:	2103      	movs	r1, #3
 80017d0:	2001      	movs	r0, #1
 80017d2:	f000 fdad 	bl	8002330 <lcd_string>
 80017d6:	4a6c      	ldr	r2, [pc, #432]	; (8001988 <main+0x34c>)
 80017d8:	2106      	movs	r1, #6
 80017da:	2002      	movs	r0, #2
 80017dc:	f000 fda8 	bl	8002330 <lcd_string>
		  DFPLAYER_PlayFileInFolder(&MP3,F_01,yeuCauKhuKhuan); HAL_Delay(1200);
 80017e0:	2202      	movs	r2, #2
 80017e2:	2101      	movs	r1, #1
 80017e4:	485e      	ldr	r0, [pc, #376]	; (8001960 <main+0x324>)
 80017e6:	f000 fc2b 	bl	8002040 <DFPLAYER_PlayFileInFolder>
 80017ea:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80017ee:	f000 fe17 	bl	8002420 <HAL_Delay>
		  HAL_GPIO_WritePin(RL3_GPIO_Port, RL3_Pin, 1);
 80017f2:	2201      	movs	r2, #1
 80017f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017f8:	4855      	ldr	r0, [pc, #340]	; (8001950 <main+0x314>)
 80017fa:	f001 f98e 	bl	8002b1a <HAL_GPIO_WritePin>
		  HAL_Delay(12000);
 80017fe:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8001802:	f000 fe0d 	bl	8002420 <HAL_Delay>

		  HAL_GPIO_WritePin(RL3_GPIO_Port, RL3_Pin, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800180c:	4850      	ldr	r0, [pc, #320]	; (8001950 <main+0x314>)
 800180e:	f001 f984 	bl	8002b1a <HAL_GPIO_WritePin>
		  lcd_clear(); lcd_string(1, 3, "DA KHU KHUAN"); lcd_string(2, 7, "XONG");
 8001812:	f000 fd4a 	bl	80022aa <lcd_clear>
 8001816:	4a5d      	ldr	r2, [pc, #372]	; (800198c <main+0x350>)
 8001818:	2103      	movs	r1, #3
 800181a:	2001      	movs	r0, #1
 800181c:	f000 fd88 	bl	8002330 <lcd_string>
 8001820:	4a5b      	ldr	r2, [pc, #364]	; (8001990 <main+0x354>)
 8001822:	2107      	movs	r1, #7
 8001824:	2002      	movs	r0, #2
 8001826:	f000 fd83 	bl	8002330 <lcd_string>
		  DFPLAYER_PlayFileInFolder(&MP3,F_01,daKhuKhuanXong); HAL_Delay(1200);
 800182a:	2203      	movs	r2, #3
 800182c:	2101      	movs	r1, #1
 800182e:	484c      	ldr	r0, [pc, #304]	; (8001960 <main+0x324>)
 8001830:	f000 fc06 	bl	8002040 <DFPLAYER_PlayFileInFolder>
 8001834:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8001838:	f000 fdf2 	bl	8002420 <HAL_Delay>
		  HAL_Delay(3000);
 800183c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001840:	f000 fdee 	bl	8002420 <HAL_Delay>
		  while(!HAL_GPIO_ReadPin(TC2_GPIO_Port, TC2_Pin));
 8001844:	bf00      	nop
 8001846:	2101      	movs	r1, #1
 8001848:	4841      	ldr	r0, [pc, #260]	; (8001950 <main+0x314>)
 800184a:	f001 f94f 	bl	8002aec <HAL_GPIO_ReadPin>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0f8      	beq.n	8001846 <main+0x20a>
		  lcd_clear();
 8001854:	f000 fd29 	bl	80022aa <lcd_clear>
		  sprintf(txt,"Temp: %0.1f",nhiet_do);
 8001858:	4b42      	ldr	r3, [pc, #264]	; (8001964 <main+0x328>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fde3 	bl	8000428 <__aeabi_f2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4940      	ldr	r1, [pc, #256]	; (8001968 <main+0x32c>)
 8001868:	4840      	ldr	r0, [pc, #256]	; (800196c <main+0x330>)
 800186a:	f003 fefb 	bl	8005664 <siprintf>
		  lcd_string(1, 1, txt);
 800186e:	4a3f      	ldr	r2, [pc, #252]	; (800196c <main+0x330>)
 8001870:	2101      	movs	r1, #1
 8001872:	2001      	movs	r0, #1
 8001874:	f000 fd5c 	bl	8002330 <lcd_string>
		  sprintf(txt,"Count: %d",count);
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	493d      	ldr	r1, [pc, #244]	; (8001970 <main+0x334>)
 800187c:	483b      	ldr	r0, [pc, #236]	; (800196c <main+0x330>)
 800187e:	f003 fef1 	bl	8005664 <siprintf>
		  lcd_string(2,1,txt);
 8001882:	4a3a      	ldr	r2, [pc, #232]	; (800196c <main+0x330>)
 8001884:	2101      	movs	r1, #1
 8001886:	2002      	movs	r0, #2
 8001888:	f000 fd52 	bl	8002330 <lcd_string>
	  }//if(!(ReadTC1))


	  if(ReadBtnOk)
 800188c:	2108      	movs	r1, #8
 800188e:	4830      	ldr	r0, [pc, #192]	; (8001950 <main+0x314>)
 8001890:	f001 f92c 	bl	8002aec <HAL_GPIO_ReadPin>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 80a3 	beq.w	80019e2 <main+0x3a6>
	  {
		  lcd_clear();
 800189c:	f000 fd05 	bl	80022aa <lcd_clear>
		  sprintf(txt,"Set temp: %d",tempSet);
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	493c      	ldr	r1, [pc, #240]	; (8001994 <main+0x358>)
 80018a4:	4831      	ldr	r0, [pc, #196]	; (800196c <main+0x330>)
 80018a6:	f003 fedd 	bl	8005664 <siprintf>
		  lcd_string(1, 1, txt);
 80018aa:	4a30      	ldr	r2, [pc, #192]	; (800196c <main+0x330>)
 80018ac:	2101      	movs	r1, #1
 80018ae:	2001      	movs	r0, #1
 80018b0:	f000 fd3e 	bl	8002330 <lcd_string>
		  while(ReadBtnOk);
 80018b4:	bf00      	nop
 80018b6:	2108      	movs	r1, #8
 80018b8:	4825      	ldr	r0, [pc, #148]	; (8001950 <main+0x314>)
 80018ba:	f001 f917 	bl	8002aec <HAL_GPIO_ReadPin>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d1f8      	bne.n	80018b6 <main+0x27a>
		  while(1)
		  {
			  if(ReadBtnUp)
 80018c4:	2110      	movs	r1, #16
 80018c6:	4822      	ldr	r0, [pc, #136]	; (8001950 <main+0x314>)
 80018c8:	f001 f910 	bl	8002aec <HAL_GPIO_ReadPin>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d015      	beq.n	80018fe <main+0x2c2>
			  {
				  sprintf(txt,"Set temp: %d",tempSet++);
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	60ba      	str	r2, [r7, #8]
 80018d8:	461a      	mov	r2, r3
 80018da:	492e      	ldr	r1, [pc, #184]	; (8001994 <main+0x358>)
 80018dc:	4823      	ldr	r0, [pc, #140]	; (800196c <main+0x330>)
 80018de:	f003 fec1 	bl	8005664 <siprintf>
				  lcd_string(1, 1, txt);
 80018e2:	4a22      	ldr	r2, [pc, #136]	; (800196c <main+0x330>)
 80018e4:	2101      	movs	r1, #1
 80018e6:	2001      	movs	r0, #1
 80018e8:	f000 fd22 	bl	8002330 <lcd_string>
				  while(ReadBtnUp);
 80018ec:	bf00      	nop
 80018ee:	2110      	movs	r1, #16
 80018f0:	4817      	ldr	r0, [pc, #92]	; (8001950 <main+0x314>)
 80018f2:	f001 f8fb 	bl	8002aec <HAL_GPIO_ReadPin>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f8      	bne.n	80018ee <main+0x2b2>
 80018fc:	e01d      	b.n	800193a <main+0x2fe>
			  }
			  else if(ReadBtnDown)
 80018fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001902:	4814      	ldr	r0, [pc, #80]	; (8001954 <main+0x318>)
 8001904:	f001 f8f2 	bl	8002aec <HAL_GPIO_ReadPin>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d015      	beq.n	800193a <main+0x2fe>
			  {
				  sprintf(txt,"Set temp: %d",tempSet--);
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	1e5a      	subs	r2, r3, #1
 8001912:	60ba      	str	r2, [r7, #8]
 8001914:	461a      	mov	r2, r3
 8001916:	491f      	ldr	r1, [pc, #124]	; (8001994 <main+0x358>)
 8001918:	4814      	ldr	r0, [pc, #80]	; (800196c <main+0x330>)
 800191a:	f003 fea3 	bl	8005664 <siprintf>
				  lcd_string(1, 1, txt);
 800191e:	4a13      	ldr	r2, [pc, #76]	; (800196c <main+0x330>)
 8001920:	2101      	movs	r1, #1
 8001922:	2001      	movs	r0, #1
 8001924:	f000 fd04 	bl	8002330 <lcd_string>
				  while(ReadBtnDown);
 8001928:	bf00      	nop
 800192a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800192e:	4809      	ldr	r0, [pc, #36]	; (8001954 <main+0x318>)
 8001930:	f001 f8dc 	bl	8002aec <HAL_GPIO_ReadPin>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f7      	bne.n	800192a <main+0x2ee>
			  }
			  HAL_Delay(10);
 800193a:	200a      	movs	r0, #10
 800193c:	f000 fd70 	bl	8002420 <HAL_Delay>
			  if(HAL_GPIO_ReadPin(BTN_OK_GPIO_Port, BTN_OK_Pin)) break;
 8001940:	2108      	movs	r1, #8
 8001942:	4803      	ldr	r0, [pc, #12]	; (8001950 <main+0x314>)
 8001944:	f001 f8d2 	bl	8002aec <HAL_GPIO_ReadPin>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d124      	bne.n	8001998 <main+0x35c>
			  if(ReadBtnUp)
 800194e:	e7b9      	b.n	80018c4 <main+0x288>
 8001950:	40010c00 	.word	0x40010c00
 8001954:	40010800 	.word	0x40010800
 8001958:	08007b70 	.word	0x08007b70
 800195c:	200002d4 	.word	0x200002d4
 8001960:	20000278 	.word	0x20000278
 8001964:	20000288 	.word	0x20000288
 8001968:	08007b80 	.word	0x08007b80
 800196c:	20000258 	.word	0x20000258
 8001970:	08007b8c 	.word	0x08007b8c
 8001974:	08007b98 	.word	0x08007b98
 8001978:	08007ba8 	.word	0x08007ba8
 800197c:	08007bb0 	.word	0x08007bb0
 8001980:	08007bc0 	.word	0x08007bc0
 8001984:	08007bc8 	.word	0x08007bc8
 8001988:	08007bd4 	.word	0x08007bd4
 800198c:	08007bdc 	.word	0x08007bdc
 8001990:	08007bec 	.word	0x08007bec
 8001994:	08007bf4 	.word	0x08007bf4
			  if(HAL_GPIO_ReadPin(BTN_OK_GPIO_Port, BTN_OK_Pin)) break;
 8001998:	bf00      	nop
		  }
		  lcd_clear();
 800199a:	f000 fc86 	bl	80022aa <lcd_clear>
		  sprintf(txt,"Temp: %0.1f",nhiet_do);
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <main+0x3bc>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fd40 	bl	8000428 <__aeabi_f2d>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4913      	ldr	r1, [pc, #76]	; (80019fc <main+0x3c0>)
 80019ae:	4814      	ldr	r0, [pc, #80]	; (8001a00 <main+0x3c4>)
 80019b0:	f003 fe58 	bl	8005664 <siprintf>
		  lcd_string(1, 1, txt);
 80019b4:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <main+0x3c4>)
 80019b6:	2101      	movs	r1, #1
 80019b8:	2001      	movs	r0, #1
 80019ba:	f000 fcb9 	bl	8002330 <lcd_string>
		  sprintf(txt,"Count: %d",count);
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4910      	ldr	r1, [pc, #64]	; (8001a04 <main+0x3c8>)
 80019c2:	480f      	ldr	r0, [pc, #60]	; (8001a00 <main+0x3c4>)
 80019c4:	f003 fe4e 	bl	8005664 <siprintf>
		  lcd_string(2,1,txt);
 80019c8:	4a0d      	ldr	r2, [pc, #52]	; (8001a00 <main+0x3c4>)
 80019ca:	2101      	movs	r1, #1
 80019cc:	2002      	movs	r0, #2
 80019ce:	f000 fcaf 	bl	8002330 <lcd_string>
		  while(ReadBtnOk);
 80019d2:	bf00      	nop
 80019d4:	2108      	movs	r1, #8
 80019d6:	480c      	ldr	r0, [pc, #48]	; (8001a08 <main+0x3cc>)
 80019d8:	f001 f888 	bl	8002aec <HAL_GPIO_ReadPin>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f8      	bne.n	80019d4 <main+0x398>
	  }

	  delay_user(1000);
 80019e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019e6:	f7ff fcdb 	bl	80013a0 <delay_user>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED_STT_Pin);
 80019ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ee:	4806      	ldr	r0, [pc, #24]	; (8001a08 <main+0x3cc>)
 80019f0:	f001 f8ab 	bl	8002b4a <HAL_GPIO_TogglePin>
	  nhiet_do=readObjectTempC();
 80019f4:	e66c      	b.n	80016d0 <main+0x94>
 80019f6:	bf00      	nop
 80019f8:	20000288 	.word	0x20000288
 80019fc:	08007b80 	.word	0x08007b80
 8001a00:	20000258 	.word	0x20000258
 8001a04:	08007b8c 	.word	0x08007b8c
 8001a08:	40010c00 	.word	0x40010c00

08001a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b090      	sub	sp, #64	; 0x40
 8001a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a12:	f107 0318 	add.w	r3, r7, #24
 8001a16:	2228      	movs	r2, #40	; 0x28
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 f9ba 	bl	8004d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a32:	2301      	movs	r3, #1
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a36:	2310      	movs	r3, #16
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001a42:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8001a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a48:	f107 0318 	add.w	r3, r7, #24
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f002 f885 	bl	8003b5c <HAL_RCC_OscConfig>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001a58:	f000 f819 	bl	8001a8e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a5c:	230f      	movs	r3, #15
 8001a5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a60:	2302      	movs	r3, #2
 8001a62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2101      	movs	r1, #1
 8001a76:	4618      	mov	r0, r3
 8001a78:	f002 faf2 	bl	8004060 <HAL_RCC_ClockConfig>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001a82:	f000 f804 	bl	8001a8e <Error_Handler>
  }
}
 8001a86:	bf00      	nop
 8001a88:	3740      	adds	r7, #64	; 0x40
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a92:	b672      	cpsid	i
}
 8001a94:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a96:	e7fe      	b.n	8001a96 <Error_Handler+0x8>

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_MspInit+0x5c>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	4a14      	ldr	r2, [pc, #80]	; (8001af4 <HAL_MspInit+0x5c>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6193      	str	r3, [r2, #24]
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_MspInit+0x5c>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_MspInit+0x5c>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a0e      	ldr	r2, [pc, #56]	; (8001af4 <HAL_MspInit+0x5c>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	61d3      	str	r3, [r2, #28]
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <HAL_MspInit+0x5c>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_MspInit+0x60>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <HAL_MspInit+0x60>)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aea:	bf00      	nop
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010000 	.word	0x40010000

08001afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <NMI_Handler+0x4>

08001b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b06:	e7fe      	b.n	8001b06 <HardFault_Handler+0x4>

08001b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <MemManage_Handler+0x4>

08001b0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <BusFault_Handler+0x4>

08001b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <UsageFault_Handler+0x4>

08001b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b42:	f000 fc51 	bl	80023e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <USART2_IRQHandler+0x10>)
 8001b52:	f002 fcfd 	bl	8004550 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200002d4 	.word	0x200002d4

08001b60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return 1;
 8001b64:	2301      	movs	r3, #1
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bc80      	pop	{r7}
 8001b6c:	4770      	bx	lr

08001b6e <_kill>:

int _kill(int pid, int sig)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b78:	f003 f8e2 	bl	8004d40 <__errno>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2216      	movs	r2, #22
 8001b80:	601a      	str	r2, [r3, #0]
  return -1;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <_exit>:

void _exit (int status)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b96:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffe7 	bl	8001b6e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ba0:	e7fe      	b.n	8001ba0 <_exit+0x12>

08001ba2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b086      	sub	sp, #24
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	e00a      	b.n	8001bca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bb4:	f3af 8000 	nop.w
 8001bb8:	4601      	mov	r1, r0
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	60ba      	str	r2, [r7, #8]
 8001bc0:	b2ca      	uxtb	r2, r1
 8001bc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	dbf0      	blt.n	8001bb4 <_read+0x12>
  }

  return len;
 8001bd2:	687b      	ldr	r3, [r7, #4]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	e009      	b.n	8001c02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	60ba      	str	r2, [r7, #8]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	dbf1      	blt.n	8001bee <_write+0x12>
  }
  return len;
 8001c0a:	687b      	ldr	r3, [r7, #4]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <_close>:

int _close(int file)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c3a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <_isatty>:

int _isatty(int file)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c50:	2301      	movs	r3, #1
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr

08001c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c7c:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <_sbrk+0x5c>)
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <_sbrk+0x60>)
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <_sbrk+0x64>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d102      	bne.n	8001c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <_sbrk+0x64>)
 8001c92:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <_sbrk+0x68>)
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <_sbrk+0x64>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d207      	bcs.n	8001cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca4:	f003 f84c 	bl	8004d40 <__errno>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	220c      	movs	r2, #12
 8001cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb2:	e009      	b.n	8001cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <_sbrk+0x64>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <_sbrk+0x64>)
 8001cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20005000 	.word	0x20005000
 8001cd4:	00000400 	.word	0x00000400
 8001cd8:	2000028c 	.word	0x2000028c
 8001cdc:	20000330 	.word	0x20000330

08001ce0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <MX_USART1_UART_Init+0x4c>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <MX_USART1_UART_Init+0x50>)
 8001cf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <MX_USART1_UART_Init+0x4c>)
 8001cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <MX_USART1_UART_Init+0x4c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_USART1_UART_Init+0x4c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <MX_USART1_UART_Init+0x4c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_USART1_UART_Init+0x4c>)
 8001d12:	220c      	movs	r2, #12
 8001d14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <MX_USART1_UART_Init+0x4c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_USART1_UART_Init+0x4c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <MX_USART1_UART_Init+0x4c>)
 8001d24:	f002 fb34 	bl	8004390 <HAL_UART_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d2e:	f7ff feae 	bl	8001a8e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000290 	.word	0x20000290
 8001d3c:	40013800 	.word	0x40013800

08001d40 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d46:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <MX_USART2_UART_Init+0x50>)
 8001d48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d66:	220c      	movs	r2, #12
 8001d68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d76:	4805      	ldr	r0, [pc, #20]	; (8001d8c <MX_USART2_UART_Init+0x4c>)
 8001d78:	f002 fb0a 	bl	8004390 <HAL_UART_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d82:	f7ff fe84 	bl	8001a8e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200002d4 	.word	0x200002d4
 8001d90:	40004400 	.word	0x40004400

08001d94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0318 	add.w	r3, r7, #24
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a3b      	ldr	r2, [pc, #236]	; (8001e9c <HAL_UART_MspInit+0x108>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d132      	bne.n	8001e1a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db4:	4b3a      	ldr	r3, [pc, #232]	; (8001ea0 <HAL_UART_MspInit+0x10c>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	4a39      	ldr	r2, [pc, #228]	; (8001ea0 <HAL_UART_MspInit+0x10c>)
 8001dba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dbe:	6193      	str	r3, [r2, #24]
 8001dc0:	4b37      	ldr	r3, [pc, #220]	; (8001ea0 <HAL_UART_MspInit+0x10c>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dcc:	4b34      	ldr	r3, [pc, #208]	; (8001ea0 <HAL_UART_MspInit+0x10c>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	4a33      	ldr	r2, [pc, #204]	; (8001ea0 <HAL_UART_MspInit+0x10c>)
 8001dd2:	f043 0304 	orr.w	r3, r3, #4
 8001dd6:	6193      	str	r3, [r2, #24]
 8001dd8:	4b31      	ldr	r3, [pc, #196]	; (8001ea0 <HAL_UART_MspInit+0x10c>)
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dee:	2303      	movs	r3, #3
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df2:	f107 0318 	add.w	r3, r7, #24
 8001df6:	4619      	mov	r1, r3
 8001df8:	482a      	ldr	r0, [pc, #168]	; (8001ea4 <HAL_UART_MspInit+0x110>)
 8001dfa:	f000 fcf3 	bl	80027e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 0318 	add.w	r3, r7, #24
 8001e10:	4619      	mov	r1, r3
 8001e12:	4824      	ldr	r0, [pc, #144]	; (8001ea4 <HAL_UART_MspInit+0x110>)
 8001e14:	f000 fce6 	bl	80027e4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e18:	e03c      	b.n	8001e94 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a22      	ldr	r2, [pc, #136]	; (8001ea8 <HAL_UART_MspInit+0x114>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d137      	bne.n	8001e94 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e24:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <HAL_UART_MspInit+0x10c>)
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	4a1d      	ldr	r2, [pc, #116]	; (8001ea0 <HAL_UART_MspInit+0x10c>)
 8001e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e2e:	61d3      	str	r3, [r2, #28]
 8001e30:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <HAL_UART_MspInit+0x10c>)
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3c:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <HAL_UART_MspInit+0x10c>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	4a17      	ldr	r2, [pc, #92]	; (8001ea0 <HAL_UART_MspInit+0x10c>)
 8001e42:	f043 0304 	orr.w	r3, r3, #4
 8001e46:	6193      	str	r3, [r2, #24]
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <HAL_UART_MspInit+0x10c>)
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e54:	2304      	movs	r3, #4
 8001e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e60:	f107 0318 	add.w	r3, r7, #24
 8001e64:	4619      	mov	r1, r3
 8001e66:	480f      	ldr	r0, [pc, #60]	; (8001ea4 <HAL_UART_MspInit+0x110>)
 8001e68:	f000 fcbc 	bl	80027e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e6c:	2308      	movs	r3, #8
 8001e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e70:	2300      	movs	r3, #0
 8001e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	f107 0318 	add.w	r3, r7, #24
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4809      	ldr	r0, [pc, #36]	; (8001ea4 <HAL_UART_MspInit+0x110>)
 8001e80:	f000 fcb0 	bl	80027e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e84:	2200      	movs	r2, #0
 8001e86:	2100      	movs	r1, #0
 8001e88:	2026      	movs	r0, #38	; 0x26
 8001e8a:	f000 fbc4 	bl	8002616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e8e:	2026      	movs	r0, #38	; 0x26
 8001e90:	f000 fbdd 	bl	800264e <HAL_NVIC_EnableIRQ>
}
 8001e94:	bf00      	nop
 8001e96:	3728      	adds	r7, #40	; 0x28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40013800 	.word	0x40013800
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010800 	.word	0x40010800
 8001ea8:	40004400 	.word	0x40004400

08001eac <DFPLAYER_SendUART>:
#include "DFPLAYER.h"
uint8_t SendFrame[10] = {0x7E, 0xFF, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEF};

//******************************** LOW Level Functions ****************************//
static void DFPLAYER_SendUART(DFPLAYER_Name* MP3)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(MP3->DFP_UART, (uint8_t *)&MP3->SendBuff, sizeof(MP3->SendBuff), 1000);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6818      	ldr	r0, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	1d19      	adds	r1, r3, #4
 8001ebc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec0:	220a      	movs	r2, #10
 8001ec2:	f002 fab2 	bl	800442a <HAL_UART_Transmit>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <DFPLAYER_Delay>:
static void DFPLAYER_Delay(uint16_t Time)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(Time);
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 faa0 	bl	8002420 <HAL_Delay>
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <DFPLAYER_GetChecksum>:

static uint16_t DFPLAYER_GetChecksum (uint8_t *thebuf)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	uint16_t sum = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	81fb      	strh	r3, [r7, #14]
	for (int i=1; i<7; i++) 
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	e00a      	b.n	8001f10 <DFPLAYER_GetChecksum+0x28>
	{
		sum += thebuf[i];
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	4413      	add	r3, r2
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	89fb      	ldrh	r3, [r7, #14]
 8001f06:	4413      	add	r3, r2
 8001f08:	81fb      	strh	r3, [r7, #14]
	for (int i=1; i<7; i++) 
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b06      	cmp	r3, #6
 8001f14:	ddf1      	ble.n	8001efa <DFPLAYER_GetChecksum+0x12>
	}
	return -sum;
 8001f16:	89fb      	ldrh	r3, [r7, #14]
 8001f18:	425b      	negs	r3, r3
 8001f1a:	b29b      	uxth	r3, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr

08001f26 <DFPLAYER_FillBigend>:

static void DFPLAYER_FillBigend (uint8_t *thebuf, uint16_t data) {
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	807b      	strh	r3, [r7, #2]
	*thebuf =	(uint8_t)(data>>8);
 8001f32:	887b      	ldrh	r3, [r7, #2]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	701a      	strb	r2, [r3, #0]
	*(thebuf+1) =	(uint8_t)data;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3301      	adds	r3, #1
 8001f42:	887a      	ldrh	r2, [r7, #2]
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	701a      	strb	r2, [r3, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <DFPLAYER_FillChecksum>:

static void DFPLAYER_FillChecksum (DFPLAYER_Name* MP3){
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
	uint16_t checksum = DFPLAYER_GetChecksum (MP3->SendBuff);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff ffc2 	bl	8001ee8 <DFPLAYER_GetChecksum>
 8001f64:	4603      	mov	r3, r0
 8001f66:	81fb      	strh	r3, [r7, #14]
	DFPLAYER_FillBigend (MP3->SendBuff+7, checksum);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	3307      	adds	r3, #7
 8001f6e:	89fa      	ldrh	r2, [r7, #14]
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ffd7 	bl	8001f26 <DFPLAYER_FillBigend>
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <DFPLAYER_SendCmd>:

static void DFPLAYER_SendCmd(DFPLAYER_Name* MP3, uint8_t cmd, uint16_t high_arg, uint16_t low_arg)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	4608      	mov	r0, r1
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4603      	mov	r3, r0
 8001f90:	72fb      	strb	r3, [r7, #11]
 8001f92:	460b      	mov	r3, r1
 8001f94:	813b      	strh	r3, [r7, #8]
 8001f96:	4613      	mov	r3, r2
 8001f98:	80fb      	strh	r3, [r7, #6]
	DFPLAYER_Delay(100);
 8001f9a:	2064      	movs	r0, #100	; 0x64
 8001f9c:	f7ff ff97 	bl	8001ece <DFPLAYER_Delay>
	MP3->SendBuff[3] = cmd;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	7afa      	ldrb	r2, [r7, #11]
 8001fa4:	71da      	strb	r2, [r3, #7]
	MP3->SendBuff[5] = high_arg;
 8001fa6:	893b      	ldrh	r3, [r7, #8]
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	725a      	strb	r2, [r3, #9]
	MP3->SendBuff[6] = low_arg;
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	729a      	strb	r2, [r3, #10]
	DFPLAYER_FillChecksum(MP3);
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f7ff ffcb 	bl	8001f52 <DFPLAYER_FillChecksum>
	DFPLAYER_SendUART(MP3);
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f7ff ff75 	bl	8001eac <DFPLAYER_SendUART>
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <DFPLAYER_Init>:

//******************************** High Level Functions ****************************//
void DFPLAYER_Init(DFPLAYER_Name* MP3, UART_HandleTypeDef* UART)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
	for(int i = 0; i<10; i++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	e00c      	b.n	8001ff6 <DFPLAYER_Init+0x2a>
	{
		MP3->SendBuff[i] = SendFrame[i];
 8001fdc:	4a0b      	ldr	r2, [pc, #44]	; (800200c <DFPLAYER_Init+0x40>)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	7819      	ldrb	r1, [r3, #0]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4413      	add	r3, r2
 8001fea:	3304      	adds	r3, #4
 8001fec:	460a      	mov	r2, r1
 8001fee:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<10; i++)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b09      	cmp	r3, #9
 8001ffa:	ddef      	ble.n	8001fdc <DFPLAYER_Init+0x10>
	}
	MP3->DFP_UART = UART;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	601a      	str	r2, [r3, #0]
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	20000004 	.word	0x20000004

08002010 <DFPLAYER_SetVolume>:
{
	DFPLAYER_SendCmd(MP3, DFP_PREV,00,00);
}

void DFPLAYER_SetVolume(DFPLAYER_Name* MP3, uint16_t volume)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	807b      	strh	r3, [r7, #2]
	uint8_t volume1 = volume>>8;
 800201c:	887b      	ldrh	r3, [r7, #2]
 800201e:	0a1b      	lsrs	r3, r3, #8
 8002020:	b29b      	uxth	r3, r3
 8002022:	73fb      	strb	r3, [r7, #15]
	uint8_t volume2 = volume;
 8002024:	887b      	ldrh	r3, [r7, #2]
 8002026:	73bb      	strb	r3, [r7, #14]
	DFPLAYER_SendCmd(MP3, DFP_SETVOLUME, volume1, volume2);
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	b29a      	uxth	r2, r3
 800202c:	7bbb      	ldrb	r3, [r7, #14]
 800202e:	b29b      	uxth	r3, r3
 8002030:	2106      	movs	r1, #6
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffa4 	bl	8001f80 <DFPLAYER_SendCmd>
}
 8002038:	bf00      	nop
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <DFPLAYER_PlayFileInFolder>:
void DFPLAYER_RandomPlay(DFPLAYER_Name* MP3)
{
	DFPLAYER_SendCmd (MP3, DFP_RANDOM,0,0);
}
void DFPLAYER_PlayFileInFolder(DFPLAYER_Name* MP3, uint8_t folder, uint32_t num) 
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	460b      	mov	r3, r1
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	72fb      	strb	r3, [r7, #11]
	DFPLAYER_SendCmd (MP3, DFP_PLAYFILEINFOLDER, folder, num);
 800204e:	7afb      	ldrb	r3, [r7, #11]
 8002050:	b29a      	uxth	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	b29b      	uxth	r3, r3
 8002056:	210f      	movs	r1, #15
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f7ff ff91 	bl	8001f80 <DFPLAYER_SendCmd>
}
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <readObjectTempC>:
/**
 * @brief Get the current temperature of an object in degrees Celcius
 *
 * @return double The temperature in degrees Celcius or NAN if reading failed
 */
double readObjectTempC(void) {
 8002066:	b580      	push	{r7, lr}
 8002068:	af00      	add	r7, sp, #0
  return readTemp(MLX90614_TOBJ1);
 800206a:	2007      	movs	r0, #7
 800206c:	f000 f80c 	bl	8002088 <readTemp>
 8002070:	4603      	mov	r3, r0
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe f9d8 	bl	8000428 <__aeabi_f2d>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
}
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	bd80      	pop	{r7, pc}
 8002082:	0000      	movs	r0, r0
 8002084:	0000      	movs	r0, r0
	...

08002088 <readTemp>:
 */
double readAmbientTempC(void) {
  return readTemp(MLX90614_TA);
}

float readTemp(unsigned char reg) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
  float temp;

  temp = read16(reg);
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	4618      	mov	r0, r3
 8002096:	f000 f83f 	bl	8002118 <read16>
 800209a:	4603      	mov	r3, r0
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fdf9 	bl	8000c94 <__aeabi_ui2f>
 80020a2:	4603      	mov	r3, r0
 80020a4:	60fb      	str	r3, [r7, #12]
  if (temp == 0)
 80020a6:	f04f 0100 	mov.w	r1, #0
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f7fe ffde 	bl	800106c <__aeabi_fcmpeq>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d002      	beq.n	80020bc <readTemp+0x34>
    return 0;
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	e020      	b.n	80020fe <readTemp+0x76>
  temp *= .02;
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f7fe f9b3 	bl	8000428 <__aeabi_f2d>
 80020c2:	a311      	add	r3, pc, #68	; (adr r3, 8002108 <readTemp+0x80>)
 80020c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c8:	f7fe fa06 	bl	80004d8 <__aeabi_dmul>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4610      	mov	r0, r2
 80020d2:	4619      	mov	r1, r3
 80020d4:	f7fe fcd8 	bl	8000a88 <__aeabi_d2f>
 80020d8:	4603      	mov	r3, r0
 80020da:	60fb      	str	r3, [r7, #12]
  temp -= 273.15;
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	f7fe f9a3 	bl	8000428 <__aeabi_f2d>
 80020e2:	a30b      	add	r3, pc, #44	; (adr r3, 8002110 <readTemp+0x88>)
 80020e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e8:	f7fe f83e 	bl	8000168 <__aeabi_dsub>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4610      	mov	r0, r2
 80020f2:	4619      	mov	r1, r3
 80020f4:	f7fe fcc8 	bl	8000a88 <__aeabi_d2f>
 80020f8:	4603      	mov	r3, r0
 80020fa:	60fb      	str	r3, [r7, #12]
  return temp;
 80020fc:	68fb      	ldr	r3, [r7, #12]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	47ae147b 	.word	0x47ae147b
 800210c:	3f947ae1 	.word	0x3f947ae1
 8002110:	66666666 	.word	0x66666666
 8002114:	40711266 	.word	0x40711266

08002118 <read16>:

/*********************************************************************/

unsigned int read16(unsigned char a) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af04      	add	r7, sp, #16
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
  unsigned char buffer[3];
  buffer[0] = a;
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	733b      	strb	r3, [r7, #12]
   buffer[0]  = I2C_Master_Read(1);                         // Read month from register 5
   buffer[1]   = I2C_Master_Read(0);                         // Read year from register 6
   I2C_Master_Stop(); 
   */
  uint8_t reg[1];
  reg[0]=a;
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	723b      	strb	r3, [r7, #8]
 // HAL_I2C_Master_Transmit(&hi2c1,MLX90614_I2CADDR,reg,1,100);
 // HAL_I2C_Master_Receive(&hi2c1,MLX90614_I2CADDR,buffer,2,100);

  HAL_I2C_Mem_Read(&hi2c1, MLX90614_I2CADDR, a, 1, buffer, 2, 1000);
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	b29a      	uxth	r2, r3
 800212e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002132:	9302      	str	r3, [sp, #8]
 8002134:	2302      	movs	r3, #2
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2301      	movs	r3, #1
 8002140:	21b4      	movs	r1, #180	; 0xb4
 8002142:	4806      	ldr	r0, [pc, #24]	; (800215c <read16+0x44>)
 8002144:	f000 ff5c 	bl	8003000 <HAL_I2C_Mem_Read>


  // return data, ignore pec
  return ((unsigned int)(buffer[0])) | ((unsigned int)(buffer[1]) << 8);
 8002148:	7b3b      	ldrb	r3, [r7, #12]
 800214a:	461a      	mov	r2, r3
 800214c:	7b7b      	ldrb	r3, [r7, #13]
 800214e:	021b      	lsls	r3, r3, #8
 8002150:	4313      	orrs	r3, r2
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000204 	.word	0x20000204

08002160 <lcd_send_cmd>:
//extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af02      	add	r7, sp, #8
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	f023 030f 	bic.w	r3, r3, #15
 8002170:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	f043 030c 	orr.w	r3, r3, #12
 800217e:	b2db      	uxtb	r3, r3
 8002180:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	f043 0308 	orr.w	r3, r3, #8
 8002188:	b2db      	uxtb	r3, r3
 800218a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800218c:	7bbb      	ldrb	r3, [r7, #14]
 800218e:	f043 030c 	orr.w	r3, r3, #12
 8002192:	b2db      	uxtb	r3, r3
 8002194:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8002196:	7bbb      	ldrb	r3, [r7, #14]
 8002198:	f043 0308 	orr.w	r3, r3, #8
 800219c:	b2db      	uxtb	r3, r3
 800219e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80021a0:	f107 0208 	add.w	r2, r7, #8
 80021a4:	2364      	movs	r3, #100	; 0x64
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	2304      	movs	r3, #4
 80021aa:	214e      	movs	r1, #78	; 0x4e
 80021ac:	4804      	ldr	r0, [pc, #16]	; (80021c0 <lcd_send_cmd+0x60>)
 80021ae:	f000 fe29 	bl	8002e04 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80021b2:	2001      	movs	r0, #1
 80021b4:	f000 f934 	bl	8002420 <HAL_Delay>
}
 80021b8:	bf00      	nop
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000204 	.word	0x20000204

080021c4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	f023 030f 	bic.w	r3, r3, #15
 80021d4:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	f043 030d 	orr.w	r3, r3, #13
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	f043 0309 	orr.w	r3, r3, #9
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80021f0:	7bbb      	ldrb	r3, [r7, #14]
 80021f2:	f043 030d 	orr.w	r3, r3, #13
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80021fa:	7bbb      	ldrb	r3, [r7, #14]
 80021fc:	f043 0309 	orr.w	r3, r3, #9
 8002200:	b2db      	uxtb	r3, r3
 8002202:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002204:	f107 0208 	add.w	r2, r7, #8
 8002208:	2364      	movs	r3, #100	; 0x64
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2304      	movs	r3, #4
 800220e:	214e      	movs	r1, #78	; 0x4e
 8002210:	4803      	ldr	r0, [pc, #12]	; (8002220 <lcd_send_data+0x5c>)
 8002212:	f000 fdf7 	bl	8002e04 <HAL_I2C_Master_Transmit>
}
 8002216:	bf00      	nop
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000204 	.word	0x20000204

08002224 <lcd_init>:

void lcd_init (void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8002228:	2033      	movs	r0, #51	; 0x33
 800222a:	f7ff ff99 	bl	8002160 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 800222e:	2032      	movs	r0, #50	; 0x32
 8002230:	f7ff ff96 	bl	8002160 <lcd_send_cmd>
	HAL_Delay(50);
 8002234:	2032      	movs	r0, #50	; 0x32
 8002236:	f000 f8f3 	bl	8002420 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 800223a:	2028      	movs	r0, #40	; 0x28
 800223c:	f7ff ff90 	bl	8002160 <lcd_send_cmd>
	HAL_Delay(50);
 8002240:	2032      	movs	r0, #50	; 0x32
 8002242:	f000 f8ed 	bl	8002420 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8002246:	2001      	movs	r0, #1
 8002248:	f7ff ff8a 	bl	8002160 <lcd_send_cmd>
	HAL_Delay(70);
 800224c:	2046      	movs	r0, #70	; 0x46
 800224e:	f000 f8e7 	bl	8002420 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8002252:	2006      	movs	r0, #6
 8002254:	f7ff ff84 	bl	8002160 <lcd_send_cmd>
	HAL_Delay(50);
 8002258:	2032      	movs	r0, #50	; 0x32
 800225a:	f000 f8e1 	bl	8002420 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 800225e:	200c      	movs	r0, #12
 8002260:	f7ff ff7e 	bl	8002160 <lcd_send_cmd>
	HAL_Delay(50);
 8002264:	2032      	movs	r0, #50	; 0x32
 8002266:	f000 f8db 	bl	8002420 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 800226a:	2002      	movs	r0, #2
 800226c:	f7ff ff78 	bl	8002160 <lcd_send_cmd>
	HAL_Delay(50);
 8002270:	2032      	movs	r0, #50	; 0x32
 8002272:	f000 f8d5 	bl	8002420 <HAL_Delay>
	lcd_send_cmd (0x80);
 8002276:	2080      	movs	r0, #128	; 0x80
 8002278:	f7ff ff72 	bl	8002160 <lcd_send_cmd>
}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}

08002280 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8002288:	e006      	b.n	8002298 <lcd_send_string+0x18>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff ff96 	bl	80021c4 <lcd_send_data>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f4      	bne.n	800228a <lcd_send_string+0xa>
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <lcd_clear>:

void lcd_clear(void)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 80022ae:	2001      	movs	r0, #1
 80022b0:	f7ff ff56 	bl	8002160 <lcd_send_cmd>
}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d108      	bne.n	80022da <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	337f      	adds	r3, #127	; 0x7f
 80022d6:	73fb      	strb	r3, [r7, #15]
 80022d8:	e022      	b.n	8002320 <lcd_goto_XY+0x68>
	}
	else if(row==2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d109      	bne.n	80022f4 <lcd_goto_XY+0x3c>
	{
		pos_Addr = 0x80 | (0x40 + col);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	3340      	adds	r3, #64	; 0x40
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	b25b      	sxtb	r3, r3
 80022ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022ee:	b25b      	sxtb	r3, r3
 80022f0:	73fb      	strb	r3, [r7, #15]
 80022f2:	e015      	b.n	8002320 <lcd_goto_XY+0x68>
	}
	else if(row==3)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d109      	bne.n	800230e <lcd_goto_XY+0x56>
	{
		pos_Addr = 0x80 | (0x14 + col);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	3314      	adds	r3, #20
 8002300:	b2db      	uxtb	r3, r3
 8002302:	b25b      	sxtb	r3, r3
 8002304:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002308:	b25b      	sxtb	r3, r3
 800230a:	73fb      	strb	r3, [r7, #15]
 800230c:	e008      	b.n	8002320 <lcd_goto_XY+0x68>
	}
	else
	{
		pos_Addr = 0x80 | (0x54 + col);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	3354      	adds	r3, #84	; 0x54
 8002314:	b2db      	uxtb	r3, r3
 8002316:	b25b      	sxtb	r3, r3
 8002318:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800231c:	b25b      	sxtb	r3, r3
 800231e:	73fb      	strb	r3, [r7, #15]
	}

	lcd_send_cmd(pos_Addr);
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ff1c 	bl	8002160 <lcd_send_cmd>
}
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <lcd_string>:


void lcd_string(char hang,char cot,char *str)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	603a      	str	r2, [r7, #0]
 800233a:	71fb      	strb	r3, [r7, #7]
 800233c:	460b      	mov	r3, r1
 800233e:	71bb      	strb	r3, [r7, #6]
	lcd_xy(hang,cot-1);
 8002340:	79fa      	ldrb	r2, [r7, #7]
 8002342:	79bb      	ldrb	r3, [r7, #6]
 8002344:	3b01      	subs	r3, #1
 8002346:	4619      	mov	r1, r3
 8002348:	4610      	mov	r0, r2
 800234a:	f7ff ffb5 	bl	80022b8 <lcd_goto_XY>
	lcd_send_string(str);
 800234e:	6838      	ldr	r0, [r7, #0]
 8002350:	f7ff ff96 	bl	8002280 <lcd_send_string>
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <HAL_Init+0x28>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a07      	ldr	r2, [pc, #28]	; (8002384 <HAL_Init+0x28>)
 8002366:	f043 0310 	orr.w	r3, r3, #16
 800236a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800236c:	2003      	movs	r0, #3
 800236e:	f000 f947 	bl	8002600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002372:	200f      	movs	r0, #15
 8002374:	f000 f808 	bl	8002388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002378:	f7ff fb8e 	bl	8001a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40022000 	.word	0x40022000

08002388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002390:	4b12      	ldr	r3, [pc, #72]	; (80023dc <HAL_InitTick+0x54>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <HAL_InitTick+0x58>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	4619      	mov	r1, r3
 800239a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800239e:	fbb3 f3f1 	udiv	r3, r3, r1
 80023a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 f95f 	bl	800266a <HAL_SYSTICK_Config>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e00e      	b.n	80023d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b0f      	cmp	r3, #15
 80023ba:	d80a      	bhi.n	80023d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023bc:	2200      	movs	r2, #0
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	f04f 30ff 	mov.w	r0, #4294967295
 80023c4:	f000 f927 	bl	8002616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023c8:	4a06      	ldr	r2, [pc, #24]	; (80023e4 <HAL_InitTick+0x5c>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	e000      	b.n	80023d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000000 	.word	0x20000000
 80023e0:	20000014 	.word	0x20000014
 80023e4:	20000010 	.word	0x20000010

080023e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <HAL_IncTick+0x1c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	461a      	mov	r2, r3
 80023f2:	4b05      	ldr	r3, [pc, #20]	; (8002408 <HAL_IncTick+0x20>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4413      	add	r3, r2
 80023f8:	4a03      	ldr	r2, [pc, #12]	; (8002408 <HAL_IncTick+0x20>)
 80023fa:	6013      	str	r3, [r2, #0]
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	20000014 	.word	0x20000014
 8002408:	20000318 	.word	0x20000318

0800240c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return uwTick;
 8002410:	4b02      	ldr	r3, [pc, #8]	; (800241c <HAL_GetTick+0x10>)
 8002412:	681b      	ldr	r3, [r3, #0]
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr
 800241c:	20000318 	.word	0x20000318

08002420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002428:	f7ff fff0 	bl	800240c <HAL_GetTick>
 800242c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002438:	d005      	beq.n	8002446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_Delay+0x44>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4413      	add	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002446:	bf00      	nop
 8002448:	f7ff ffe0 	bl	800240c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	429a      	cmp	r2, r3
 8002456:	d8f7      	bhi.n	8002448 <HAL_Delay+0x28>
  {
  }
}
 8002458:	bf00      	nop
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000014 	.word	0x20000014

08002468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <__NVIC_SetPriorityGrouping+0x44>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002484:	4013      	ands	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249a:	4a04      	ldr	r2, [pc, #16]	; (80024ac <__NVIC_SetPriorityGrouping+0x44>)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	60d3      	str	r3, [r2, #12]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <__NVIC_GetPriorityGrouping+0x18>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	f003 0307 	and.w	r3, r3, #7
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	db0b      	blt.n	80024f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	f003 021f 	and.w	r2, r3, #31
 80024e4:	4906      	ldr	r1, [pc, #24]	; (8002500 <__NVIC_EnableIRQ+0x34>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	095b      	lsrs	r3, r3, #5
 80024ec:	2001      	movs	r0, #1
 80024ee:	fa00 f202 	lsl.w	r2, r0, r2
 80024f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	e000e100 	.word	0xe000e100

08002504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	6039      	str	r1, [r7, #0]
 800250e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002514:	2b00      	cmp	r3, #0
 8002516:	db0a      	blt.n	800252e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	b2da      	uxtb	r2, r3
 800251c:	490c      	ldr	r1, [pc, #48]	; (8002550 <__NVIC_SetPriority+0x4c>)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	0112      	lsls	r2, r2, #4
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	440b      	add	r3, r1
 8002528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800252c:	e00a      	b.n	8002544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	b2da      	uxtb	r2, r3
 8002532:	4908      	ldr	r1, [pc, #32]	; (8002554 <__NVIC_SetPriority+0x50>)
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	3b04      	subs	r3, #4
 800253c:	0112      	lsls	r2, r2, #4
 800253e:	b2d2      	uxtb	r2, r2
 8002540:	440b      	add	r3, r1
 8002542:	761a      	strb	r2, [r3, #24]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	e000e100 	.word	0xe000e100
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002558:	b480      	push	{r7}
 800255a:	b089      	sub	sp, #36	; 0x24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f1c3 0307 	rsb	r3, r3, #7
 8002572:	2b04      	cmp	r3, #4
 8002574:	bf28      	it	cs
 8002576:	2304      	movcs	r3, #4
 8002578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3304      	adds	r3, #4
 800257e:	2b06      	cmp	r3, #6
 8002580:	d902      	bls.n	8002588 <NVIC_EncodePriority+0x30>
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3b03      	subs	r3, #3
 8002586:	e000      	b.n	800258a <NVIC_EncodePriority+0x32>
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	f04f 32ff 	mov.w	r2, #4294967295
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	43da      	mvns	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	401a      	ands	r2, r3
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a0:	f04f 31ff 	mov.w	r1, #4294967295
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	43d9      	mvns	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b0:	4313      	orrs	r3, r2
         );
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3724      	adds	r7, #36	; 0x24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025cc:	d301      	bcc.n	80025d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ce:	2301      	movs	r3, #1
 80025d0:	e00f      	b.n	80025f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025d2:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <SysTick_Config+0x40>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025da:	210f      	movs	r1, #15
 80025dc:	f04f 30ff 	mov.w	r0, #4294967295
 80025e0:	f7ff ff90 	bl	8002504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <SysTick_Config+0x40>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ea:	4b04      	ldr	r3, [pc, #16]	; (80025fc <SysTick_Config+0x40>)
 80025ec:	2207      	movs	r2, #7
 80025ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	e000e010 	.word	0xe000e010

08002600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff ff2d 	bl	8002468 <__NVIC_SetPriorityGrouping>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002616:	b580      	push	{r7, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002628:	f7ff ff42 	bl	80024b0 <__NVIC_GetPriorityGrouping>
 800262c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	6978      	ldr	r0, [r7, #20]
 8002634:	f7ff ff90 	bl	8002558 <NVIC_EncodePriority>
 8002638:	4602      	mov	r2, r0
 800263a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff5f 	bl	8002504 <__NVIC_SetPriority>
}
 8002646:	bf00      	nop
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	4603      	mov	r3, r0
 8002656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff35 	bl	80024cc <__NVIC_EnableIRQ>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff ffa2 	bl	80025bc <SysTick_Config>
 8002678:	4603      	mov	r3, r0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002682:	b480      	push	{r7}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002694:	2b02      	cmp	r3, #2
 8002696:	d008      	beq.n	80026aa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2204      	movs	r2, #4
 800269c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e020      	b.n	80026ec <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 020e 	bic.w	r2, r2, #14
 80026b8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0201 	bic.w	r2, r2, #1
 80026c8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d2:	2101      	movs	r1, #1
 80026d4:	fa01 f202 	lsl.w	r2, r1, r2
 80026d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
	...

080026f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800270a:	2b02      	cmp	r3, #2
 800270c:	d005      	beq.n	800271a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2204      	movs	r2, #4
 8002712:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
 8002718:	e051      	b.n	80027be <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 020e 	bic.w	r2, r2, #14
 8002728:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0201 	bic.w	r2, r2, #1
 8002738:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a22      	ldr	r2, [pc, #136]	; (80027c8 <HAL_DMA_Abort_IT+0xd0>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d029      	beq.n	8002798 <HAL_DMA_Abort_IT+0xa0>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a20      	ldr	r2, [pc, #128]	; (80027cc <HAL_DMA_Abort_IT+0xd4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d022      	beq.n	8002794 <HAL_DMA_Abort_IT+0x9c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1f      	ldr	r2, [pc, #124]	; (80027d0 <HAL_DMA_Abort_IT+0xd8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d01a      	beq.n	800278e <HAL_DMA_Abort_IT+0x96>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a1d      	ldr	r2, [pc, #116]	; (80027d4 <HAL_DMA_Abort_IT+0xdc>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d012      	beq.n	8002788 <HAL_DMA_Abort_IT+0x90>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a1c      	ldr	r2, [pc, #112]	; (80027d8 <HAL_DMA_Abort_IT+0xe0>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d00a      	beq.n	8002782 <HAL_DMA_Abort_IT+0x8a>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1a      	ldr	r2, [pc, #104]	; (80027dc <HAL_DMA_Abort_IT+0xe4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d102      	bne.n	800277c <HAL_DMA_Abort_IT+0x84>
 8002776:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800277a:	e00e      	b.n	800279a <HAL_DMA_Abort_IT+0xa2>
 800277c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002780:	e00b      	b.n	800279a <HAL_DMA_Abort_IT+0xa2>
 8002782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002786:	e008      	b.n	800279a <HAL_DMA_Abort_IT+0xa2>
 8002788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800278c:	e005      	b.n	800279a <HAL_DMA_Abort_IT+0xa2>
 800278e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002792:	e002      	b.n	800279a <HAL_DMA_Abort_IT+0xa2>
 8002794:	2310      	movs	r3, #16
 8002796:	e000      	b.n	800279a <HAL_DMA_Abort_IT+0xa2>
 8002798:	2301      	movs	r3, #1
 800279a:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <HAL_DMA_Abort_IT+0xe8>)
 800279c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	4798      	blx	r3
    } 
  }
  return status;
 80027be:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40020008 	.word	0x40020008
 80027cc:	4002001c 	.word	0x4002001c
 80027d0:	40020030 	.word	0x40020030
 80027d4:	40020044 	.word	0x40020044
 80027d8:	40020058 	.word	0x40020058
 80027dc:	4002006c 	.word	0x4002006c
 80027e0:	40020000 	.word	0x40020000

080027e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b08b      	sub	sp, #44	; 0x2c
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027ee:	2300      	movs	r3, #0
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027f2:	2300      	movs	r3, #0
 80027f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027f6:	e169      	b.n	8002acc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027f8:	2201      	movs	r2, #1
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69fa      	ldr	r2, [r7, #28]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	429a      	cmp	r2, r3
 8002812:	f040 8158 	bne.w	8002ac6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	4a9a      	ldr	r2, [pc, #616]	; (8002a84 <HAL_GPIO_Init+0x2a0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d05e      	beq.n	80028de <HAL_GPIO_Init+0xfa>
 8002820:	4a98      	ldr	r2, [pc, #608]	; (8002a84 <HAL_GPIO_Init+0x2a0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d875      	bhi.n	8002912 <HAL_GPIO_Init+0x12e>
 8002826:	4a98      	ldr	r2, [pc, #608]	; (8002a88 <HAL_GPIO_Init+0x2a4>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d058      	beq.n	80028de <HAL_GPIO_Init+0xfa>
 800282c:	4a96      	ldr	r2, [pc, #600]	; (8002a88 <HAL_GPIO_Init+0x2a4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d86f      	bhi.n	8002912 <HAL_GPIO_Init+0x12e>
 8002832:	4a96      	ldr	r2, [pc, #600]	; (8002a8c <HAL_GPIO_Init+0x2a8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d052      	beq.n	80028de <HAL_GPIO_Init+0xfa>
 8002838:	4a94      	ldr	r2, [pc, #592]	; (8002a8c <HAL_GPIO_Init+0x2a8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d869      	bhi.n	8002912 <HAL_GPIO_Init+0x12e>
 800283e:	4a94      	ldr	r2, [pc, #592]	; (8002a90 <HAL_GPIO_Init+0x2ac>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d04c      	beq.n	80028de <HAL_GPIO_Init+0xfa>
 8002844:	4a92      	ldr	r2, [pc, #584]	; (8002a90 <HAL_GPIO_Init+0x2ac>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d863      	bhi.n	8002912 <HAL_GPIO_Init+0x12e>
 800284a:	4a92      	ldr	r2, [pc, #584]	; (8002a94 <HAL_GPIO_Init+0x2b0>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d046      	beq.n	80028de <HAL_GPIO_Init+0xfa>
 8002850:	4a90      	ldr	r2, [pc, #576]	; (8002a94 <HAL_GPIO_Init+0x2b0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d85d      	bhi.n	8002912 <HAL_GPIO_Init+0x12e>
 8002856:	2b12      	cmp	r3, #18
 8002858:	d82a      	bhi.n	80028b0 <HAL_GPIO_Init+0xcc>
 800285a:	2b12      	cmp	r3, #18
 800285c:	d859      	bhi.n	8002912 <HAL_GPIO_Init+0x12e>
 800285e:	a201      	add	r2, pc, #4	; (adr r2, 8002864 <HAL_GPIO_Init+0x80>)
 8002860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002864:	080028df 	.word	0x080028df
 8002868:	080028b9 	.word	0x080028b9
 800286c:	080028cb 	.word	0x080028cb
 8002870:	0800290d 	.word	0x0800290d
 8002874:	08002913 	.word	0x08002913
 8002878:	08002913 	.word	0x08002913
 800287c:	08002913 	.word	0x08002913
 8002880:	08002913 	.word	0x08002913
 8002884:	08002913 	.word	0x08002913
 8002888:	08002913 	.word	0x08002913
 800288c:	08002913 	.word	0x08002913
 8002890:	08002913 	.word	0x08002913
 8002894:	08002913 	.word	0x08002913
 8002898:	08002913 	.word	0x08002913
 800289c:	08002913 	.word	0x08002913
 80028a0:	08002913 	.word	0x08002913
 80028a4:	08002913 	.word	0x08002913
 80028a8:	080028c1 	.word	0x080028c1
 80028ac:	080028d5 	.word	0x080028d5
 80028b0:	4a79      	ldr	r2, [pc, #484]	; (8002a98 <HAL_GPIO_Init+0x2b4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d013      	beq.n	80028de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028b6:	e02c      	b.n	8002912 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	623b      	str	r3, [r7, #32]
          break;
 80028be:	e029      	b.n	8002914 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	3304      	adds	r3, #4
 80028c6:	623b      	str	r3, [r7, #32]
          break;
 80028c8:	e024      	b.n	8002914 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	3308      	adds	r3, #8
 80028d0:	623b      	str	r3, [r7, #32]
          break;
 80028d2:	e01f      	b.n	8002914 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	330c      	adds	r3, #12
 80028da:	623b      	str	r3, [r7, #32]
          break;
 80028dc:	e01a      	b.n	8002914 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d102      	bne.n	80028ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028e6:	2304      	movs	r3, #4
 80028e8:	623b      	str	r3, [r7, #32]
          break;
 80028ea:	e013      	b.n	8002914 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d105      	bne.n	8002900 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028f4:	2308      	movs	r3, #8
 80028f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	611a      	str	r2, [r3, #16]
          break;
 80028fe:	e009      	b.n	8002914 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002900:	2308      	movs	r3, #8
 8002902:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	615a      	str	r2, [r3, #20]
          break;
 800290a:	e003      	b.n	8002914 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800290c:	2300      	movs	r3, #0
 800290e:	623b      	str	r3, [r7, #32]
          break;
 8002910:	e000      	b.n	8002914 <HAL_GPIO_Init+0x130>
          break;
 8002912:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	2bff      	cmp	r3, #255	; 0xff
 8002918:	d801      	bhi.n	800291e <HAL_GPIO_Init+0x13a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	e001      	b.n	8002922 <HAL_GPIO_Init+0x13e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3304      	adds	r3, #4
 8002922:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	2bff      	cmp	r3, #255	; 0xff
 8002928:	d802      	bhi.n	8002930 <HAL_GPIO_Init+0x14c>
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	e002      	b.n	8002936 <HAL_GPIO_Init+0x152>
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	3b08      	subs	r3, #8
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	210f      	movs	r1, #15
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	fa01 f303 	lsl.w	r3, r1, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	401a      	ands	r2, r3
 8002948:	6a39      	ldr	r1, [r7, #32]
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	fa01 f303 	lsl.w	r3, r1, r3
 8002950:	431a      	orrs	r2, r3
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 80b1 	beq.w	8002ac6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002964:	4b4d      	ldr	r3, [pc, #308]	; (8002a9c <HAL_GPIO_Init+0x2b8>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	4a4c      	ldr	r2, [pc, #304]	; (8002a9c <HAL_GPIO_Init+0x2b8>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6193      	str	r3, [r2, #24]
 8002970:	4b4a      	ldr	r3, [pc, #296]	; (8002a9c <HAL_GPIO_Init+0x2b8>)
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800297c:	4a48      	ldr	r2, [pc, #288]	; (8002aa0 <HAL_GPIO_Init+0x2bc>)
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	3302      	adds	r3, #2
 8002984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002988:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	220f      	movs	r2, #15
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4013      	ands	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a40      	ldr	r2, [pc, #256]	; (8002aa4 <HAL_GPIO_Init+0x2c0>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d013      	beq.n	80029d0 <HAL_GPIO_Init+0x1ec>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a3f      	ldr	r2, [pc, #252]	; (8002aa8 <HAL_GPIO_Init+0x2c4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d00d      	beq.n	80029cc <HAL_GPIO_Init+0x1e8>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a3e      	ldr	r2, [pc, #248]	; (8002aac <HAL_GPIO_Init+0x2c8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d007      	beq.n	80029c8 <HAL_GPIO_Init+0x1e4>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a3d      	ldr	r2, [pc, #244]	; (8002ab0 <HAL_GPIO_Init+0x2cc>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d101      	bne.n	80029c4 <HAL_GPIO_Init+0x1e0>
 80029c0:	2303      	movs	r3, #3
 80029c2:	e006      	b.n	80029d2 <HAL_GPIO_Init+0x1ee>
 80029c4:	2304      	movs	r3, #4
 80029c6:	e004      	b.n	80029d2 <HAL_GPIO_Init+0x1ee>
 80029c8:	2302      	movs	r3, #2
 80029ca:	e002      	b.n	80029d2 <HAL_GPIO_Init+0x1ee>
 80029cc:	2301      	movs	r3, #1
 80029ce:	e000      	b.n	80029d2 <HAL_GPIO_Init+0x1ee>
 80029d0:	2300      	movs	r3, #0
 80029d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d4:	f002 0203 	and.w	r2, r2, #3
 80029d8:	0092      	lsls	r2, r2, #2
 80029da:	4093      	lsls	r3, r2
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029e2:	492f      	ldr	r1, [pc, #188]	; (8002aa0 <HAL_GPIO_Init+0x2bc>)
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	089b      	lsrs	r3, r3, #2
 80029e8:	3302      	adds	r3, #2
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d006      	beq.n	8002a0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029fc:	4b2d      	ldr	r3, [pc, #180]	; (8002ab4 <HAL_GPIO_Init+0x2d0>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	492c      	ldr	r1, [pc, #176]	; (8002ab4 <HAL_GPIO_Init+0x2d0>)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	600b      	str	r3, [r1, #0]
 8002a08:	e006      	b.n	8002a18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a0a:	4b2a      	ldr	r3, [pc, #168]	; (8002ab4 <HAL_GPIO_Init+0x2d0>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	4928      	ldr	r1, [pc, #160]	; (8002ab4 <HAL_GPIO_Init+0x2d0>)
 8002a14:	4013      	ands	r3, r2
 8002a16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d006      	beq.n	8002a32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a24:	4b23      	ldr	r3, [pc, #140]	; (8002ab4 <HAL_GPIO_Init+0x2d0>)
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	4922      	ldr	r1, [pc, #136]	; (8002ab4 <HAL_GPIO_Init+0x2d0>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	604b      	str	r3, [r1, #4]
 8002a30:	e006      	b.n	8002a40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a32:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <HAL_GPIO_Init+0x2d0>)
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	491e      	ldr	r1, [pc, #120]	; (8002ab4 <HAL_GPIO_Init+0x2d0>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d006      	beq.n	8002a5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a4c:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <HAL_GPIO_Init+0x2d0>)
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	4918      	ldr	r1, [pc, #96]	; (8002ab4 <HAL_GPIO_Init+0x2d0>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	608b      	str	r3, [r1, #8]
 8002a58:	e006      	b.n	8002a68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <HAL_GPIO_Init+0x2d0>)
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	4914      	ldr	r1, [pc, #80]	; (8002ab4 <HAL_GPIO_Init+0x2d0>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d021      	beq.n	8002ab8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <HAL_GPIO_Init+0x2d0>)
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	490e      	ldr	r1, [pc, #56]	; (8002ab4 <HAL_GPIO_Init+0x2d0>)
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60cb      	str	r3, [r1, #12]
 8002a80:	e021      	b.n	8002ac6 <HAL_GPIO_Init+0x2e2>
 8002a82:	bf00      	nop
 8002a84:	10320000 	.word	0x10320000
 8002a88:	10310000 	.word	0x10310000
 8002a8c:	10220000 	.word	0x10220000
 8002a90:	10210000 	.word	0x10210000
 8002a94:	10120000 	.word	0x10120000
 8002a98:	10110000 	.word	0x10110000
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40010000 	.word	0x40010000
 8002aa4:	40010800 	.word	0x40010800
 8002aa8:	40010c00 	.word	0x40010c00
 8002aac:	40011000 	.word	0x40011000
 8002ab0:	40011400 	.word	0x40011400
 8002ab4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_GPIO_Init+0x304>)
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	4909      	ldr	r1, [pc, #36]	; (8002ae8 <HAL_GPIO_Init+0x304>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	3301      	adds	r3, #1
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f47f ae8e 	bne.w	80027f8 <HAL_GPIO_Init+0x14>
  }
}
 8002adc:	bf00      	nop
 8002ade:	bf00      	nop
 8002ae0:	372c      	adds	r7, #44	; 0x2c
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bc80      	pop	{r7}
 8002ae6:	4770      	bx	lr
 8002ae8:	40010400 	.word	0x40010400

08002aec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	887b      	ldrh	r3, [r7, #2]
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b04:	2301      	movs	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
 8002b08:	e001      	b.n	8002b0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr

08002b1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	460b      	mov	r3, r1
 8002b24:	807b      	strh	r3, [r7, #2]
 8002b26:	4613      	mov	r3, r2
 8002b28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b2a:	787b      	ldrb	r3, [r7, #1]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b30:	887a      	ldrh	r2, [r7, #2]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b36:	e003      	b.n	8002b40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b38:	887b      	ldrh	r3, [r7, #2]
 8002b3a:	041a      	lsls	r2, r3, #16
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	611a      	str	r2, [r3, #16]
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr

08002b4a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b085      	sub	sp, #20
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	460b      	mov	r3, r1
 8002b54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b5c:	887a      	ldrh	r2, [r7, #2]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4013      	ands	r3, r2
 8002b62:	041a      	lsls	r2, r3, #16
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	43d9      	mvns	r1, r3
 8002b68:	887b      	ldrh	r3, [r7, #2]
 8002b6a:	400b      	ands	r3, r1
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	611a      	str	r2, [r3, #16]
}
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr

08002b7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e12b      	b.n	8002de6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fe fbac 	bl	8001300 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2224      	movs	r2, #36	; 0x24
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002be0:	f001 fb90 	bl	8004304 <HAL_RCC_GetPCLK1Freq>
 8002be4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4a81      	ldr	r2, [pc, #516]	; (8002df0 <HAL_I2C_Init+0x274>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d807      	bhi.n	8002c00 <HAL_I2C_Init+0x84>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a80      	ldr	r2, [pc, #512]	; (8002df4 <HAL_I2C_Init+0x278>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	bf94      	ite	ls
 8002bf8:	2301      	movls	r3, #1
 8002bfa:	2300      	movhi	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	e006      	b.n	8002c0e <HAL_I2C_Init+0x92>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4a7d      	ldr	r2, [pc, #500]	; (8002df8 <HAL_I2C_Init+0x27c>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	bf94      	ite	ls
 8002c08:	2301      	movls	r3, #1
 8002c0a:	2300      	movhi	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e0e7      	b.n	8002de6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4a78      	ldr	r2, [pc, #480]	; (8002dfc <HAL_I2C_Init+0x280>)
 8002c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1e:	0c9b      	lsrs	r3, r3, #18
 8002c20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4a6a      	ldr	r2, [pc, #424]	; (8002df0 <HAL_I2C_Init+0x274>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d802      	bhi.n	8002c50 <HAL_I2C_Init+0xd4>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	e009      	b.n	8002c64 <HAL_I2C_Init+0xe8>
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	4a69      	ldr	r2, [pc, #420]	; (8002e00 <HAL_I2C_Init+0x284>)
 8002c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c60:	099b      	lsrs	r3, r3, #6
 8002c62:	3301      	adds	r3, #1
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	495c      	ldr	r1, [pc, #368]	; (8002df0 <HAL_I2C_Init+0x274>)
 8002c80:	428b      	cmp	r3, r1
 8002c82:	d819      	bhi.n	8002cb8 <HAL_I2C_Init+0x13c>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	1e59      	subs	r1, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c92:	1c59      	adds	r1, r3, #1
 8002c94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c98:	400b      	ands	r3, r1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <HAL_I2C_Init+0x138>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1e59      	subs	r1, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cac:	3301      	adds	r3, #1
 8002cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb2:	e051      	b.n	8002d58 <HAL_I2C_Init+0x1dc>
 8002cb4:	2304      	movs	r3, #4
 8002cb6:	e04f      	b.n	8002d58 <HAL_I2C_Init+0x1dc>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d111      	bne.n	8002ce4 <HAL_I2C_Init+0x168>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1e58      	subs	r0, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6859      	ldr	r1, [r3, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	440b      	add	r3, r1
 8002cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf0c      	ite	eq
 8002cdc:	2301      	moveq	r3, #1
 8002cde:	2300      	movne	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	e012      	b.n	8002d0a <HAL_I2C_Init+0x18e>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1e58      	subs	r0, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6859      	ldr	r1, [r3, #4]
 8002cec:	460b      	mov	r3, r1
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	0099      	lsls	r1, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf0c      	ite	eq
 8002d04:	2301      	moveq	r3, #1
 8002d06:	2300      	movne	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_I2C_Init+0x196>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e022      	b.n	8002d58 <HAL_I2C_Init+0x1dc>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10e      	bne.n	8002d38 <HAL_I2C_Init+0x1bc>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1e58      	subs	r0, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6859      	ldr	r1, [r3, #4]
 8002d22:	460b      	mov	r3, r1
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	440b      	add	r3, r1
 8002d28:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d36:	e00f      	b.n	8002d58 <HAL_I2C_Init+0x1dc>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1e58      	subs	r0, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	0099      	lsls	r1, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	6809      	ldr	r1, [r1, #0]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69da      	ldr	r2, [r3, #28]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6911      	ldr	r1, [r2, #16]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68d2      	ldr	r2, [r2, #12]
 8002d92:	4311      	orrs	r1, r2
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695a      	ldr	r2, [r3, #20]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	000186a0 	.word	0x000186a0
 8002df4:	001e847f 	.word	0x001e847f
 8002df8:	003d08ff 	.word	0x003d08ff
 8002dfc:	431bde83 	.word	0x431bde83
 8002e00:	10624dd3 	.word	0x10624dd3

08002e04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	607a      	str	r2, [r7, #4]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	460b      	mov	r3, r1
 8002e12:	817b      	strh	r3, [r7, #10]
 8002e14:	4613      	mov	r3, r2
 8002e16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e18:	f7ff faf8 	bl	800240c <HAL_GetTick>
 8002e1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b20      	cmp	r3, #32
 8002e28:	f040 80e0 	bne.w	8002fec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	2319      	movs	r3, #25
 8002e32:	2201      	movs	r2, #1
 8002e34:	4970      	ldr	r1, [pc, #448]	; (8002ff8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 fcb4 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e42:	2302      	movs	r3, #2
 8002e44:	e0d3      	b.n	8002fee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_I2C_Master_Transmit+0x50>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e0cc      	b.n	8002fee <HAL_I2C_Master_Transmit+0x1ea>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d007      	beq.n	8002e7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0201 	orr.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2221      	movs	r2, #33	; 0x21
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2210      	movs	r2, #16
 8002e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	893a      	ldrh	r2, [r7, #8]
 8002eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4a50      	ldr	r2, [pc, #320]	; (8002ffc <HAL_I2C_Master_Transmit+0x1f8>)
 8002eba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ebc:	8979      	ldrh	r1, [r7, #10]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	6a3a      	ldr	r2, [r7, #32]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 fb04 	bl	80034d0 <I2C_MasterRequestWrite>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e08d      	b.n	8002fee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ee8:	e066      	b.n	8002fb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	6a39      	ldr	r1, [r7, #32]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 fd2e 	bl	8003950 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00d      	beq.n	8002f16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d107      	bne.n	8002f12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e06b      	b.n	8002fee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	781a      	ldrb	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d11b      	bne.n	8002f8c <HAL_I2C_Master_Transmit+0x188>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d017      	beq.n	8002f8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	781a      	ldrb	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	6a39      	ldr	r1, [r7, #32]
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 fd1e 	bl	80039d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00d      	beq.n	8002fb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d107      	bne.n	8002fb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e01a      	b.n	8002fee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d194      	bne.n	8002eea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	e000      	b.n	8002fee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002fec:	2302      	movs	r3, #2
  }
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	00100002 	.word	0x00100002
 8002ffc:	ffff0000 	.word	0xffff0000

08003000 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08c      	sub	sp, #48	; 0x30
 8003004:	af02      	add	r7, sp, #8
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	4608      	mov	r0, r1
 800300a:	4611      	mov	r1, r2
 800300c:	461a      	mov	r2, r3
 800300e:	4603      	mov	r3, r0
 8003010:	817b      	strh	r3, [r7, #10]
 8003012:	460b      	mov	r3, r1
 8003014:	813b      	strh	r3, [r7, #8]
 8003016:	4613      	mov	r3, r2
 8003018:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800301e:	f7ff f9f5 	bl	800240c <HAL_GetTick>
 8003022:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b20      	cmp	r3, #32
 800302e:	f040 8244 	bne.w	80034ba <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	2319      	movs	r3, #25
 8003038:	2201      	movs	r2, #1
 800303a:	4982      	ldr	r1, [pc, #520]	; (8003244 <HAL_I2C_Mem_Read+0x244>)
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 fbb1 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003048:	2302      	movs	r3, #2
 800304a:	e237      	b.n	80034bc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_I2C_Mem_Read+0x5a>
 8003056:	2302      	movs	r3, #2
 8003058:	e230      	b.n	80034bc <HAL_I2C_Mem_Read+0x4bc>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b01      	cmp	r3, #1
 800306e:	d007      	beq.n	8003080 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800308e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2222      	movs	r2, #34	; 0x22
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2240      	movs	r2, #64	; 0x40
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80030b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4a62      	ldr	r2, [pc, #392]	; (8003248 <HAL_I2C_Mem_Read+0x248>)
 80030c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030c2:	88f8      	ldrh	r0, [r7, #6]
 80030c4:	893a      	ldrh	r2, [r7, #8]
 80030c6:	8979      	ldrh	r1, [r7, #10]
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	9301      	str	r3, [sp, #4]
 80030cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	4603      	mov	r3, r0
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 fa7e 	bl	80035d4 <I2C_RequestMemoryRead>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e1ec      	b.n	80034bc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d113      	bne.n	8003112 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ea:	2300      	movs	r3, #0
 80030ec:	61fb      	str	r3, [r7, #28]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	61fb      	str	r3, [r7, #28]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	e1c0      	b.n	8003494 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003116:	2b01      	cmp	r3, #1
 8003118:	d11e      	bne.n	8003158 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003128:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800312a:	b672      	cpsid	i
}
 800312c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	61bb      	str	r3, [r7, #24]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	61bb      	str	r3, [r7, #24]
 8003142:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003152:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003154:	b662      	cpsie	i
}
 8003156:	e035      	b.n	80031c4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315c:	2b02      	cmp	r3, #2
 800315e:	d11e      	bne.n	800319e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800316e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003170:	b672      	cpsid	i
}
 8003172:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003174:	2300      	movs	r3, #0
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003198:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800319a:	b662      	cpsie	i
}
 800319c:	e012      	b.n	80031c4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031ac:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80031c4:	e166      	b.n	8003494 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	f200 811f 	bhi.w	800340e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d123      	bne.n	8003220 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 fc39 	bl	8003a54 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e167      	b.n	80034bc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800321e:	e139      	b.n	8003494 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003224:	2b02      	cmp	r3, #2
 8003226:	d152      	bne.n	80032ce <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800322e:	2200      	movs	r2, #0
 8003230:	4906      	ldr	r1, [pc, #24]	; (800324c <HAL_I2C_Mem_Read+0x24c>)
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 fab6 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d008      	beq.n	8003250 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e13c      	b.n	80034bc <HAL_I2C_Mem_Read+0x4bc>
 8003242:	bf00      	nop
 8003244:	00100002 	.word	0x00100002
 8003248:	ffff0000 	.word	0xffff0000
 800324c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003250:	b672      	cpsid	i
}
 8003252:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003262:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691a      	ldr	r2, [r3, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003296:	b662      	cpsie	i
}
 8003298:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032cc:	e0e2      	b.n	8003494 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d4:	2200      	movs	r2, #0
 80032d6:	497b      	ldr	r1, [pc, #492]	; (80034c4 <HAL_I2C_Mem_Read+0x4c4>)
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 fa63 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0e9      	b.n	80034bc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80032f8:	b672      	cpsid	i
}
 80032fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003324:	b29b      	uxth	r3, r3
 8003326:	3b01      	subs	r3, #1
 8003328:	b29a      	uxth	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800332e:	4b66      	ldr	r3, [pc, #408]	; (80034c8 <HAL_I2C_Mem_Read+0x4c8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	08db      	lsrs	r3, r3, #3
 8003334:	4a65      	ldr	r2, [pc, #404]	; (80034cc <HAL_I2C_Mem_Read+0x4cc>)
 8003336:	fba2 2303 	umull	r2, r3, r2, r3
 800333a:	0a1a      	lsrs	r2, r3, #8
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	00da      	lsls	r2, r3, #3
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	3b01      	subs	r3, #1
 800334c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d118      	bne.n	8003386 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f043 0220 	orr.w	r2, r3, #32
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003376:	b662      	cpsie	i
}
 8003378:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e09a      	b.n	80034bc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b04      	cmp	r3, #4
 8003392:	d1d9      	bne.n	8003348 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	1c5a      	adds	r2, r3, #1
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80033d6:	b662      	cpsie	i
}
 80033d8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003402:	b29b      	uxth	r3, r3
 8003404:	3b01      	subs	r3, #1
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800340c:	e042      	b.n	8003494 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800340e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003410:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 fb1e 	bl	8003a54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e04c      	b.n	80034bc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	1c5a      	adds	r2, r3, #1
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343e:	3b01      	subs	r3, #1
 8003440:	b29a      	uxth	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f003 0304 	and.w	r3, r3, #4
 800345e:	2b04      	cmp	r3, #4
 8003460:	d118      	bne.n	8003494 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003498:	2b00      	cmp	r3, #0
 800349a:	f47f ae94 	bne.w	80031c6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	e000      	b.n	80034bc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80034ba:	2302      	movs	r3, #2
  }
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3728      	adds	r7, #40	; 0x28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	00010004 	.word	0x00010004
 80034c8:	20000000 	.word	0x20000000
 80034cc:	14f8b589 	.word	0x14f8b589

080034d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	460b      	mov	r3, r1
 80034de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d006      	beq.n	80034fa <I2C_MasterRequestWrite+0x2a>
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d003      	beq.n	80034fa <I2C_MasterRequestWrite+0x2a>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034f8:	d108      	bne.n	800350c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	e00b      	b.n	8003524 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	2b12      	cmp	r3, #18
 8003512:	d107      	bne.n	8003524 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003522:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 f937 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00d      	beq.n	8003558 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354a:	d103      	bne.n	8003554 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003552:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e035      	b.n	80035c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003560:	d108      	bne.n	8003574 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003562:	897b      	ldrh	r3, [r7, #10]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003570:	611a      	str	r2, [r3, #16]
 8003572:	e01b      	b.n	80035ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003574:	897b      	ldrh	r3, [r7, #10]
 8003576:	11db      	asrs	r3, r3, #7
 8003578:	b2db      	uxtb	r3, r3
 800357a:	f003 0306 	and.w	r3, r3, #6
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f063 030f 	orn	r3, r3, #15
 8003584:	b2da      	uxtb	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	490e      	ldr	r1, [pc, #56]	; (80035cc <I2C_MasterRequestWrite+0xfc>)
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 f95d 	bl	8003852 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e010      	b.n	80035c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035a2:	897b      	ldrh	r3, [r7, #10]
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	4907      	ldr	r1, [pc, #28]	; (80035d0 <I2C_MasterRequestWrite+0x100>)
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f000 f94d 	bl	8003852 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	00010008 	.word	0x00010008
 80035d0:	00010002 	.word	0x00010002

080035d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b088      	sub	sp, #32
 80035d8:	af02      	add	r7, sp, #8
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	4608      	mov	r0, r1
 80035de:	4611      	mov	r1, r2
 80035e0:	461a      	mov	r2, r3
 80035e2:	4603      	mov	r3, r0
 80035e4:	817b      	strh	r3, [r7, #10]
 80035e6:	460b      	mov	r3, r1
 80035e8:	813b      	strh	r3, [r7, #8]
 80035ea:	4613      	mov	r3, r2
 80035ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800360c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	2200      	movs	r2, #0
 8003616:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f8c2 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00d      	beq.n	8003642 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003634:	d103      	bne.n	800363e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800363c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e0aa      	b.n	8003798 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003642:	897b      	ldrh	r3, [r7, #10]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	461a      	mov	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003650:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	6a3a      	ldr	r2, [r7, #32]
 8003656:	4952      	ldr	r1, [pc, #328]	; (80037a0 <I2C_RequestMemoryRead+0x1cc>)
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f8fa 	bl	8003852 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e097      	b.n	8003798 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800367e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003680:	6a39      	ldr	r1, [r7, #32]
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f964 	bl	8003950 <I2C_WaitOnTXEFlagUntilTimeout>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00d      	beq.n	80036aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	2b04      	cmp	r3, #4
 8003694:	d107      	bne.n	80036a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e076      	b.n	8003798 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d105      	bne.n	80036bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036b0:	893b      	ldrh	r3, [r7, #8]
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	611a      	str	r2, [r3, #16]
 80036ba:	e021      	b.n	8003700 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036bc:	893b      	ldrh	r3, [r7, #8]
 80036be:	0a1b      	lsrs	r3, r3, #8
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036cc:	6a39      	ldr	r1, [r7, #32]
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 f93e 	bl	8003950 <I2C_WaitOnTXEFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00d      	beq.n	80036f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d107      	bne.n	80036f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e050      	b.n	8003798 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036f6:	893b      	ldrh	r3, [r7, #8]
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003702:	6a39      	ldr	r1, [r7, #32]
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f923 	bl	8003950 <I2C_WaitOnTXEFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00d      	beq.n	800372c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	2b04      	cmp	r3, #4
 8003716:	d107      	bne.n	8003728 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003726:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e035      	b.n	8003798 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800373a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	2200      	movs	r2, #0
 8003744:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f82b 	bl	80037a4 <I2C_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00d      	beq.n	8003770 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003762:	d103      	bne.n	800376c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800376a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e013      	b.n	8003798 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003770:	897b      	ldrh	r3, [r7, #10]
 8003772:	b2db      	uxtb	r3, r3
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	b2da      	uxtb	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	6a3a      	ldr	r2, [r7, #32]
 8003784:	4906      	ldr	r1, [pc, #24]	; (80037a0 <I2C_RequestMemoryRead+0x1cc>)
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f863 	bl	8003852 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	00010002 	.word	0x00010002

080037a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	4613      	mov	r3, r2
 80037b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037b4:	e025      	b.n	8003802 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037bc:	d021      	beq.n	8003802 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037be:	f7fe fe25 	bl	800240c <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d302      	bcc.n	80037d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d116      	bne.n	8003802 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f043 0220 	orr.w	r2, r3, #32
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e023      	b.n	800384a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	0c1b      	lsrs	r3, r3, #16
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	d10d      	bne.n	8003828 <I2C_WaitOnFlagUntilTimeout+0x84>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	43da      	mvns	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4013      	ands	r3, r2
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	bf0c      	ite	eq
 800381e:	2301      	moveq	r3, #1
 8003820:	2300      	movne	r3, #0
 8003822:	b2db      	uxtb	r3, r3
 8003824:	461a      	mov	r2, r3
 8003826:	e00c      	b.n	8003842 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	43da      	mvns	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4013      	ands	r3, r2
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	bf0c      	ite	eq
 800383a:	2301      	moveq	r3, #1
 800383c:	2300      	movne	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	429a      	cmp	r2, r3
 8003846:	d0b6      	beq.n	80037b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
 800385e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003860:	e051      	b.n	8003906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003870:	d123      	bne.n	80038ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003880:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800388a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2220      	movs	r2, #32
 8003896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	f043 0204 	orr.w	r2, r3, #4
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e046      	b.n	8003948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c0:	d021      	beq.n	8003906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c2:	f7fe fda3 	bl	800240c <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d302      	bcc.n	80038d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d116      	bne.n	8003906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f043 0220 	orr.w	r2, r3, #32
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e020      	b.n	8003948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	0c1b      	lsrs	r3, r3, #16
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	d10c      	bne.n	800392a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	43da      	mvns	r2, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4013      	ands	r3, r2
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	bf14      	ite	ne
 8003922:	2301      	movne	r3, #1
 8003924:	2300      	moveq	r3, #0
 8003926:	b2db      	uxtb	r3, r3
 8003928:	e00b      	b.n	8003942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	43da      	mvns	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	4013      	ands	r3, r2
 8003936:	b29b      	uxth	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf14      	ite	ne
 800393c:	2301      	movne	r3, #1
 800393e:	2300      	moveq	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d18d      	bne.n	8003862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800395c:	e02d      	b.n	80039ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 f8ce 	bl	8003b00 <I2C_IsAcknowledgeFailed>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e02d      	b.n	80039ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003974:	d021      	beq.n	80039ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003976:	f7fe fd49 	bl	800240c <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	429a      	cmp	r2, r3
 8003984:	d302      	bcc.n	800398c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d116      	bne.n	80039ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f043 0220 	orr.w	r2, r3, #32
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e007      	b.n	80039ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	695b      	ldr	r3, [r3, #20]
 80039c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c4:	2b80      	cmp	r3, #128	; 0x80
 80039c6:	d1ca      	bne.n	800395e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039de:	e02d      	b.n	8003a3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f88d 	bl	8003b00 <I2C_IsAcknowledgeFailed>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e02d      	b.n	8003a4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f6:	d021      	beq.n	8003a3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f8:	f7fe fd08 	bl	800240c <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d302      	bcc.n	8003a0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d116      	bne.n	8003a3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	f043 0220 	orr.w	r2, r3, #32
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e007      	b.n	8003a4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d1ca      	bne.n	80039e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a60:	e042      	b.n	8003ae8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	f003 0310 	and.w	r3, r3, #16
 8003a6c:	2b10      	cmp	r3, #16
 8003a6e:	d119      	bne.n	8003aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f06f 0210 	mvn.w	r2, #16
 8003a78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e029      	b.n	8003af8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa4:	f7fe fcb2 	bl	800240c <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d302      	bcc.n	8003aba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d116      	bne.n	8003ae8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	f043 0220 	orr.w	r2, r3, #32
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e007      	b.n	8003af8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af2:	2b40      	cmp	r3, #64	; 0x40
 8003af4:	d1b5      	bne.n	8003a62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b16:	d11b      	bne.n	8003b50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	f043 0204 	orr.w	r2, r3, #4
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e000      	b.n	8003b52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr

08003b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e272      	b.n	8004054 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 8087 	beq.w	8003c8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b7c:	4b92      	ldr	r3, [pc, #584]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 030c 	and.w	r3, r3, #12
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d00c      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b88:	4b8f      	ldr	r3, [pc, #572]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 030c 	and.w	r3, r3, #12
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d112      	bne.n	8003bba <HAL_RCC_OscConfig+0x5e>
 8003b94:	4b8c      	ldr	r3, [pc, #560]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba0:	d10b      	bne.n	8003bba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba2:	4b89      	ldr	r3, [pc, #548]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d06c      	beq.n	8003c88 <HAL_RCC_OscConfig+0x12c>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d168      	bne.n	8003c88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e24c      	b.n	8004054 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc2:	d106      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x76>
 8003bc4:	4b80      	ldr	r3, [pc, #512]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a7f      	ldr	r2, [pc, #508]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	e02e      	b.n	8003c30 <HAL_RCC_OscConfig+0xd4>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x98>
 8003bda:	4b7b      	ldr	r3, [pc, #492]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a7a      	ldr	r2, [pc, #488]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	4b78      	ldr	r3, [pc, #480]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a77      	ldr	r2, [pc, #476]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	e01d      	b.n	8003c30 <HAL_RCC_OscConfig+0xd4>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bfc:	d10c      	bne.n	8003c18 <HAL_RCC_OscConfig+0xbc>
 8003bfe:	4b72      	ldr	r3, [pc, #456]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a71      	ldr	r2, [pc, #452]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c08:	6013      	str	r3, [r2, #0]
 8003c0a:	4b6f      	ldr	r3, [pc, #444]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a6e      	ldr	r2, [pc, #440]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	e00b      	b.n	8003c30 <HAL_RCC_OscConfig+0xd4>
 8003c18:	4b6b      	ldr	r3, [pc, #428]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a6a      	ldr	r2, [pc, #424]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	4b68      	ldr	r3, [pc, #416]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a67      	ldr	r2, [pc, #412]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d013      	beq.n	8003c60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c38:	f7fe fbe8 	bl	800240c <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c40:	f7fe fbe4 	bl	800240c <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b64      	cmp	r3, #100	; 0x64
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e200      	b.n	8004054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c52:	4b5d      	ldr	r3, [pc, #372]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f0      	beq.n	8003c40 <HAL_RCC_OscConfig+0xe4>
 8003c5e:	e014      	b.n	8003c8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c60:	f7fe fbd4 	bl	800240c <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c68:	f7fe fbd0 	bl	800240c <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b64      	cmp	r3, #100	; 0x64
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e1ec      	b.n	8004054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c7a:	4b53      	ldr	r3, [pc, #332]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f0      	bne.n	8003c68 <HAL_RCC_OscConfig+0x10c>
 8003c86:	e000      	b.n	8003c8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d063      	beq.n	8003d5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c96:	4b4c      	ldr	r3, [pc, #304]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f003 030c 	and.w	r3, r3, #12
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00b      	beq.n	8003cba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ca2:	4b49      	ldr	r3, [pc, #292]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d11c      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x18c>
 8003cae:	4b46      	ldr	r3, [pc, #280]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d116      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cba:	4b43      	ldr	r3, [pc, #268]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d005      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x176>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d001      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e1c0      	b.n	8004054 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd2:	4b3d      	ldr	r3, [pc, #244]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	4939      	ldr	r1, [pc, #228]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ce6:	e03a      	b.n	8003d5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d020      	beq.n	8003d32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf0:	4b36      	ldr	r3, [pc, #216]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf6:	f7fe fb89 	bl	800240c <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cfe:	f7fe fb85 	bl	800240c <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e1a1      	b.n	8004054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d10:	4b2d      	ldr	r3, [pc, #180]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d0f0      	beq.n	8003cfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1c:	4b2a      	ldr	r3, [pc, #168]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4927      	ldr	r1, [pc, #156]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	600b      	str	r3, [r1, #0]
 8003d30:	e015      	b.n	8003d5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d32:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <HAL_RCC_OscConfig+0x270>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d38:	f7fe fb68 	bl	800240c <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d40:	f7fe fb64 	bl	800240c <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e180      	b.n	8004054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d52:	4b1d      	ldr	r3, [pc, #116]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f0      	bne.n	8003d40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d03a      	beq.n	8003de0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d019      	beq.n	8003da6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d72:	4b17      	ldr	r3, [pc, #92]	; (8003dd0 <HAL_RCC_OscConfig+0x274>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d78:	f7fe fb48 	bl	800240c <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d80:	f7fe fb44 	bl	800240c <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e160      	b.n	8004054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d92:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <HAL_RCC_OscConfig+0x26c>)
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d9e:	2001      	movs	r0, #1
 8003da0:	f000 fad8 	bl	8004354 <RCC_Delay>
 8003da4:	e01c      	b.n	8003de0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da6:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <HAL_RCC_OscConfig+0x274>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dac:	f7fe fb2e 	bl	800240c <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db2:	e00f      	b.n	8003dd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db4:	f7fe fb2a 	bl	800240c <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d908      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e146      	b.n	8004054 <HAL_RCC_OscConfig+0x4f8>
 8003dc6:	bf00      	nop
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	42420000 	.word	0x42420000
 8003dd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd4:	4b92      	ldr	r3, [pc, #584]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e9      	bne.n	8003db4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80a6 	beq.w	8003f3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dee:	2300      	movs	r3, #0
 8003df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df2:	4b8b      	ldr	r3, [pc, #556]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10d      	bne.n	8003e1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfe:	4b88      	ldr	r3, [pc, #544]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	4a87      	ldr	r2, [pc, #540]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e08:	61d3      	str	r3, [r2, #28]
 8003e0a:	4b85      	ldr	r3, [pc, #532]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e12:	60bb      	str	r3, [r7, #8]
 8003e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e16:	2301      	movs	r3, #1
 8003e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1a:	4b82      	ldr	r3, [pc, #520]	; (8004024 <HAL_RCC_OscConfig+0x4c8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d118      	bne.n	8003e58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e26:	4b7f      	ldr	r3, [pc, #508]	; (8004024 <HAL_RCC_OscConfig+0x4c8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a7e      	ldr	r2, [pc, #504]	; (8004024 <HAL_RCC_OscConfig+0x4c8>)
 8003e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e32:	f7fe faeb 	bl	800240c <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e3a:	f7fe fae7 	bl	800240c <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b64      	cmp	r3, #100	; 0x64
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e103      	b.n	8004054 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e4c:	4b75      	ldr	r3, [pc, #468]	; (8004024 <HAL_RCC_OscConfig+0x4c8>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0f0      	beq.n	8003e3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d106      	bne.n	8003e6e <HAL_RCC_OscConfig+0x312>
 8003e60:	4b6f      	ldr	r3, [pc, #444]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	4a6e      	ldr	r2, [pc, #440]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6213      	str	r3, [r2, #32]
 8003e6c:	e02d      	b.n	8003eca <HAL_RCC_OscConfig+0x36e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10c      	bne.n	8003e90 <HAL_RCC_OscConfig+0x334>
 8003e76:	4b6a      	ldr	r3, [pc, #424]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	4a69      	ldr	r2, [pc, #420]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	6213      	str	r3, [r2, #32]
 8003e82:	4b67      	ldr	r3, [pc, #412]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	4a66      	ldr	r2, [pc, #408]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003e88:	f023 0304 	bic.w	r3, r3, #4
 8003e8c:	6213      	str	r3, [r2, #32]
 8003e8e:	e01c      	b.n	8003eca <HAL_RCC_OscConfig+0x36e>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2b05      	cmp	r3, #5
 8003e96:	d10c      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x356>
 8003e98:	4b61      	ldr	r3, [pc, #388]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	4a60      	ldr	r2, [pc, #384]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003e9e:	f043 0304 	orr.w	r3, r3, #4
 8003ea2:	6213      	str	r3, [r2, #32]
 8003ea4:	4b5e      	ldr	r3, [pc, #376]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	4a5d      	ldr	r2, [pc, #372]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6213      	str	r3, [r2, #32]
 8003eb0:	e00b      	b.n	8003eca <HAL_RCC_OscConfig+0x36e>
 8003eb2:	4b5b      	ldr	r3, [pc, #364]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	4a5a      	ldr	r2, [pc, #360]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	6213      	str	r3, [r2, #32]
 8003ebe:	4b58      	ldr	r3, [pc, #352]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	4a57      	ldr	r2, [pc, #348]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003ec4:	f023 0304 	bic.w	r3, r3, #4
 8003ec8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d015      	beq.n	8003efe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ed2:	f7fe fa9b 	bl	800240c <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed8:	e00a      	b.n	8003ef0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eda:	f7fe fa97 	bl	800240c <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0b1      	b.n	8004054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef0:	4b4b      	ldr	r3, [pc, #300]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0ee      	beq.n	8003eda <HAL_RCC_OscConfig+0x37e>
 8003efc:	e014      	b.n	8003f28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003efe:	f7fe fa85 	bl	800240c <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f04:	e00a      	b.n	8003f1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f06:	f7fe fa81 	bl	800240c <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e09b      	b.n	8004054 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f1c:	4b40      	ldr	r3, [pc, #256]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1ee      	bne.n	8003f06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f28:	7dfb      	ldrb	r3, [r7, #23]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d105      	bne.n	8003f3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2e:	4b3c      	ldr	r3, [pc, #240]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	4a3b      	ldr	r2, [pc, #236]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 8087 	beq.w	8004052 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f44:	4b36      	ldr	r3, [pc, #216]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 030c 	and.w	r3, r3, #12
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d061      	beq.n	8004014 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d146      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f58:	4b33      	ldr	r3, [pc, #204]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5e:	f7fe fa55 	bl	800240c <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f66:	f7fe fa51 	bl	800240c <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e06d      	b.n	8004054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f78:	4b29      	ldr	r3, [pc, #164]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1f0      	bne.n	8003f66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8c:	d108      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f8e:	4b24      	ldr	r3, [pc, #144]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	4921      	ldr	r1, [pc, #132]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa0:	4b1f      	ldr	r3, [pc, #124]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a19      	ldr	r1, [r3, #32]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	491b      	ldr	r1, [pc, #108]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fb8:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003fba:	2201      	movs	r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbe:	f7fe fa25 	bl	800240c <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc6:	f7fe fa21 	bl	800240c <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e03d      	b.n	8004054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fd8:	4b11      	ldr	r3, [pc, #68]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x46a>
 8003fe4:	e035      	b.n	8004052 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe6:	4b10      	ldr	r3, [pc, #64]	; (8004028 <HAL_RCC_OscConfig+0x4cc>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fe fa0e 	bl	800240c <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff4:	f7fe fa0a 	bl	800240c <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e026      	b.n	8004054 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004006:	4b06      	ldr	r3, [pc, #24]	; (8004020 <HAL_RCC_OscConfig+0x4c4>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x498>
 8004012:	e01e      	b.n	8004052 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d107      	bne.n	800402c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e019      	b.n	8004054 <HAL_RCC_OscConfig+0x4f8>
 8004020:	40021000 	.word	0x40021000
 8004024:	40007000 	.word	0x40007000
 8004028:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800402c:	4b0b      	ldr	r3, [pc, #44]	; (800405c <HAL_RCC_OscConfig+0x500>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	429a      	cmp	r2, r3
 800403e:	d106      	bne.n	800404e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404a:	429a      	cmp	r2, r3
 800404c:	d001      	beq.n	8004052 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e000      	b.n	8004054 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	40021000 	.word	0x40021000

08004060 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0d0      	b.n	8004216 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004074:	4b6a      	ldr	r3, [pc, #424]	; (8004220 <HAL_RCC_ClockConfig+0x1c0>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d910      	bls.n	80040a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004082:	4b67      	ldr	r3, [pc, #412]	; (8004220 <HAL_RCC_ClockConfig+0x1c0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 0207 	bic.w	r2, r3, #7
 800408a:	4965      	ldr	r1, [pc, #404]	; (8004220 <HAL_RCC_ClockConfig+0x1c0>)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004092:	4b63      	ldr	r3, [pc, #396]	; (8004220 <HAL_RCC_ClockConfig+0x1c0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0b8      	b.n	8004216 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d020      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040bc:	4b59      	ldr	r3, [pc, #356]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	4a58      	ldr	r2, [pc, #352]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 80040c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040d4:	4b53      	ldr	r3, [pc, #332]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	4a52      	ldr	r2, [pc, #328]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 80040da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80040de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e0:	4b50      	ldr	r3, [pc, #320]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	494d      	ldr	r1, [pc, #308]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d040      	beq.n	8004180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d107      	bne.n	8004116 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004106:	4b47      	ldr	r3, [pc, #284]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d115      	bne.n	800413e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e07f      	b.n	8004216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b02      	cmp	r3, #2
 800411c:	d107      	bne.n	800412e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411e:	4b41      	ldr	r3, [pc, #260]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d109      	bne.n	800413e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e073      	b.n	8004216 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412e:	4b3d      	ldr	r3, [pc, #244]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0302 	and.w	r3, r3, #2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e06b      	b.n	8004216 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800413e:	4b39      	ldr	r3, [pc, #228]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f023 0203 	bic.w	r2, r3, #3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	4936      	ldr	r1, [pc, #216]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 800414c:	4313      	orrs	r3, r2
 800414e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004150:	f7fe f95c 	bl	800240c <HAL_GetTick>
 8004154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004156:	e00a      	b.n	800416e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004158:	f7fe f958 	bl	800240c <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	f241 3288 	movw	r2, #5000	; 0x1388
 8004166:	4293      	cmp	r3, r2
 8004168:	d901      	bls.n	800416e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e053      	b.n	8004216 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416e:	4b2d      	ldr	r3, [pc, #180]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f003 020c 	and.w	r2, r3, #12
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	429a      	cmp	r2, r3
 800417e:	d1eb      	bne.n	8004158 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004180:	4b27      	ldr	r3, [pc, #156]	; (8004220 <HAL_RCC_ClockConfig+0x1c0>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d210      	bcs.n	80041b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418e:	4b24      	ldr	r3, [pc, #144]	; (8004220 <HAL_RCC_ClockConfig+0x1c0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f023 0207 	bic.w	r2, r3, #7
 8004196:	4922      	ldr	r1, [pc, #136]	; (8004220 <HAL_RCC_ClockConfig+0x1c0>)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	4313      	orrs	r3, r2
 800419c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800419e:	4b20      	ldr	r3, [pc, #128]	; (8004220 <HAL_RCC_ClockConfig+0x1c0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d001      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e032      	b.n	8004216 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041bc:	4b19      	ldr	r3, [pc, #100]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	4916      	ldr	r1, [pc, #88]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d009      	beq.n	80041ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041da:	4b12      	ldr	r3, [pc, #72]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	490e      	ldr	r1, [pc, #56]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041ee:	f000 f821 	bl	8004234 <HAL_RCC_GetSysClockFreq>
 80041f2:	4602      	mov	r2, r0
 80041f4:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <HAL_RCC_ClockConfig+0x1c4>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	091b      	lsrs	r3, r3, #4
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	490a      	ldr	r1, [pc, #40]	; (8004228 <HAL_RCC_ClockConfig+0x1c8>)
 8004200:	5ccb      	ldrb	r3, [r1, r3]
 8004202:	fa22 f303 	lsr.w	r3, r2, r3
 8004206:	4a09      	ldr	r2, [pc, #36]	; (800422c <HAL_RCC_ClockConfig+0x1cc>)
 8004208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800420a:	4b09      	ldr	r3, [pc, #36]	; (8004230 <HAL_RCC_ClockConfig+0x1d0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe f8ba 	bl	8002388 <HAL_InitTick>

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40022000 	.word	0x40022000
 8004224:	40021000 	.word	0x40021000
 8004228:	08007c14 	.word	0x08007c14
 800422c:	20000000 	.word	0x20000000
 8004230:	20000010 	.word	0x20000010

08004234 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004234:	b490      	push	{r4, r7}
 8004236:	b08a      	sub	sp, #40	; 0x28
 8004238:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800423a:	4b29      	ldr	r3, [pc, #164]	; (80042e0 <HAL_RCC_GetSysClockFreq+0xac>)
 800423c:	1d3c      	adds	r4, r7, #4
 800423e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004240:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004244:	f240 2301 	movw	r3, #513	; 0x201
 8004248:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800424a:	2300      	movs	r3, #0
 800424c:	61fb      	str	r3, [r7, #28]
 800424e:	2300      	movs	r3, #0
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	2300      	movs	r3, #0
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800425a:	2300      	movs	r3, #0
 800425c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800425e:	4b21      	ldr	r3, [pc, #132]	; (80042e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	2b04      	cmp	r3, #4
 800426c:	d002      	beq.n	8004274 <HAL_RCC_GetSysClockFreq+0x40>
 800426e:	2b08      	cmp	r3, #8
 8004270:	d003      	beq.n	800427a <HAL_RCC_GetSysClockFreq+0x46>
 8004272:	e02b      	b.n	80042cc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004274:	4b1c      	ldr	r3, [pc, #112]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004276:	623b      	str	r3, [r7, #32]
      break;
 8004278:	e02b      	b.n	80042d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	0c9b      	lsrs	r3, r3, #18
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	3328      	adds	r3, #40	; 0x28
 8004284:	443b      	add	r3, r7
 8004286:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800428a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d012      	beq.n	80042bc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004296:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	0c5b      	lsrs	r3, r3, #17
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	3328      	adds	r3, #40	; 0x28
 80042a2:	443b      	add	r3, r7
 80042a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80042a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	4a0e      	ldr	r2, [pc, #56]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80042ae:	fb03 f202 	mul.w	r2, r3, r2
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24
 80042ba:	e004      	b.n	80042c6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	4a0b      	ldr	r2, [pc, #44]	; (80042ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80042c0:	fb02 f303 	mul.w	r3, r2, r3
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	623b      	str	r3, [r7, #32]
      break;
 80042ca:	e002      	b.n	80042d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042cc:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80042ce:	623b      	str	r3, [r7, #32]
      break;
 80042d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042d2:	6a3b      	ldr	r3, [r7, #32]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3728      	adds	r7, #40	; 0x28
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc90      	pop	{r4, r7}
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	08007c04 	.word	0x08007c04
 80042e4:	40021000 	.word	0x40021000
 80042e8:	007a1200 	.word	0x007a1200
 80042ec:	003d0900 	.word	0x003d0900

080042f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042f4:	4b02      	ldr	r3, [pc, #8]	; (8004300 <HAL_RCC_GetHCLKFreq+0x10>)
 80042f6:	681b      	ldr	r3, [r3, #0]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr
 8004300:	20000000 	.word	0x20000000

08004304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004308:	f7ff fff2 	bl	80042f0 <HAL_RCC_GetHCLKFreq>
 800430c:	4602      	mov	r2, r0
 800430e:	4b05      	ldr	r3, [pc, #20]	; (8004324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	0a1b      	lsrs	r3, r3, #8
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	4903      	ldr	r1, [pc, #12]	; (8004328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800431a:	5ccb      	ldrb	r3, [r1, r3]
 800431c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004320:	4618      	mov	r0, r3
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40021000 	.word	0x40021000
 8004328:	08007c24 	.word	0x08007c24

0800432c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004330:	f7ff ffde 	bl	80042f0 <HAL_RCC_GetHCLKFreq>
 8004334:	4602      	mov	r2, r0
 8004336:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	0adb      	lsrs	r3, r3, #11
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	4903      	ldr	r1, [pc, #12]	; (8004350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004342:	5ccb      	ldrb	r3, [r1, r3]
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004348:	4618      	mov	r0, r3
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40021000 	.word	0x40021000
 8004350:	08007c24 	.word	0x08007c24

08004354 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800435c:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <RCC_Delay+0x34>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a0a      	ldr	r2, [pc, #40]	; (800438c <RCC_Delay+0x38>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	0a5b      	lsrs	r3, r3, #9
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	fb02 f303 	mul.w	r3, r2, r3
 800436e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004370:	bf00      	nop
  }
  while (Delay --);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1e5a      	subs	r2, r3, #1
 8004376:	60fa      	str	r2, [r7, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f9      	bne.n	8004370 <RCC_Delay+0x1c>
}
 800437c:	bf00      	nop
 800437e:	bf00      	nop
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr
 8004388:	20000000 	.word	0x20000000
 800438c:	10624dd3 	.word	0x10624dd3

08004390 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e03f      	b.n	8004422 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d106      	bne.n	80043bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fd fcec 	bl	8001d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2224      	movs	r2, #36	; 0x24
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fc25 	bl	8004c24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	691a      	ldr	r2, [r3, #16]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695a      	ldr	r2, [r3, #20]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004408:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2220      	movs	r2, #32
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b08a      	sub	sp, #40	; 0x28
 800442e:	af02      	add	r7, sp, #8
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	603b      	str	r3, [r7, #0]
 8004436:	4613      	mov	r3, r2
 8004438:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b20      	cmp	r3, #32
 8004448:	d17c      	bne.n	8004544 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <HAL_UART_Transmit+0x2c>
 8004450:	88fb      	ldrh	r3, [r7, #6]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e075      	b.n	8004546 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_UART_Transmit+0x3e>
 8004464:	2302      	movs	r3, #2
 8004466:	e06e      	b.n	8004546 <HAL_UART_Transmit+0x11c>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2221      	movs	r2, #33	; 0x21
 800447a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800447e:	f7fd ffc5 	bl	800240c <HAL_GetTick>
 8004482:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	88fa      	ldrh	r2, [r7, #6]
 8004488:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	88fa      	ldrh	r2, [r7, #6]
 800448e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004498:	d108      	bne.n	80044ac <HAL_UART_Transmit+0x82>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d104      	bne.n	80044ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	e003      	b.n	80044b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80044bc:	e02a      	b.n	8004514 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2200      	movs	r2, #0
 80044c6:	2180      	movs	r1, #128	; 0x80
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 fa11 	bl	80048f0 <UART_WaitOnFlagUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e036      	b.n	8004546 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10b      	bne.n	80044f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	461a      	mov	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	3302      	adds	r3, #2
 80044f2:	61bb      	str	r3, [r7, #24]
 80044f4:	e007      	b.n	8004506 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	781a      	ldrb	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	3301      	adds	r3, #1
 8004504:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1cf      	bne.n	80044be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2200      	movs	r2, #0
 8004526:	2140      	movs	r1, #64	; 0x40
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 f9e1 	bl	80048f0 <UART_WaitOnFlagUntilTimeout>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e006      	b.n	8004546 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	e000      	b.n	8004546 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004544:	2302      	movs	r3, #2
  }
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08a      	sub	sp, #40	; 0x28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004570:	2300      	movs	r3, #0
 8004572:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10d      	bne.n	80045a2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d008      	beq.n	80045a2 <HAL_UART_IRQHandler+0x52>
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 fa99 	bl	8004ad2 <UART_Receive_IT>
      return;
 80045a0:	e17b      	b.n	800489a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80b1 	beq.w	800470c <HAL_UART_IRQHandler+0x1bc>
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d105      	bne.n	80045c0 <HAL_UART_IRQHandler+0x70>
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 80a6 	beq.w	800470c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_UART_IRQHandler+0x90>
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d8:	f043 0201 	orr.w	r2, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <HAL_UART_IRQHandler+0xb0>
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	f043 0202 	orr.w	r2, r3, #2
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_UART_IRQHandler+0xd0>
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	f043 0204 	orr.w	r2, r3, #4
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	f003 0308 	and.w	r3, r3, #8
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00f      	beq.n	800464a <HAL_UART_IRQHandler+0xfa>
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b00      	cmp	r3, #0
 8004632:	d104      	bne.n	800463e <HAL_UART_IRQHandler+0xee>
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f043 0208 	orr.w	r2, r3, #8
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 811e 	beq.w	8004890 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d007      	beq.n	800466e <HAL_UART_IRQHandler+0x11e>
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 fa32 	bl	8004ad2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf14      	ite	ne
 800467c:	2301      	movne	r3, #1
 800467e:	2300      	moveq	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d102      	bne.n	8004696 <HAL_UART_IRQHandler+0x146>
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d031      	beq.n	80046fa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f974 	bl	8004984 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d023      	beq.n	80046f2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695a      	ldr	r2, [r3, #20]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d013      	beq.n	80046ea <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	4a76      	ldr	r2, [pc, #472]	; (80048a0 <HAL_UART_IRQHandler+0x350>)
 80046c8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fe f812 	bl	80026f8 <HAL_DMA_Abort_IT>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d016      	beq.n	8004708 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046e4:	4610      	mov	r0, r2
 80046e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e8:	e00e      	b.n	8004708 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f8ec 	bl	80048c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f0:	e00a      	b.n	8004708 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f8e8 	bl	80048c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f8:	e006      	b.n	8004708 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f8e4 	bl	80048c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004706:	e0c3      	b.n	8004890 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004708:	bf00      	nop
    return;
 800470a:	e0c1      	b.n	8004890 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004710:	2b01      	cmp	r3, #1
 8004712:	f040 80a1 	bne.w	8004858 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 809b 	beq.w	8004858 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	f003 0310 	and.w	r3, r3, #16
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8095 	beq.w	8004858 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474e:	2b00      	cmp	r3, #0
 8004750:	d04e      	beq.n	80047f0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800475c:	8a3b      	ldrh	r3, [r7, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 8098 	beq.w	8004894 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004768:	8a3a      	ldrh	r2, [r7, #16]
 800476a:	429a      	cmp	r2, r3
 800476c:	f080 8092 	bcs.w	8004894 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	8a3a      	ldrh	r2, [r7, #16]
 8004774:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	2b20      	cmp	r3, #32
 800477e:	d02b      	beq.n	80047d8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800478e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695a      	ldr	r2, [r3, #20]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0201 	bic.w	r2, r2, #1
 800479e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695a      	ldr	r2, [r3, #20]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ae:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68da      	ldr	r2, [r3, #12]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0210 	bic.w	r2, r2, #16
 80047cc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fd ff55 	bl	8002682 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	4619      	mov	r1, r3
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f876 	bl	80048da <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80047ee:	e051      	b.n	8004894 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004802:	b29b      	uxth	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d047      	beq.n	8004898 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004808:	8a7b      	ldrh	r3, [r7, #18]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d044      	beq.n	8004898 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68da      	ldr	r2, [r3, #12]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800481c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695a      	ldr	r2, [r3, #20]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0201 	bic.w	r2, r2, #1
 800482c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0210 	bic.w	r2, r2, #16
 800484a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800484c:	8a7b      	ldrh	r3, [r7, #18]
 800484e:	4619      	mov	r1, r3
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f842 	bl	80048da <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004856:	e01f      	b.n	8004898 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485e:	2b00      	cmp	r3, #0
 8004860:	d008      	beq.n	8004874 <HAL_UART_IRQHandler+0x324>
 8004862:	6a3b      	ldr	r3, [r7, #32]
 8004864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f8c9 	bl	8004a04 <UART_Transmit_IT>
    return;
 8004872:	e012      	b.n	800489a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00d      	beq.n	800489a <HAL_UART_IRQHandler+0x34a>
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004884:	2b00      	cmp	r3, #0
 8004886:	d008      	beq.n	800489a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f90a 	bl	8004aa2 <UART_EndTransmit_IT>
    return;
 800488e:	e004      	b.n	800489a <HAL_UART_IRQHandler+0x34a>
    return;
 8004890:	bf00      	nop
 8004892:	e002      	b.n	800489a <HAL_UART_IRQHandler+0x34a>
      return;
 8004894:	bf00      	nop
 8004896:	e000      	b.n	800489a <HAL_UART_IRQHandler+0x34a>
      return;
 8004898:	bf00      	nop
  }
}
 800489a:	3728      	adds	r7, #40	; 0x28
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	080049dd 	.word	0x080049dd

080048a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr

080048b6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr

080048c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr

080048da <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
 80048e2:	460b      	mov	r3, r1
 80048e4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bc80      	pop	{r7}
 80048ee:	4770      	bx	lr

080048f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	4613      	mov	r3, r2
 80048fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004900:	e02c      	b.n	800495c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004908:	d028      	beq.n	800495c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800490a:	69bb      	ldr	r3, [r7, #24]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d007      	beq.n	8004920 <UART_WaitOnFlagUntilTimeout+0x30>
 8004910:	f7fd fd7c 	bl	800240c <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	429a      	cmp	r2, r3
 800491e:	d21d      	bcs.n	800495c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800492e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695a      	ldr	r2, [r3, #20]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0201 	bic.w	r2, r2, #1
 800493e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e00f      	b.n	800497c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	4013      	ands	r3, r2
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	429a      	cmp	r2, r3
 800496a:	bf0c      	ite	eq
 800496c:	2301      	moveq	r3, #1
 800496e:	2300      	movne	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	461a      	mov	r2, r3
 8004974:	79fb      	ldrb	r3, [r7, #7]
 8004976:	429a      	cmp	r2, r3
 8004978:	d0c3      	beq.n	8004902 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800499a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695a      	ldr	r2, [r3, #20]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0201 	bic.w	r2, r2, #1
 80049aa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d107      	bne.n	80049c4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f022 0210 	bic.w	r2, r2, #16
 80049c2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr

080049dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f7ff ff66 	bl	80048c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049fc:	bf00      	nop
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b21      	cmp	r3, #33	; 0x21
 8004a16:	d13e      	bne.n	8004a96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a20:	d114      	bne.n	8004a4c <UART_Transmit_IT+0x48>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d110      	bne.n	8004a4c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	1c9a      	adds	r2, r3, #2
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	621a      	str	r2, [r3, #32]
 8004a4a:	e008      	b.n	8004a5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	1c59      	adds	r1, r3, #1
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6211      	str	r1, [r2, #32]
 8004a56:	781a      	ldrb	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10f      	bne.n	8004a92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	e000      	b.n	8004a98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a96:	2302      	movs	r3, #2
  }
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr

08004aa2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ab8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff feee 	bl	80048a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b086      	sub	sp, #24
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b22      	cmp	r3, #34	; 0x22
 8004ae4:	f040 8099 	bne.w	8004c1a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af0:	d117      	bne.n	8004b22 <UART_Receive_IT+0x50>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d113      	bne.n	8004b22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b10:	b29a      	uxth	r2, r3
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1a:	1c9a      	adds	r2, r3, #2
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	629a      	str	r2, [r3, #40]	; 0x28
 8004b20:	e026      	b.n	8004b70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b26:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b34:	d007      	beq.n	8004b46 <UART_Receive_IT+0x74>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10a      	bne.n	8004b54 <UART_Receive_IT+0x82>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d106      	bne.n	8004b54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	e008      	b.n	8004b66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d148      	bne.n	8004c16 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0220 	bic.w	r2, r2, #32
 8004b92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ba2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	695a      	ldr	r2, [r3, #20]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0201 	bic.w	r2, r2, #1
 8004bb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d123      	bne.n	8004c0c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0210 	bic.w	r2, r2, #16
 8004bd8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0310 	and.w	r3, r3, #16
 8004be4:	2b10      	cmp	r3, #16
 8004be6:	d10a      	bne.n	8004bfe <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c02:	4619      	mov	r1, r3
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7ff fe68 	bl	80048da <HAL_UARTEx_RxEventCallback>
 8004c0a:	e002      	b.n	8004c12 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7ff fe52 	bl	80048b6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	e002      	b.n	8004c1c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004c16:	2300      	movs	r3, #0
 8004c18:	e000      	b.n	8004c1c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004c1a:	2302      	movs	r3, #2
  }
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689a      	ldr	r2, [r3, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004c5e:	f023 030c 	bic.w	r3, r3, #12
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6812      	ldr	r2, [r2, #0]
 8004c66:	68b9      	ldr	r1, [r7, #8]
 8004c68:	430b      	orrs	r3, r1
 8004c6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a2c      	ldr	r2, [pc, #176]	; (8004d38 <UART_SetConfig+0x114>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d103      	bne.n	8004c94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c8c:	f7ff fb4e 	bl	800432c <HAL_RCC_GetPCLK2Freq>
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	e002      	b.n	8004c9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c94:	f7ff fb36 	bl	8004304 <HAL_RCC_GetPCLK1Freq>
 8004c98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009a      	lsls	r2, r3, #2
 8004ca4:	441a      	add	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb0:	4a22      	ldr	r2, [pc, #136]	; (8004d3c <UART_SetConfig+0x118>)
 8004cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	0119      	lsls	r1, r3, #4
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009a      	lsls	r2, r3, #2
 8004cc4:	441a      	add	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cd0:	4b1a      	ldr	r3, [pc, #104]	; (8004d3c <UART_SetConfig+0x118>)
 8004cd2:	fba3 0302 	umull	r0, r3, r3, r2
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	2064      	movs	r0, #100	; 0x64
 8004cda:	fb00 f303 	mul.w	r3, r0, r3
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	3332      	adds	r3, #50	; 0x32
 8004ce4:	4a15      	ldr	r2, [pc, #84]	; (8004d3c <UART_SetConfig+0x118>)
 8004ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cf0:	4419      	add	r1, r3
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	009a      	lsls	r2, r3, #2
 8004cfc:	441a      	add	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d08:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <UART_SetConfig+0x118>)
 8004d0a:	fba3 0302 	umull	r0, r3, r3, r2
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	2064      	movs	r0, #100	; 0x64
 8004d12:	fb00 f303 	mul.w	r3, r0, r3
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	3332      	adds	r3, #50	; 0x32
 8004d1c:	4a07      	ldr	r2, [pc, #28]	; (8004d3c <UART_SetConfig+0x118>)
 8004d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d22:	095b      	lsrs	r3, r3, #5
 8004d24:	f003 020f 	and.w	r2, r3, #15
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	440a      	add	r2, r1
 8004d2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d30:	bf00      	nop
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40013800 	.word	0x40013800
 8004d3c:	51eb851f 	.word	0x51eb851f

08004d40 <__errno>:
 8004d40:	4b01      	ldr	r3, [pc, #4]	; (8004d48 <__errno+0x8>)
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	20000018 	.word	0x20000018

08004d4c <__libc_init_array>:
 8004d4c:	b570      	push	{r4, r5, r6, lr}
 8004d4e:	2600      	movs	r6, #0
 8004d50:	4d0c      	ldr	r5, [pc, #48]	; (8004d84 <__libc_init_array+0x38>)
 8004d52:	4c0d      	ldr	r4, [pc, #52]	; (8004d88 <__libc_init_array+0x3c>)
 8004d54:	1b64      	subs	r4, r4, r5
 8004d56:	10a4      	asrs	r4, r4, #2
 8004d58:	42a6      	cmp	r6, r4
 8004d5a:	d109      	bne.n	8004d70 <__libc_init_array+0x24>
 8004d5c:	f002 fefc 	bl	8007b58 <_init>
 8004d60:	2600      	movs	r6, #0
 8004d62:	4d0a      	ldr	r5, [pc, #40]	; (8004d8c <__libc_init_array+0x40>)
 8004d64:	4c0a      	ldr	r4, [pc, #40]	; (8004d90 <__libc_init_array+0x44>)
 8004d66:	1b64      	subs	r4, r4, r5
 8004d68:	10a4      	asrs	r4, r4, #2
 8004d6a:	42a6      	cmp	r6, r4
 8004d6c:	d105      	bne.n	8004d7a <__libc_init_array+0x2e>
 8004d6e:	bd70      	pop	{r4, r5, r6, pc}
 8004d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d74:	4798      	blx	r3
 8004d76:	3601      	adds	r6, #1
 8004d78:	e7ee      	b.n	8004d58 <__libc_init_array+0xc>
 8004d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d7e:	4798      	blx	r3
 8004d80:	3601      	adds	r6, #1
 8004d82:	e7f2      	b.n	8004d6a <__libc_init_array+0x1e>
 8004d84:	08008004 	.word	0x08008004
 8004d88:	08008004 	.word	0x08008004
 8004d8c:	08008004 	.word	0x08008004
 8004d90:	08008008 	.word	0x08008008

08004d94 <memset>:
 8004d94:	4603      	mov	r3, r0
 8004d96:	4402      	add	r2, r0
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d100      	bne.n	8004d9e <memset+0xa>
 8004d9c:	4770      	bx	lr
 8004d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004da2:	e7f9      	b.n	8004d98 <memset+0x4>

08004da4 <__cvt>:
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004daa:	461f      	mov	r7, r3
 8004dac:	bfbb      	ittet	lt
 8004dae:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004db2:	461f      	movlt	r7, r3
 8004db4:	2300      	movge	r3, #0
 8004db6:	232d      	movlt	r3, #45	; 0x2d
 8004db8:	b088      	sub	sp, #32
 8004dba:	4614      	mov	r4, r2
 8004dbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004dbe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004dc0:	7013      	strb	r3, [r2, #0]
 8004dc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004dc4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004dc8:	f023 0820 	bic.w	r8, r3, #32
 8004dcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004dd0:	d005      	beq.n	8004dde <__cvt+0x3a>
 8004dd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004dd6:	d100      	bne.n	8004dda <__cvt+0x36>
 8004dd8:	3501      	adds	r5, #1
 8004dda:	2302      	movs	r3, #2
 8004ddc:	e000      	b.n	8004de0 <__cvt+0x3c>
 8004dde:	2303      	movs	r3, #3
 8004de0:	aa07      	add	r2, sp, #28
 8004de2:	9204      	str	r2, [sp, #16]
 8004de4:	aa06      	add	r2, sp, #24
 8004de6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004dea:	e9cd 3500 	strd	r3, r5, [sp]
 8004dee:	4622      	mov	r2, r4
 8004df0:	463b      	mov	r3, r7
 8004df2:	f000 fce5 	bl	80057c0 <_dtoa_r>
 8004df6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004dfa:	4606      	mov	r6, r0
 8004dfc:	d102      	bne.n	8004e04 <__cvt+0x60>
 8004dfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e00:	07db      	lsls	r3, r3, #31
 8004e02:	d522      	bpl.n	8004e4a <__cvt+0xa6>
 8004e04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e08:	eb06 0905 	add.w	r9, r6, r5
 8004e0c:	d110      	bne.n	8004e30 <__cvt+0x8c>
 8004e0e:	7833      	ldrb	r3, [r6, #0]
 8004e10:	2b30      	cmp	r3, #48	; 0x30
 8004e12:	d10a      	bne.n	8004e2a <__cvt+0x86>
 8004e14:	2200      	movs	r2, #0
 8004e16:	2300      	movs	r3, #0
 8004e18:	4620      	mov	r0, r4
 8004e1a:	4639      	mov	r1, r7
 8004e1c:	f7fb fdc4 	bl	80009a8 <__aeabi_dcmpeq>
 8004e20:	b918      	cbnz	r0, 8004e2a <__cvt+0x86>
 8004e22:	f1c5 0501 	rsb	r5, r5, #1
 8004e26:	f8ca 5000 	str.w	r5, [sl]
 8004e2a:	f8da 3000 	ldr.w	r3, [sl]
 8004e2e:	4499      	add	r9, r3
 8004e30:	2200      	movs	r2, #0
 8004e32:	2300      	movs	r3, #0
 8004e34:	4620      	mov	r0, r4
 8004e36:	4639      	mov	r1, r7
 8004e38:	f7fb fdb6 	bl	80009a8 <__aeabi_dcmpeq>
 8004e3c:	b108      	cbz	r0, 8004e42 <__cvt+0x9e>
 8004e3e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004e42:	2230      	movs	r2, #48	; 0x30
 8004e44:	9b07      	ldr	r3, [sp, #28]
 8004e46:	454b      	cmp	r3, r9
 8004e48:	d307      	bcc.n	8004e5a <__cvt+0xb6>
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	9b07      	ldr	r3, [sp, #28]
 8004e4e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004e50:	1b9b      	subs	r3, r3, r6
 8004e52:	6013      	str	r3, [r2, #0]
 8004e54:	b008      	add	sp, #32
 8004e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e5a:	1c59      	adds	r1, r3, #1
 8004e5c:	9107      	str	r1, [sp, #28]
 8004e5e:	701a      	strb	r2, [r3, #0]
 8004e60:	e7f0      	b.n	8004e44 <__cvt+0xa0>

08004e62 <__exponent>:
 8004e62:	4603      	mov	r3, r0
 8004e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e66:	2900      	cmp	r1, #0
 8004e68:	f803 2b02 	strb.w	r2, [r3], #2
 8004e6c:	bfb6      	itet	lt
 8004e6e:	222d      	movlt	r2, #45	; 0x2d
 8004e70:	222b      	movge	r2, #43	; 0x2b
 8004e72:	4249      	neglt	r1, r1
 8004e74:	2909      	cmp	r1, #9
 8004e76:	7042      	strb	r2, [r0, #1]
 8004e78:	dd2b      	ble.n	8004ed2 <__exponent+0x70>
 8004e7a:	f10d 0407 	add.w	r4, sp, #7
 8004e7e:	46a4      	mov	ip, r4
 8004e80:	270a      	movs	r7, #10
 8004e82:	fb91 f6f7 	sdiv	r6, r1, r7
 8004e86:	460a      	mov	r2, r1
 8004e88:	46a6      	mov	lr, r4
 8004e8a:	fb07 1516 	mls	r5, r7, r6, r1
 8004e8e:	2a63      	cmp	r2, #99	; 0x63
 8004e90:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004e94:	4631      	mov	r1, r6
 8004e96:	f104 34ff 	add.w	r4, r4, #4294967295
 8004e9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004e9e:	dcf0      	bgt.n	8004e82 <__exponent+0x20>
 8004ea0:	3130      	adds	r1, #48	; 0x30
 8004ea2:	f1ae 0502 	sub.w	r5, lr, #2
 8004ea6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004eaa:	4629      	mov	r1, r5
 8004eac:	1c44      	adds	r4, r0, #1
 8004eae:	4561      	cmp	r1, ip
 8004eb0:	d30a      	bcc.n	8004ec8 <__exponent+0x66>
 8004eb2:	f10d 0209 	add.w	r2, sp, #9
 8004eb6:	eba2 020e 	sub.w	r2, r2, lr
 8004eba:	4565      	cmp	r5, ip
 8004ebc:	bf88      	it	hi
 8004ebe:	2200      	movhi	r2, #0
 8004ec0:	4413      	add	r3, r2
 8004ec2:	1a18      	subs	r0, r3, r0
 8004ec4:	b003      	add	sp, #12
 8004ec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ec8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ecc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004ed0:	e7ed      	b.n	8004eae <__exponent+0x4c>
 8004ed2:	2330      	movs	r3, #48	; 0x30
 8004ed4:	3130      	adds	r1, #48	; 0x30
 8004ed6:	7083      	strb	r3, [r0, #2]
 8004ed8:	70c1      	strb	r1, [r0, #3]
 8004eda:	1d03      	adds	r3, r0, #4
 8004edc:	e7f1      	b.n	8004ec2 <__exponent+0x60>
	...

08004ee0 <_printf_float>:
 8004ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee4:	b091      	sub	sp, #68	; 0x44
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004eec:	4616      	mov	r6, r2
 8004eee:	461f      	mov	r7, r3
 8004ef0:	4605      	mov	r5, r0
 8004ef2:	f001 fa53 	bl	800639c <_localeconv_r>
 8004ef6:	6803      	ldr	r3, [r0, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	9309      	str	r3, [sp, #36]	; 0x24
 8004efc:	f7fb f928 	bl	8000150 <strlen>
 8004f00:	2300      	movs	r3, #0
 8004f02:	930e      	str	r3, [sp, #56]	; 0x38
 8004f04:	f8d8 3000 	ldr.w	r3, [r8]
 8004f08:	900a      	str	r0, [sp, #40]	; 0x28
 8004f0a:	3307      	adds	r3, #7
 8004f0c:	f023 0307 	bic.w	r3, r3, #7
 8004f10:	f103 0208 	add.w	r2, r3, #8
 8004f14:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004f18:	f8d4 b000 	ldr.w	fp, [r4]
 8004f1c:	f8c8 2000 	str.w	r2, [r8]
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004f28:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004f2c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004f30:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f32:	f04f 32ff 	mov.w	r2, #4294967295
 8004f36:	4640      	mov	r0, r8
 8004f38:	4b9c      	ldr	r3, [pc, #624]	; (80051ac <_printf_float+0x2cc>)
 8004f3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f3c:	f7fb fd66 	bl	8000a0c <__aeabi_dcmpun>
 8004f40:	bb70      	cbnz	r0, 8004fa0 <_printf_float+0xc0>
 8004f42:	f04f 32ff 	mov.w	r2, #4294967295
 8004f46:	4640      	mov	r0, r8
 8004f48:	4b98      	ldr	r3, [pc, #608]	; (80051ac <_printf_float+0x2cc>)
 8004f4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f4c:	f7fb fd40 	bl	80009d0 <__aeabi_dcmple>
 8004f50:	bb30      	cbnz	r0, 8004fa0 <_printf_float+0xc0>
 8004f52:	2200      	movs	r2, #0
 8004f54:	2300      	movs	r3, #0
 8004f56:	4640      	mov	r0, r8
 8004f58:	4651      	mov	r1, sl
 8004f5a:	f7fb fd2f 	bl	80009bc <__aeabi_dcmplt>
 8004f5e:	b110      	cbz	r0, 8004f66 <_printf_float+0x86>
 8004f60:	232d      	movs	r3, #45	; 0x2d
 8004f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f66:	4b92      	ldr	r3, [pc, #584]	; (80051b0 <_printf_float+0x2d0>)
 8004f68:	4892      	ldr	r0, [pc, #584]	; (80051b4 <_printf_float+0x2d4>)
 8004f6a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004f6e:	bf94      	ite	ls
 8004f70:	4698      	movls	r8, r3
 8004f72:	4680      	movhi	r8, r0
 8004f74:	2303      	movs	r3, #3
 8004f76:	f04f 0a00 	mov.w	sl, #0
 8004f7a:	6123      	str	r3, [r4, #16]
 8004f7c:	f02b 0304 	bic.w	r3, fp, #4
 8004f80:	6023      	str	r3, [r4, #0]
 8004f82:	4633      	mov	r3, r6
 8004f84:	4621      	mov	r1, r4
 8004f86:	4628      	mov	r0, r5
 8004f88:	9700      	str	r7, [sp, #0]
 8004f8a:	aa0f      	add	r2, sp, #60	; 0x3c
 8004f8c:	f000 f9d4 	bl	8005338 <_printf_common>
 8004f90:	3001      	adds	r0, #1
 8004f92:	f040 8090 	bne.w	80050b6 <_printf_float+0x1d6>
 8004f96:	f04f 30ff 	mov.w	r0, #4294967295
 8004f9a:	b011      	add	sp, #68	; 0x44
 8004f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa0:	4642      	mov	r2, r8
 8004fa2:	4653      	mov	r3, sl
 8004fa4:	4640      	mov	r0, r8
 8004fa6:	4651      	mov	r1, sl
 8004fa8:	f7fb fd30 	bl	8000a0c <__aeabi_dcmpun>
 8004fac:	b148      	cbz	r0, 8004fc2 <_printf_float+0xe2>
 8004fae:	f1ba 0f00 	cmp.w	sl, #0
 8004fb2:	bfb8      	it	lt
 8004fb4:	232d      	movlt	r3, #45	; 0x2d
 8004fb6:	4880      	ldr	r0, [pc, #512]	; (80051b8 <_printf_float+0x2d8>)
 8004fb8:	bfb8      	it	lt
 8004fba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004fbe:	4b7f      	ldr	r3, [pc, #508]	; (80051bc <_printf_float+0x2dc>)
 8004fc0:	e7d3      	b.n	8004f6a <_printf_float+0x8a>
 8004fc2:	6863      	ldr	r3, [r4, #4]
 8004fc4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	d142      	bne.n	8005052 <_printf_float+0x172>
 8004fcc:	2306      	movs	r3, #6
 8004fce:	6063      	str	r3, [r4, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	9206      	str	r2, [sp, #24]
 8004fd4:	aa0e      	add	r2, sp, #56	; 0x38
 8004fd6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004fda:	aa0d      	add	r2, sp, #52	; 0x34
 8004fdc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004fe0:	9203      	str	r2, [sp, #12]
 8004fe2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004fe6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004fea:	6023      	str	r3, [r4, #0]
 8004fec:	6863      	ldr	r3, [r4, #4]
 8004fee:	4642      	mov	r2, r8
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	4628      	mov	r0, r5
 8004ff4:	4653      	mov	r3, sl
 8004ff6:	910b      	str	r1, [sp, #44]	; 0x2c
 8004ff8:	f7ff fed4 	bl	8004da4 <__cvt>
 8004ffc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ffe:	4680      	mov	r8, r0
 8005000:	2947      	cmp	r1, #71	; 0x47
 8005002:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005004:	d108      	bne.n	8005018 <_printf_float+0x138>
 8005006:	1cc8      	adds	r0, r1, #3
 8005008:	db02      	blt.n	8005010 <_printf_float+0x130>
 800500a:	6863      	ldr	r3, [r4, #4]
 800500c:	4299      	cmp	r1, r3
 800500e:	dd40      	ble.n	8005092 <_printf_float+0x1b2>
 8005010:	f1a9 0902 	sub.w	r9, r9, #2
 8005014:	fa5f f989 	uxtb.w	r9, r9
 8005018:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800501c:	d81f      	bhi.n	800505e <_printf_float+0x17e>
 800501e:	464a      	mov	r2, r9
 8005020:	3901      	subs	r1, #1
 8005022:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005026:	910d      	str	r1, [sp, #52]	; 0x34
 8005028:	f7ff ff1b 	bl	8004e62 <__exponent>
 800502c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800502e:	4682      	mov	sl, r0
 8005030:	1813      	adds	r3, r2, r0
 8005032:	2a01      	cmp	r2, #1
 8005034:	6123      	str	r3, [r4, #16]
 8005036:	dc02      	bgt.n	800503e <_printf_float+0x15e>
 8005038:	6822      	ldr	r2, [r4, #0]
 800503a:	07d2      	lsls	r2, r2, #31
 800503c:	d501      	bpl.n	8005042 <_printf_float+0x162>
 800503e:	3301      	adds	r3, #1
 8005040:	6123      	str	r3, [r4, #16]
 8005042:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005046:	2b00      	cmp	r3, #0
 8005048:	d09b      	beq.n	8004f82 <_printf_float+0xa2>
 800504a:	232d      	movs	r3, #45	; 0x2d
 800504c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005050:	e797      	b.n	8004f82 <_printf_float+0xa2>
 8005052:	2947      	cmp	r1, #71	; 0x47
 8005054:	d1bc      	bne.n	8004fd0 <_printf_float+0xf0>
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1ba      	bne.n	8004fd0 <_printf_float+0xf0>
 800505a:	2301      	movs	r3, #1
 800505c:	e7b7      	b.n	8004fce <_printf_float+0xee>
 800505e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005062:	d118      	bne.n	8005096 <_printf_float+0x1b6>
 8005064:	2900      	cmp	r1, #0
 8005066:	6863      	ldr	r3, [r4, #4]
 8005068:	dd0b      	ble.n	8005082 <_printf_float+0x1a2>
 800506a:	6121      	str	r1, [r4, #16]
 800506c:	b913      	cbnz	r3, 8005074 <_printf_float+0x194>
 800506e:	6822      	ldr	r2, [r4, #0]
 8005070:	07d0      	lsls	r0, r2, #31
 8005072:	d502      	bpl.n	800507a <_printf_float+0x19a>
 8005074:	3301      	adds	r3, #1
 8005076:	440b      	add	r3, r1
 8005078:	6123      	str	r3, [r4, #16]
 800507a:	f04f 0a00 	mov.w	sl, #0
 800507e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005080:	e7df      	b.n	8005042 <_printf_float+0x162>
 8005082:	b913      	cbnz	r3, 800508a <_printf_float+0x1aa>
 8005084:	6822      	ldr	r2, [r4, #0]
 8005086:	07d2      	lsls	r2, r2, #31
 8005088:	d501      	bpl.n	800508e <_printf_float+0x1ae>
 800508a:	3302      	adds	r3, #2
 800508c:	e7f4      	b.n	8005078 <_printf_float+0x198>
 800508e:	2301      	movs	r3, #1
 8005090:	e7f2      	b.n	8005078 <_printf_float+0x198>
 8005092:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005096:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005098:	4299      	cmp	r1, r3
 800509a:	db05      	blt.n	80050a8 <_printf_float+0x1c8>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	6121      	str	r1, [r4, #16]
 80050a0:	07d8      	lsls	r0, r3, #31
 80050a2:	d5ea      	bpl.n	800507a <_printf_float+0x19a>
 80050a4:	1c4b      	adds	r3, r1, #1
 80050a6:	e7e7      	b.n	8005078 <_printf_float+0x198>
 80050a8:	2900      	cmp	r1, #0
 80050aa:	bfcc      	ite	gt
 80050ac:	2201      	movgt	r2, #1
 80050ae:	f1c1 0202 	rsble	r2, r1, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	e7e0      	b.n	8005078 <_printf_float+0x198>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	055a      	lsls	r2, r3, #21
 80050ba:	d407      	bmi.n	80050cc <_printf_float+0x1ec>
 80050bc:	6923      	ldr	r3, [r4, #16]
 80050be:	4642      	mov	r2, r8
 80050c0:	4631      	mov	r1, r6
 80050c2:	4628      	mov	r0, r5
 80050c4:	47b8      	blx	r7
 80050c6:	3001      	adds	r0, #1
 80050c8:	d12b      	bne.n	8005122 <_printf_float+0x242>
 80050ca:	e764      	b.n	8004f96 <_printf_float+0xb6>
 80050cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80050d0:	f240 80dd 	bls.w	800528e <_printf_float+0x3ae>
 80050d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050d8:	2200      	movs	r2, #0
 80050da:	2300      	movs	r3, #0
 80050dc:	f7fb fc64 	bl	80009a8 <__aeabi_dcmpeq>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	d033      	beq.n	800514c <_printf_float+0x26c>
 80050e4:	2301      	movs	r3, #1
 80050e6:	4631      	mov	r1, r6
 80050e8:	4628      	mov	r0, r5
 80050ea:	4a35      	ldr	r2, [pc, #212]	; (80051c0 <_printf_float+0x2e0>)
 80050ec:	47b8      	blx	r7
 80050ee:	3001      	adds	r0, #1
 80050f0:	f43f af51 	beq.w	8004f96 <_printf_float+0xb6>
 80050f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050f8:	429a      	cmp	r2, r3
 80050fa:	db02      	blt.n	8005102 <_printf_float+0x222>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	07d8      	lsls	r0, r3, #31
 8005100:	d50f      	bpl.n	8005122 <_printf_float+0x242>
 8005102:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005106:	4631      	mov	r1, r6
 8005108:	4628      	mov	r0, r5
 800510a:	47b8      	blx	r7
 800510c:	3001      	adds	r0, #1
 800510e:	f43f af42 	beq.w	8004f96 <_printf_float+0xb6>
 8005112:	f04f 0800 	mov.w	r8, #0
 8005116:	f104 091a 	add.w	r9, r4, #26
 800511a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800511c:	3b01      	subs	r3, #1
 800511e:	4543      	cmp	r3, r8
 8005120:	dc09      	bgt.n	8005136 <_printf_float+0x256>
 8005122:	6823      	ldr	r3, [r4, #0]
 8005124:	079b      	lsls	r3, r3, #30
 8005126:	f100 8102 	bmi.w	800532e <_printf_float+0x44e>
 800512a:	68e0      	ldr	r0, [r4, #12]
 800512c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800512e:	4298      	cmp	r0, r3
 8005130:	bfb8      	it	lt
 8005132:	4618      	movlt	r0, r3
 8005134:	e731      	b.n	8004f9a <_printf_float+0xba>
 8005136:	2301      	movs	r3, #1
 8005138:	464a      	mov	r2, r9
 800513a:	4631      	mov	r1, r6
 800513c:	4628      	mov	r0, r5
 800513e:	47b8      	blx	r7
 8005140:	3001      	adds	r0, #1
 8005142:	f43f af28 	beq.w	8004f96 <_printf_float+0xb6>
 8005146:	f108 0801 	add.w	r8, r8, #1
 800514a:	e7e6      	b.n	800511a <_printf_float+0x23a>
 800514c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800514e:	2b00      	cmp	r3, #0
 8005150:	dc38      	bgt.n	80051c4 <_printf_float+0x2e4>
 8005152:	2301      	movs	r3, #1
 8005154:	4631      	mov	r1, r6
 8005156:	4628      	mov	r0, r5
 8005158:	4a19      	ldr	r2, [pc, #100]	; (80051c0 <_printf_float+0x2e0>)
 800515a:	47b8      	blx	r7
 800515c:	3001      	adds	r0, #1
 800515e:	f43f af1a 	beq.w	8004f96 <_printf_float+0xb6>
 8005162:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005166:	4313      	orrs	r3, r2
 8005168:	d102      	bne.n	8005170 <_printf_float+0x290>
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	07d9      	lsls	r1, r3, #31
 800516e:	d5d8      	bpl.n	8005122 <_printf_float+0x242>
 8005170:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005174:	4631      	mov	r1, r6
 8005176:	4628      	mov	r0, r5
 8005178:	47b8      	blx	r7
 800517a:	3001      	adds	r0, #1
 800517c:	f43f af0b 	beq.w	8004f96 <_printf_float+0xb6>
 8005180:	f04f 0900 	mov.w	r9, #0
 8005184:	f104 0a1a 	add.w	sl, r4, #26
 8005188:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800518a:	425b      	negs	r3, r3
 800518c:	454b      	cmp	r3, r9
 800518e:	dc01      	bgt.n	8005194 <_printf_float+0x2b4>
 8005190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005192:	e794      	b.n	80050be <_printf_float+0x1de>
 8005194:	2301      	movs	r3, #1
 8005196:	4652      	mov	r2, sl
 8005198:	4631      	mov	r1, r6
 800519a:	4628      	mov	r0, r5
 800519c:	47b8      	blx	r7
 800519e:	3001      	adds	r0, #1
 80051a0:	f43f aef9 	beq.w	8004f96 <_printf_float+0xb6>
 80051a4:	f109 0901 	add.w	r9, r9, #1
 80051a8:	e7ee      	b.n	8005188 <_printf_float+0x2a8>
 80051aa:	bf00      	nop
 80051ac:	7fefffff 	.word	0x7fefffff
 80051b0:	08007c30 	.word	0x08007c30
 80051b4:	08007c34 	.word	0x08007c34
 80051b8:	08007c3c 	.word	0x08007c3c
 80051bc:	08007c38 	.word	0x08007c38
 80051c0:	08007c40 	.word	0x08007c40
 80051c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051c8:	429a      	cmp	r2, r3
 80051ca:	bfa8      	it	ge
 80051cc:	461a      	movge	r2, r3
 80051ce:	2a00      	cmp	r2, #0
 80051d0:	4691      	mov	r9, r2
 80051d2:	dc37      	bgt.n	8005244 <_printf_float+0x364>
 80051d4:	f04f 0b00 	mov.w	fp, #0
 80051d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051dc:	f104 021a 	add.w	r2, r4, #26
 80051e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80051e4:	ebaa 0309 	sub.w	r3, sl, r9
 80051e8:	455b      	cmp	r3, fp
 80051ea:	dc33      	bgt.n	8005254 <_printf_float+0x374>
 80051ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80051f0:	429a      	cmp	r2, r3
 80051f2:	db3b      	blt.n	800526c <_printf_float+0x38c>
 80051f4:	6823      	ldr	r3, [r4, #0]
 80051f6:	07da      	lsls	r2, r3, #31
 80051f8:	d438      	bmi.n	800526c <_printf_float+0x38c>
 80051fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80051fe:	eba3 020a 	sub.w	r2, r3, sl
 8005202:	eba3 0901 	sub.w	r9, r3, r1
 8005206:	4591      	cmp	r9, r2
 8005208:	bfa8      	it	ge
 800520a:	4691      	movge	r9, r2
 800520c:	f1b9 0f00 	cmp.w	r9, #0
 8005210:	dc34      	bgt.n	800527c <_printf_float+0x39c>
 8005212:	f04f 0800 	mov.w	r8, #0
 8005216:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800521a:	f104 0a1a 	add.w	sl, r4, #26
 800521e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005222:	1a9b      	subs	r3, r3, r2
 8005224:	eba3 0309 	sub.w	r3, r3, r9
 8005228:	4543      	cmp	r3, r8
 800522a:	f77f af7a 	ble.w	8005122 <_printf_float+0x242>
 800522e:	2301      	movs	r3, #1
 8005230:	4652      	mov	r2, sl
 8005232:	4631      	mov	r1, r6
 8005234:	4628      	mov	r0, r5
 8005236:	47b8      	blx	r7
 8005238:	3001      	adds	r0, #1
 800523a:	f43f aeac 	beq.w	8004f96 <_printf_float+0xb6>
 800523e:	f108 0801 	add.w	r8, r8, #1
 8005242:	e7ec      	b.n	800521e <_printf_float+0x33e>
 8005244:	4613      	mov	r3, r2
 8005246:	4631      	mov	r1, r6
 8005248:	4642      	mov	r2, r8
 800524a:	4628      	mov	r0, r5
 800524c:	47b8      	blx	r7
 800524e:	3001      	adds	r0, #1
 8005250:	d1c0      	bne.n	80051d4 <_printf_float+0x2f4>
 8005252:	e6a0      	b.n	8004f96 <_printf_float+0xb6>
 8005254:	2301      	movs	r3, #1
 8005256:	4631      	mov	r1, r6
 8005258:	4628      	mov	r0, r5
 800525a:	920b      	str	r2, [sp, #44]	; 0x2c
 800525c:	47b8      	blx	r7
 800525e:	3001      	adds	r0, #1
 8005260:	f43f ae99 	beq.w	8004f96 <_printf_float+0xb6>
 8005264:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005266:	f10b 0b01 	add.w	fp, fp, #1
 800526a:	e7b9      	b.n	80051e0 <_printf_float+0x300>
 800526c:	4631      	mov	r1, r6
 800526e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005272:	4628      	mov	r0, r5
 8005274:	47b8      	blx	r7
 8005276:	3001      	adds	r0, #1
 8005278:	d1bf      	bne.n	80051fa <_printf_float+0x31a>
 800527a:	e68c      	b.n	8004f96 <_printf_float+0xb6>
 800527c:	464b      	mov	r3, r9
 800527e:	4631      	mov	r1, r6
 8005280:	4628      	mov	r0, r5
 8005282:	eb08 020a 	add.w	r2, r8, sl
 8005286:	47b8      	blx	r7
 8005288:	3001      	adds	r0, #1
 800528a:	d1c2      	bne.n	8005212 <_printf_float+0x332>
 800528c:	e683      	b.n	8004f96 <_printf_float+0xb6>
 800528e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005290:	2a01      	cmp	r2, #1
 8005292:	dc01      	bgt.n	8005298 <_printf_float+0x3b8>
 8005294:	07db      	lsls	r3, r3, #31
 8005296:	d537      	bpl.n	8005308 <_printf_float+0x428>
 8005298:	2301      	movs	r3, #1
 800529a:	4642      	mov	r2, r8
 800529c:	4631      	mov	r1, r6
 800529e:	4628      	mov	r0, r5
 80052a0:	47b8      	blx	r7
 80052a2:	3001      	adds	r0, #1
 80052a4:	f43f ae77 	beq.w	8004f96 <_printf_float+0xb6>
 80052a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052ac:	4631      	mov	r1, r6
 80052ae:	4628      	mov	r0, r5
 80052b0:	47b8      	blx	r7
 80052b2:	3001      	adds	r0, #1
 80052b4:	f43f ae6f 	beq.w	8004f96 <_printf_float+0xb6>
 80052b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052bc:	2200      	movs	r2, #0
 80052be:	2300      	movs	r3, #0
 80052c0:	f7fb fb72 	bl	80009a8 <__aeabi_dcmpeq>
 80052c4:	b9d8      	cbnz	r0, 80052fe <_printf_float+0x41e>
 80052c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052c8:	f108 0201 	add.w	r2, r8, #1
 80052cc:	3b01      	subs	r3, #1
 80052ce:	4631      	mov	r1, r6
 80052d0:	4628      	mov	r0, r5
 80052d2:	47b8      	blx	r7
 80052d4:	3001      	adds	r0, #1
 80052d6:	d10e      	bne.n	80052f6 <_printf_float+0x416>
 80052d8:	e65d      	b.n	8004f96 <_printf_float+0xb6>
 80052da:	2301      	movs	r3, #1
 80052dc:	464a      	mov	r2, r9
 80052de:	4631      	mov	r1, r6
 80052e0:	4628      	mov	r0, r5
 80052e2:	47b8      	blx	r7
 80052e4:	3001      	adds	r0, #1
 80052e6:	f43f ae56 	beq.w	8004f96 <_printf_float+0xb6>
 80052ea:	f108 0801 	add.w	r8, r8, #1
 80052ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80052f0:	3b01      	subs	r3, #1
 80052f2:	4543      	cmp	r3, r8
 80052f4:	dcf1      	bgt.n	80052da <_printf_float+0x3fa>
 80052f6:	4653      	mov	r3, sl
 80052f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80052fc:	e6e0      	b.n	80050c0 <_printf_float+0x1e0>
 80052fe:	f04f 0800 	mov.w	r8, #0
 8005302:	f104 091a 	add.w	r9, r4, #26
 8005306:	e7f2      	b.n	80052ee <_printf_float+0x40e>
 8005308:	2301      	movs	r3, #1
 800530a:	4642      	mov	r2, r8
 800530c:	e7df      	b.n	80052ce <_printf_float+0x3ee>
 800530e:	2301      	movs	r3, #1
 8005310:	464a      	mov	r2, r9
 8005312:	4631      	mov	r1, r6
 8005314:	4628      	mov	r0, r5
 8005316:	47b8      	blx	r7
 8005318:	3001      	adds	r0, #1
 800531a:	f43f ae3c 	beq.w	8004f96 <_printf_float+0xb6>
 800531e:	f108 0801 	add.w	r8, r8, #1
 8005322:	68e3      	ldr	r3, [r4, #12]
 8005324:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005326:	1a5b      	subs	r3, r3, r1
 8005328:	4543      	cmp	r3, r8
 800532a:	dcf0      	bgt.n	800530e <_printf_float+0x42e>
 800532c:	e6fd      	b.n	800512a <_printf_float+0x24a>
 800532e:	f04f 0800 	mov.w	r8, #0
 8005332:	f104 0919 	add.w	r9, r4, #25
 8005336:	e7f4      	b.n	8005322 <_printf_float+0x442>

08005338 <_printf_common>:
 8005338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800533c:	4616      	mov	r6, r2
 800533e:	4699      	mov	r9, r3
 8005340:	688a      	ldr	r2, [r1, #8]
 8005342:	690b      	ldr	r3, [r1, #16]
 8005344:	4607      	mov	r7, r0
 8005346:	4293      	cmp	r3, r2
 8005348:	bfb8      	it	lt
 800534a:	4613      	movlt	r3, r2
 800534c:	6033      	str	r3, [r6, #0]
 800534e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005352:	460c      	mov	r4, r1
 8005354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005358:	b10a      	cbz	r2, 800535e <_printf_common+0x26>
 800535a:	3301      	adds	r3, #1
 800535c:	6033      	str	r3, [r6, #0]
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	0699      	lsls	r1, r3, #26
 8005362:	bf42      	ittt	mi
 8005364:	6833      	ldrmi	r3, [r6, #0]
 8005366:	3302      	addmi	r3, #2
 8005368:	6033      	strmi	r3, [r6, #0]
 800536a:	6825      	ldr	r5, [r4, #0]
 800536c:	f015 0506 	ands.w	r5, r5, #6
 8005370:	d106      	bne.n	8005380 <_printf_common+0x48>
 8005372:	f104 0a19 	add.w	sl, r4, #25
 8005376:	68e3      	ldr	r3, [r4, #12]
 8005378:	6832      	ldr	r2, [r6, #0]
 800537a:	1a9b      	subs	r3, r3, r2
 800537c:	42ab      	cmp	r3, r5
 800537e:	dc28      	bgt.n	80053d2 <_printf_common+0x9a>
 8005380:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005384:	1e13      	subs	r3, r2, #0
 8005386:	6822      	ldr	r2, [r4, #0]
 8005388:	bf18      	it	ne
 800538a:	2301      	movne	r3, #1
 800538c:	0692      	lsls	r2, r2, #26
 800538e:	d42d      	bmi.n	80053ec <_printf_common+0xb4>
 8005390:	4649      	mov	r1, r9
 8005392:	4638      	mov	r0, r7
 8005394:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005398:	47c0      	blx	r8
 800539a:	3001      	adds	r0, #1
 800539c:	d020      	beq.n	80053e0 <_printf_common+0xa8>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	68e5      	ldr	r5, [r4, #12]
 80053a2:	f003 0306 	and.w	r3, r3, #6
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	bf18      	it	ne
 80053aa:	2500      	movne	r5, #0
 80053ac:	6832      	ldr	r2, [r6, #0]
 80053ae:	f04f 0600 	mov.w	r6, #0
 80053b2:	68a3      	ldr	r3, [r4, #8]
 80053b4:	bf08      	it	eq
 80053b6:	1aad      	subeq	r5, r5, r2
 80053b8:	6922      	ldr	r2, [r4, #16]
 80053ba:	bf08      	it	eq
 80053bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053c0:	4293      	cmp	r3, r2
 80053c2:	bfc4      	itt	gt
 80053c4:	1a9b      	subgt	r3, r3, r2
 80053c6:	18ed      	addgt	r5, r5, r3
 80053c8:	341a      	adds	r4, #26
 80053ca:	42b5      	cmp	r5, r6
 80053cc:	d11a      	bne.n	8005404 <_printf_common+0xcc>
 80053ce:	2000      	movs	r0, #0
 80053d0:	e008      	b.n	80053e4 <_printf_common+0xac>
 80053d2:	2301      	movs	r3, #1
 80053d4:	4652      	mov	r2, sl
 80053d6:	4649      	mov	r1, r9
 80053d8:	4638      	mov	r0, r7
 80053da:	47c0      	blx	r8
 80053dc:	3001      	adds	r0, #1
 80053de:	d103      	bne.n	80053e8 <_printf_common+0xb0>
 80053e0:	f04f 30ff 	mov.w	r0, #4294967295
 80053e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e8:	3501      	adds	r5, #1
 80053ea:	e7c4      	b.n	8005376 <_printf_common+0x3e>
 80053ec:	2030      	movs	r0, #48	; 0x30
 80053ee:	18e1      	adds	r1, r4, r3
 80053f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053fa:	4422      	add	r2, r4
 80053fc:	3302      	adds	r3, #2
 80053fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005402:	e7c5      	b.n	8005390 <_printf_common+0x58>
 8005404:	2301      	movs	r3, #1
 8005406:	4622      	mov	r2, r4
 8005408:	4649      	mov	r1, r9
 800540a:	4638      	mov	r0, r7
 800540c:	47c0      	blx	r8
 800540e:	3001      	adds	r0, #1
 8005410:	d0e6      	beq.n	80053e0 <_printf_common+0xa8>
 8005412:	3601      	adds	r6, #1
 8005414:	e7d9      	b.n	80053ca <_printf_common+0x92>
	...

08005418 <_printf_i>:
 8005418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800541c:	7e0f      	ldrb	r7, [r1, #24]
 800541e:	4691      	mov	r9, r2
 8005420:	2f78      	cmp	r7, #120	; 0x78
 8005422:	4680      	mov	r8, r0
 8005424:	460c      	mov	r4, r1
 8005426:	469a      	mov	sl, r3
 8005428:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800542a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800542e:	d807      	bhi.n	8005440 <_printf_i+0x28>
 8005430:	2f62      	cmp	r7, #98	; 0x62
 8005432:	d80a      	bhi.n	800544a <_printf_i+0x32>
 8005434:	2f00      	cmp	r7, #0
 8005436:	f000 80d9 	beq.w	80055ec <_printf_i+0x1d4>
 800543a:	2f58      	cmp	r7, #88	; 0x58
 800543c:	f000 80a4 	beq.w	8005588 <_printf_i+0x170>
 8005440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005444:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005448:	e03a      	b.n	80054c0 <_printf_i+0xa8>
 800544a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800544e:	2b15      	cmp	r3, #21
 8005450:	d8f6      	bhi.n	8005440 <_printf_i+0x28>
 8005452:	a101      	add	r1, pc, #4	; (adr r1, 8005458 <_printf_i+0x40>)
 8005454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005458:	080054b1 	.word	0x080054b1
 800545c:	080054c5 	.word	0x080054c5
 8005460:	08005441 	.word	0x08005441
 8005464:	08005441 	.word	0x08005441
 8005468:	08005441 	.word	0x08005441
 800546c:	08005441 	.word	0x08005441
 8005470:	080054c5 	.word	0x080054c5
 8005474:	08005441 	.word	0x08005441
 8005478:	08005441 	.word	0x08005441
 800547c:	08005441 	.word	0x08005441
 8005480:	08005441 	.word	0x08005441
 8005484:	080055d3 	.word	0x080055d3
 8005488:	080054f5 	.word	0x080054f5
 800548c:	080055b5 	.word	0x080055b5
 8005490:	08005441 	.word	0x08005441
 8005494:	08005441 	.word	0x08005441
 8005498:	080055f5 	.word	0x080055f5
 800549c:	08005441 	.word	0x08005441
 80054a0:	080054f5 	.word	0x080054f5
 80054a4:	08005441 	.word	0x08005441
 80054a8:	08005441 	.word	0x08005441
 80054ac:	080055bd 	.word	0x080055bd
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	1d1a      	adds	r2, r3, #4
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	602a      	str	r2, [r5, #0]
 80054b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054c0:	2301      	movs	r3, #1
 80054c2:	e0a4      	b.n	800560e <_printf_i+0x1f6>
 80054c4:	6820      	ldr	r0, [r4, #0]
 80054c6:	6829      	ldr	r1, [r5, #0]
 80054c8:	0606      	lsls	r6, r0, #24
 80054ca:	f101 0304 	add.w	r3, r1, #4
 80054ce:	d50a      	bpl.n	80054e6 <_printf_i+0xce>
 80054d0:	680e      	ldr	r6, [r1, #0]
 80054d2:	602b      	str	r3, [r5, #0]
 80054d4:	2e00      	cmp	r6, #0
 80054d6:	da03      	bge.n	80054e0 <_printf_i+0xc8>
 80054d8:	232d      	movs	r3, #45	; 0x2d
 80054da:	4276      	negs	r6, r6
 80054dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054e0:	230a      	movs	r3, #10
 80054e2:	485e      	ldr	r0, [pc, #376]	; (800565c <_printf_i+0x244>)
 80054e4:	e019      	b.n	800551a <_printf_i+0x102>
 80054e6:	680e      	ldr	r6, [r1, #0]
 80054e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054ec:	602b      	str	r3, [r5, #0]
 80054ee:	bf18      	it	ne
 80054f0:	b236      	sxthne	r6, r6
 80054f2:	e7ef      	b.n	80054d4 <_printf_i+0xbc>
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	6820      	ldr	r0, [r4, #0]
 80054f8:	1d19      	adds	r1, r3, #4
 80054fa:	6029      	str	r1, [r5, #0]
 80054fc:	0601      	lsls	r1, r0, #24
 80054fe:	d501      	bpl.n	8005504 <_printf_i+0xec>
 8005500:	681e      	ldr	r6, [r3, #0]
 8005502:	e002      	b.n	800550a <_printf_i+0xf2>
 8005504:	0646      	lsls	r6, r0, #25
 8005506:	d5fb      	bpl.n	8005500 <_printf_i+0xe8>
 8005508:	881e      	ldrh	r6, [r3, #0]
 800550a:	2f6f      	cmp	r7, #111	; 0x6f
 800550c:	bf0c      	ite	eq
 800550e:	2308      	moveq	r3, #8
 8005510:	230a      	movne	r3, #10
 8005512:	4852      	ldr	r0, [pc, #328]	; (800565c <_printf_i+0x244>)
 8005514:	2100      	movs	r1, #0
 8005516:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800551a:	6865      	ldr	r5, [r4, #4]
 800551c:	2d00      	cmp	r5, #0
 800551e:	bfa8      	it	ge
 8005520:	6821      	ldrge	r1, [r4, #0]
 8005522:	60a5      	str	r5, [r4, #8]
 8005524:	bfa4      	itt	ge
 8005526:	f021 0104 	bicge.w	r1, r1, #4
 800552a:	6021      	strge	r1, [r4, #0]
 800552c:	b90e      	cbnz	r6, 8005532 <_printf_i+0x11a>
 800552e:	2d00      	cmp	r5, #0
 8005530:	d04d      	beq.n	80055ce <_printf_i+0x1b6>
 8005532:	4615      	mov	r5, r2
 8005534:	fbb6 f1f3 	udiv	r1, r6, r3
 8005538:	fb03 6711 	mls	r7, r3, r1, r6
 800553c:	5dc7      	ldrb	r7, [r0, r7]
 800553e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005542:	4637      	mov	r7, r6
 8005544:	42bb      	cmp	r3, r7
 8005546:	460e      	mov	r6, r1
 8005548:	d9f4      	bls.n	8005534 <_printf_i+0x11c>
 800554a:	2b08      	cmp	r3, #8
 800554c:	d10b      	bne.n	8005566 <_printf_i+0x14e>
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	07de      	lsls	r6, r3, #31
 8005552:	d508      	bpl.n	8005566 <_printf_i+0x14e>
 8005554:	6923      	ldr	r3, [r4, #16]
 8005556:	6861      	ldr	r1, [r4, #4]
 8005558:	4299      	cmp	r1, r3
 800555a:	bfde      	ittt	le
 800555c:	2330      	movle	r3, #48	; 0x30
 800555e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005562:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005566:	1b52      	subs	r2, r2, r5
 8005568:	6122      	str	r2, [r4, #16]
 800556a:	464b      	mov	r3, r9
 800556c:	4621      	mov	r1, r4
 800556e:	4640      	mov	r0, r8
 8005570:	f8cd a000 	str.w	sl, [sp]
 8005574:	aa03      	add	r2, sp, #12
 8005576:	f7ff fedf 	bl	8005338 <_printf_common>
 800557a:	3001      	adds	r0, #1
 800557c:	d14c      	bne.n	8005618 <_printf_i+0x200>
 800557e:	f04f 30ff 	mov.w	r0, #4294967295
 8005582:	b004      	add	sp, #16
 8005584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005588:	4834      	ldr	r0, [pc, #208]	; (800565c <_printf_i+0x244>)
 800558a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800558e:	6829      	ldr	r1, [r5, #0]
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	f851 6b04 	ldr.w	r6, [r1], #4
 8005596:	6029      	str	r1, [r5, #0]
 8005598:	061d      	lsls	r5, r3, #24
 800559a:	d514      	bpl.n	80055c6 <_printf_i+0x1ae>
 800559c:	07df      	lsls	r7, r3, #31
 800559e:	bf44      	itt	mi
 80055a0:	f043 0320 	orrmi.w	r3, r3, #32
 80055a4:	6023      	strmi	r3, [r4, #0]
 80055a6:	b91e      	cbnz	r6, 80055b0 <_printf_i+0x198>
 80055a8:	6823      	ldr	r3, [r4, #0]
 80055aa:	f023 0320 	bic.w	r3, r3, #32
 80055ae:	6023      	str	r3, [r4, #0]
 80055b0:	2310      	movs	r3, #16
 80055b2:	e7af      	b.n	8005514 <_printf_i+0xfc>
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	f043 0320 	orr.w	r3, r3, #32
 80055ba:	6023      	str	r3, [r4, #0]
 80055bc:	2378      	movs	r3, #120	; 0x78
 80055be:	4828      	ldr	r0, [pc, #160]	; (8005660 <_printf_i+0x248>)
 80055c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055c4:	e7e3      	b.n	800558e <_printf_i+0x176>
 80055c6:	0659      	lsls	r1, r3, #25
 80055c8:	bf48      	it	mi
 80055ca:	b2b6      	uxthmi	r6, r6
 80055cc:	e7e6      	b.n	800559c <_printf_i+0x184>
 80055ce:	4615      	mov	r5, r2
 80055d0:	e7bb      	b.n	800554a <_printf_i+0x132>
 80055d2:	682b      	ldr	r3, [r5, #0]
 80055d4:	6826      	ldr	r6, [r4, #0]
 80055d6:	1d18      	adds	r0, r3, #4
 80055d8:	6961      	ldr	r1, [r4, #20]
 80055da:	6028      	str	r0, [r5, #0]
 80055dc:	0635      	lsls	r5, r6, #24
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	d501      	bpl.n	80055e6 <_printf_i+0x1ce>
 80055e2:	6019      	str	r1, [r3, #0]
 80055e4:	e002      	b.n	80055ec <_printf_i+0x1d4>
 80055e6:	0670      	lsls	r0, r6, #25
 80055e8:	d5fb      	bpl.n	80055e2 <_printf_i+0x1ca>
 80055ea:	8019      	strh	r1, [r3, #0]
 80055ec:	2300      	movs	r3, #0
 80055ee:	4615      	mov	r5, r2
 80055f0:	6123      	str	r3, [r4, #16]
 80055f2:	e7ba      	b.n	800556a <_printf_i+0x152>
 80055f4:	682b      	ldr	r3, [r5, #0]
 80055f6:	2100      	movs	r1, #0
 80055f8:	1d1a      	adds	r2, r3, #4
 80055fa:	602a      	str	r2, [r5, #0]
 80055fc:	681d      	ldr	r5, [r3, #0]
 80055fe:	6862      	ldr	r2, [r4, #4]
 8005600:	4628      	mov	r0, r5
 8005602:	f000 fed7 	bl	80063b4 <memchr>
 8005606:	b108      	cbz	r0, 800560c <_printf_i+0x1f4>
 8005608:	1b40      	subs	r0, r0, r5
 800560a:	6060      	str	r0, [r4, #4]
 800560c:	6863      	ldr	r3, [r4, #4]
 800560e:	6123      	str	r3, [r4, #16]
 8005610:	2300      	movs	r3, #0
 8005612:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005616:	e7a8      	b.n	800556a <_printf_i+0x152>
 8005618:	462a      	mov	r2, r5
 800561a:	4649      	mov	r1, r9
 800561c:	4640      	mov	r0, r8
 800561e:	6923      	ldr	r3, [r4, #16]
 8005620:	47d0      	blx	sl
 8005622:	3001      	adds	r0, #1
 8005624:	d0ab      	beq.n	800557e <_printf_i+0x166>
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	079b      	lsls	r3, r3, #30
 800562a:	d413      	bmi.n	8005654 <_printf_i+0x23c>
 800562c:	68e0      	ldr	r0, [r4, #12]
 800562e:	9b03      	ldr	r3, [sp, #12]
 8005630:	4298      	cmp	r0, r3
 8005632:	bfb8      	it	lt
 8005634:	4618      	movlt	r0, r3
 8005636:	e7a4      	b.n	8005582 <_printf_i+0x16a>
 8005638:	2301      	movs	r3, #1
 800563a:	4632      	mov	r2, r6
 800563c:	4649      	mov	r1, r9
 800563e:	4640      	mov	r0, r8
 8005640:	47d0      	blx	sl
 8005642:	3001      	adds	r0, #1
 8005644:	d09b      	beq.n	800557e <_printf_i+0x166>
 8005646:	3501      	adds	r5, #1
 8005648:	68e3      	ldr	r3, [r4, #12]
 800564a:	9903      	ldr	r1, [sp, #12]
 800564c:	1a5b      	subs	r3, r3, r1
 800564e:	42ab      	cmp	r3, r5
 8005650:	dcf2      	bgt.n	8005638 <_printf_i+0x220>
 8005652:	e7eb      	b.n	800562c <_printf_i+0x214>
 8005654:	2500      	movs	r5, #0
 8005656:	f104 0619 	add.w	r6, r4, #25
 800565a:	e7f5      	b.n	8005648 <_printf_i+0x230>
 800565c:	08007c42 	.word	0x08007c42
 8005660:	08007c53 	.word	0x08007c53

08005664 <siprintf>:
 8005664:	b40e      	push	{r1, r2, r3}
 8005666:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800566a:	b500      	push	{lr}
 800566c:	b09c      	sub	sp, #112	; 0x70
 800566e:	ab1d      	add	r3, sp, #116	; 0x74
 8005670:	9002      	str	r0, [sp, #8]
 8005672:	9006      	str	r0, [sp, #24]
 8005674:	9107      	str	r1, [sp, #28]
 8005676:	9104      	str	r1, [sp, #16]
 8005678:	4808      	ldr	r0, [pc, #32]	; (800569c <siprintf+0x38>)
 800567a:	4909      	ldr	r1, [pc, #36]	; (80056a0 <siprintf+0x3c>)
 800567c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005680:	9105      	str	r1, [sp, #20]
 8005682:	6800      	ldr	r0, [r0, #0]
 8005684:	a902      	add	r1, sp, #8
 8005686:	9301      	str	r3, [sp, #4]
 8005688:	f001 fb7e 	bl	8006d88 <_svfiprintf_r>
 800568c:	2200      	movs	r2, #0
 800568e:	9b02      	ldr	r3, [sp, #8]
 8005690:	701a      	strb	r2, [r3, #0]
 8005692:	b01c      	add	sp, #112	; 0x70
 8005694:	f85d eb04 	ldr.w	lr, [sp], #4
 8005698:	b003      	add	sp, #12
 800569a:	4770      	bx	lr
 800569c:	20000018 	.word	0x20000018
 80056a0:	ffff0208 	.word	0xffff0208

080056a4 <quorem>:
 80056a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a8:	6903      	ldr	r3, [r0, #16]
 80056aa:	690c      	ldr	r4, [r1, #16]
 80056ac:	4607      	mov	r7, r0
 80056ae:	42a3      	cmp	r3, r4
 80056b0:	f2c0 8082 	blt.w	80057b8 <quorem+0x114>
 80056b4:	3c01      	subs	r4, #1
 80056b6:	f100 0514 	add.w	r5, r0, #20
 80056ba:	f101 0814 	add.w	r8, r1, #20
 80056be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80056c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056cc:	3301      	adds	r3, #1
 80056ce:	429a      	cmp	r2, r3
 80056d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80056d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80056d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80056dc:	d331      	bcc.n	8005742 <quorem+0x9e>
 80056de:	f04f 0e00 	mov.w	lr, #0
 80056e2:	4640      	mov	r0, r8
 80056e4:	46ac      	mov	ip, r5
 80056e6:	46f2      	mov	sl, lr
 80056e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80056ec:	b293      	uxth	r3, r2
 80056ee:	fb06 e303 	mla	r3, r6, r3, lr
 80056f2:	0c12      	lsrs	r2, r2, #16
 80056f4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	fb06 e202 	mla	r2, r6, r2, lr
 80056fe:	ebaa 0303 	sub.w	r3, sl, r3
 8005702:	f8dc a000 	ldr.w	sl, [ip]
 8005706:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800570a:	fa1f fa8a 	uxth.w	sl, sl
 800570e:	4453      	add	r3, sl
 8005710:	f8dc a000 	ldr.w	sl, [ip]
 8005714:	b292      	uxth	r2, r2
 8005716:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800571a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800571e:	b29b      	uxth	r3, r3
 8005720:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005724:	4581      	cmp	r9, r0
 8005726:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800572a:	f84c 3b04 	str.w	r3, [ip], #4
 800572e:	d2db      	bcs.n	80056e8 <quorem+0x44>
 8005730:	f855 300b 	ldr.w	r3, [r5, fp]
 8005734:	b92b      	cbnz	r3, 8005742 <quorem+0x9e>
 8005736:	9b01      	ldr	r3, [sp, #4]
 8005738:	3b04      	subs	r3, #4
 800573a:	429d      	cmp	r5, r3
 800573c:	461a      	mov	r2, r3
 800573e:	d32f      	bcc.n	80057a0 <quorem+0xfc>
 8005740:	613c      	str	r4, [r7, #16]
 8005742:	4638      	mov	r0, r7
 8005744:	f001 f8d0 	bl	80068e8 <__mcmp>
 8005748:	2800      	cmp	r0, #0
 800574a:	db25      	blt.n	8005798 <quorem+0xf4>
 800574c:	4628      	mov	r0, r5
 800574e:	f04f 0c00 	mov.w	ip, #0
 8005752:	3601      	adds	r6, #1
 8005754:	f858 1b04 	ldr.w	r1, [r8], #4
 8005758:	f8d0 e000 	ldr.w	lr, [r0]
 800575c:	b28b      	uxth	r3, r1
 800575e:	ebac 0303 	sub.w	r3, ip, r3
 8005762:	fa1f f28e 	uxth.w	r2, lr
 8005766:	4413      	add	r3, r2
 8005768:	0c0a      	lsrs	r2, r1, #16
 800576a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800576e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005772:	b29b      	uxth	r3, r3
 8005774:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005778:	45c1      	cmp	r9, r8
 800577a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800577e:	f840 3b04 	str.w	r3, [r0], #4
 8005782:	d2e7      	bcs.n	8005754 <quorem+0xb0>
 8005784:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005788:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800578c:	b922      	cbnz	r2, 8005798 <quorem+0xf4>
 800578e:	3b04      	subs	r3, #4
 8005790:	429d      	cmp	r5, r3
 8005792:	461a      	mov	r2, r3
 8005794:	d30a      	bcc.n	80057ac <quorem+0x108>
 8005796:	613c      	str	r4, [r7, #16]
 8005798:	4630      	mov	r0, r6
 800579a:	b003      	add	sp, #12
 800579c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057a0:	6812      	ldr	r2, [r2, #0]
 80057a2:	3b04      	subs	r3, #4
 80057a4:	2a00      	cmp	r2, #0
 80057a6:	d1cb      	bne.n	8005740 <quorem+0x9c>
 80057a8:	3c01      	subs	r4, #1
 80057aa:	e7c6      	b.n	800573a <quorem+0x96>
 80057ac:	6812      	ldr	r2, [r2, #0]
 80057ae:	3b04      	subs	r3, #4
 80057b0:	2a00      	cmp	r2, #0
 80057b2:	d1f0      	bne.n	8005796 <quorem+0xf2>
 80057b4:	3c01      	subs	r4, #1
 80057b6:	e7eb      	b.n	8005790 <quorem+0xec>
 80057b8:	2000      	movs	r0, #0
 80057ba:	e7ee      	b.n	800579a <quorem+0xf6>
 80057bc:	0000      	movs	r0, r0
	...

080057c0 <_dtoa_r>:
 80057c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c4:	4616      	mov	r6, r2
 80057c6:	461f      	mov	r7, r3
 80057c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80057ca:	b099      	sub	sp, #100	; 0x64
 80057cc:	4605      	mov	r5, r0
 80057ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80057d2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80057d6:	b974      	cbnz	r4, 80057f6 <_dtoa_r+0x36>
 80057d8:	2010      	movs	r0, #16
 80057da:	f000 fde3 	bl	80063a4 <malloc>
 80057de:	4602      	mov	r2, r0
 80057e0:	6268      	str	r0, [r5, #36]	; 0x24
 80057e2:	b920      	cbnz	r0, 80057ee <_dtoa_r+0x2e>
 80057e4:	21ea      	movs	r1, #234	; 0xea
 80057e6:	4ba8      	ldr	r3, [pc, #672]	; (8005a88 <_dtoa_r+0x2c8>)
 80057e8:	48a8      	ldr	r0, [pc, #672]	; (8005a8c <_dtoa_r+0x2cc>)
 80057ea:	f001 fbdd 	bl	8006fa8 <__assert_func>
 80057ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057f2:	6004      	str	r4, [r0, #0]
 80057f4:	60c4      	str	r4, [r0, #12]
 80057f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80057f8:	6819      	ldr	r1, [r3, #0]
 80057fa:	b151      	cbz	r1, 8005812 <_dtoa_r+0x52>
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	2301      	movs	r3, #1
 8005800:	4093      	lsls	r3, r2
 8005802:	604a      	str	r2, [r1, #4]
 8005804:	608b      	str	r3, [r1, #8]
 8005806:	4628      	mov	r0, r5
 8005808:	f000 fe30 	bl	800646c <_Bfree>
 800580c:	2200      	movs	r2, #0
 800580e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	1e3b      	subs	r3, r7, #0
 8005814:	bfaf      	iteee	ge
 8005816:	2300      	movge	r3, #0
 8005818:	2201      	movlt	r2, #1
 800581a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800581e:	9305      	strlt	r3, [sp, #20]
 8005820:	bfa8      	it	ge
 8005822:	f8c8 3000 	strge.w	r3, [r8]
 8005826:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800582a:	4b99      	ldr	r3, [pc, #612]	; (8005a90 <_dtoa_r+0x2d0>)
 800582c:	bfb8      	it	lt
 800582e:	f8c8 2000 	strlt.w	r2, [r8]
 8005832:	ea33 0309 	bics.w	r3, r3, r9
 8005836:	d119      	bne.n	800586c <_dtoa_r+0xac>
 8005838:	f242 730f 	movw	r3, #9999	; 0x270f
 800583c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800583e:	6013      	str	r3, [r2, #0]
 8005840:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005844:	4333      	orrs	r3, r6
 8005846:	f000 857f 	beq.w	8006348 <_dtoa_r+0xb88>
 800584a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800584c:	b953      	cbnz	r3, 8005864 <_dtoa_r+0xa4>
 800584e:	4b91      	ldr	r3, [pc, #580]	; (8005a94 <_dtoa_r+0x2d4>)
 8005850:	e022      	b.n	8005898 <_dtoa_r+0xd8>
 8005852:	4b91      	ldr	r3, [pc, #580]	; (8005a98 <_dtoa_r+0x2d8>)
 8005854:	9303      	str	r3, [sp, #12]
 8005856:	3308      	adds	r3, #8
 8005858:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	9803      	ldr	r0, [sp, #12]
 800585e:	b019      	add	sp, #100	; 0x64
 8005860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005864:	4b8b      	ldr	r3, [pc, #556]	; (8005a94 <_dtoa_r+0x2d4>)
 8005866:	9303      	str	r3, [sp, #12]
 8005868:	3303      	adds	r3, #3
 800586a:	e7f5      	b.n	8005858 <_dtoa_r+0x98>
 800586c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005870:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005874:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005878:	2200      	movs	r2, #0
 800587a:	2300      	movs	r3, #0
 800587c:	f7fb f894 	bl	80009a8 <__aeabi_dcmpeq>
 8005880:	4680      	mov	r8, r0
 8005882:	b158      	cbz	r0, 800589c <_dtoa_r+0xdc>
 8005884:	2301      	movs	r3, #1
 8005886:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8558 	beq.w	8006342 <_dtoa_r+0xb82>
 8005892:	4882      	ldr	r0, [pc, #520]	; (8005a9c <_dtoa_r+0x2dc>)
 8005894:	6018      	str	r0, [r3, #0]
 8005896:	1e43      	subs	r3, r0, #1
 8005898:	9303      	str	r3, [sp, #12]
 800589a:	e7df      	b.n	800585c <_dtoa_r+0x9c>
 800589c:	ab16      	add	r3, sp, #88	; 0x58
 800589e:	9301      	str	r3, [sp, #4]
 80058a0:	ab17      	add	r3, sp, #92	; 0x5c
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	4628      	mov	r0, r5
 80058a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80058aa:	f001 f8c5 	bl	8006a38 <__d2b>
 80058ae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80058b2:	4683      	mov	fp, r0
 80058b4:	2c00      	cmp	r4, #0
 80058b6:	d07f      	beq.n	80059b8 <_dtoa_r+0x1f8>
 80058b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058be:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80058c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058c6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80058ca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80058ce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80058d2:	2200      	movs	r2, #0
 80058d4:	4b72      	ldr	r3, [pc, #456]	; (8005aa0 <_dtoa_r+0x2e0>)
 80058d6:	f7fa fc47 	bl	8000168 <__aeabi_dsub>
 80058da:	a365      	add	r3, pc, #404	; (adr r3, 8005a70 <_dtoa_r+0x2b0>)
 80058dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e0:	f7fa fdfa 	bl	80004d8 <__aeabi_dmul>
 80058e4:	a364      	add	r3, pc, #400	; (adr r3, 8005a78 <_dtoa_r+0x2b8>)
 80058e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ea:	f7fa fc3f 	bl	800016c <__adddf3>
 80058ee:	4606      	mov	r6, r0
 80058f0:	4620      	mov	r0, r4
 80058f2:	460f      	mov	r7, r1
 80058f4:	f7fa fd86 	bl	8000404 <__aeabi_i2d>
 80058f8:	a361      	add	r3, pc, #388	; (adr r3, 8005a80 <_dtoa_r+0x2c0>)
 80058fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fe:	f7fa fdeb 	bl	80004d8 <__aeabi_dmul>
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	4630      	mov	r0, r6
 8005908:	4639      	mov	r1, r7
 800590a:	f7fa fc2f 	bl	800016c <__adddf3>
 800590e:	4606      	mov	r6, r0
 8005910:	460f      	mov	r7, r1
 8005912:	f7fb f891 	bl	8000a38 <__aeabi_d2iz>
 8005916:	2200      	movs	r2, #0
 8005918:	4682      	mov	sl, r0
 800591a:	2300      	movs	r3, #0
 800591c:	4630      	mov	r0, r6
 800591e:	4639      	mov	r1, r7
 8005920:	f7fb f84c 	bl	80009bc <__aeabi_dcmplt>
 8005924:	b148      	cbz	r0, 800593a <_dtoa_r+0x17a>
 8005926:	4650      	mov	r0, sl
 8005928:	f7fa fd6c 	bl	8000404 <__aeabi_i2d>
 800592c:	4632      	mov	r2, r6
 800592e:	463b      	mov	r3, r7
 8005930:	f7fb f83a 	bl	80009a8 <__aeabi_dcmpeq>
 8005934:	b908      	cbnz	r0, 800593a <_dtoa_r+0x17a>
 8005936:	f10a 3aff 	add.w	sl, sl, #4294967295
 800593a:	f1ba 0f16 	cmp.w	sl, #22
 800593e:	d858      	bhi.n	80059f2 <_dtoa_r+0x232>
 8005940:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005944:	4b57      	ldr	r3, [pc, #348]	; (8005aa4 <_dtoa_r+0x2e4>)
 8005946:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	f7fb f835 	bl	80009bc <__aeabi_dcmplt>
 8005952:	2800      	cmp	r0, #0
 8005954:	d04f      	beq.n	80059f6 <_dtoa_r+0x236>
 8005956:	2300      	movs	r3, #0
 8005958:	f10a 3aff 	add.w	sl, sl, #4294967295
 800595c:	930f      	str	r3, [sp, #60]	; 0x3c
 800595e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005960:	1b1c      	subs	r4, r3, r4
 8005962:	1e63      	subs	r3, r4, #1
 8005964:	9309      	str	r3, [sp, #36]	; 0x24
 8005966:	bf49      	itett	mi
 8005968:	f1c4 0301 	rsbmi	r3, r4, #1
 800596c:	2300      	movpl	r3, #0
 800596e:	9306      	strmi	r3, [sp, #24]
 8005970:	2300      	movmi	r3, #0
 8005972:	bf54      	ite	pl
 8005974:	9306      	strpl	r3, [sp, #24]
 8005976:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005978:	f1ba 0f00 	cmp.w	sl, #0
 800597c:	db3d      	blt.n	80059fa <_dtoa_r+0x23a>
 800597e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005980:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005984:	4453      	add	r3, sl
 8005986:	9309      	str	r3, [sp, #36]	; 0x24
 8005988:	2300      	movs	r3, #0
 800598a:	930a      	str	r3, [sp, #40]	; 0x28
 800598c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800598e:	2b09      	cmp	r3, #9
 8005990:	f200 808c 	bhi.w	8005aac <_dtoa_r+0x2ec>
 8005994:	2b05      	cmp	r3, #5
 8005996:	bfc4      	itt	gt
 8005998:	3b04      	subgt	r3, #4
 800599a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800599c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800599e:	bfc8      	it	gt
 80059a0:	2400      	movgt	r4, #0
 80059a2:	f1a3 0302 	sub.w	r3, r3, #2
 80059a6:	bfd8      	it	le
 80059a8:	2401      	movle	r4, #1
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	f200 808a 	bhi.w	8005ac4 <_dtoa_r+0x304>
 80059b0:	e8df f003 	tbb	[pc, r3]
 80059b4:	5b4d4f2d 	.word	0x5b4d4f2d
 80059b8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80059bc:	441c      	add	r4, r3
 80059be:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80059c2:	2b20      	cmp	r3, #32
 80059c4:	bfc3      	ittte	gt
 80059c6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80059ca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80059ce:	fa09 f303 	lslgt.w	r3, r9, r3
 80059d2:	f1c3 0320 	rsble	r3, r3, #32
 80059d6:	bfc6      	itte	gt
 80059d8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80059dc:	4318      	orrgt	r0, r3
 80059de:	fa06 f003 	lslle.w	r0, r6, r3
 80059e2:	f7fa fcff 	bl	80003e4 <__aeabi_ui2d>
 80059e6:	2301      	movs	r3, #1
 80059e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80059ec:	3c01      	subs	r4, #1
 80059ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80059f0:	e76f      	b.n	80058d2 <_dtoa_r+0x112>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e7b2      	b.n	800595c <_dtoa_r+0x19c>
 80059f6:	900f      	str	r0, [sp, #60]	; 0x3c
 80059f8:	e7b1      	b.n	800595e <_dtoa_r+0x19e>
 80059fa:	9b06      	ldr	r3, [sp, #24]
 80059fc:	eba3 030a 	sub.w	r3, r3, sl
 8005a00:	9306      	str	r3, [sp, #24]
 8005a02:	f1ca 0300 	rsb	r3, sl, #0
 8005a06:	930a      	str	r3, [sp, #40]	; 0x28
 8005a08:	2300      	movs	r3, #0
 8005a0a:	930e      	str	r3, [sp, #56]	; 0x38
 8005a0c:	e7be      	b.n	800598c <_dtoa_r+0x1cc>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	dc58      	bgt.n	8005aca <_dtoa_r+0x30a>
 8005a18:	f04f 0901 	mov.w	r9, #1
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005a22:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005a26:	2200      	movs	r2, #0
 8005a28:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005a2a:	6042      	str	r2, [r0, #4]
 8005a2c:	2204      	movs	r2, #4
 8005a2e:	f102 0614 	add.w	r6, r2, #20
 8005a32:	429e      	cmp	r6, r3
 8005a34:	6841      	ldr	r1, [r0, #4]
 8005a36:	d94e      	bls.n	8005ad6 <_dtoa_r+0x316>
 8005a38:	4628      	mov	r0, r5
 8005a3a:	f000 fcd7 	bl	80063ec <_Balloc>
 8005a3e:	9003      	str	r0, [sp, #12]
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d14c      	bne.n	8005ade <_dtoa_r+0x31e>
 8005a44:	4602      	mov	r2, r0
 8005a46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005a4a:	4b17      	ldr	r3, [pc, #92]	; (8005aa8 <_dtoa_r+0x2e8>)
 8005a4c:	e6cc      	b.n	80057e8 <_dtoa_r+0x28>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e7de      	b.n	8005a10 <_dtoa_r+0x250>
 8005a52:	2300      	movs	r3, #0
 8005a54:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a58:	eb0a 0903 	add.w	r9, sl, r3
 8005a5c:	f109 0301 	add.w	r3, r9, #1
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	9308      	str	r3, [sp, #32]
 8005a64:	bfb8      	it	lt
 8005a66:	2301      	movlt	r3, #1
 8005a68:	e7dd      	b.n	8005a26 <_dtoa_r+0x266>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e7f2      	b.n	8005a54 <_dtoa_r+0x294>
 8005a6e:	bf00      	nop
 8005a70:	636f4361 	.word	0x636f4361
 8005a74:	3fd287a7 	.word	0x3fd287a7
 8005a78:	8b60c8b3 	.word	0x8b60c8b3
 8005a7c:	3fc68a28 	.word	0x3fc68a28
 8005a80:	509f79fb 	.word	0x509f79fb
 8005a84:	3fd34413 	.word	0x3fd34413
 8005a88:	08007c71 	.word	0x08007c71
 8005a8c:	08007c88 	.word	0x08007c88
 8005a90:	7ff00000 	.word	0x7ff00000
 8005a94:	08007c6d 	.word	0x08007c6d
 8005a98:	08007c64 	.word	0x08007c64
 8005a9c:	08007c41 	.word	0x08007c41
 8005aa0:	3ff80000 	.word	0x3ff80000
 8005aa4:	08007d78 	.word	0x08007d78
 8005aa8:	08007ce3 	.word	0x08007ce3
 8005aac:	2401      	movs	r4, #1
 8005aae:	2300      	movs	r3, #0
 8005ab0:	940b      	str	r4, [sp, #44]	; 0x2c
 8005ab2:	9322      	str	r3, [sp, #136]	; 0x88
 8005ab4:	f04f 39ff 	mov.w	r9, #4294967295
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2312      	movs	r3, #18
 8005abc:	f8cd 9020 	str.w	r9, [sp, #32]
 8005ac0:	9223      	str	r2, [sp, #140]	; 0x8c
 8005ac2:	e7b0      	b.n	8005a26 <_dtoa_r+0x266>
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ac8:	e7f4      	b.n	8005ab4 <_dtoa_r+0x2f4>
 8005aca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005ace:	464b      	mov	r3, r9
 8005ad0:	f8cd 9020 	str.w	r9, [sp, #32]
 8005ad4:	e7a7      	b.n	8005a26 <_dtoa_r+0x266>
 8005ad6:	3101      	adds	r1, #1
 8005ad8:	6041      	str	r1, [r0, #4]
 8005ada:	0052      	lsls	r2, r2, #1
 8005adc:	e7a7      	b.n	8005a2e <_dtoa_r+0x26e>
 8005ade:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005ae0:	9a03      	ldr	r2, [sp, #12]
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	9b08      	ldr	r3, [sp, #32]
 8005ae6:	2b0e      	cmp	r3, #14
 8005ae8:	f200 80a8 	bhi.w	8005c3c <_dtoa_r+0x47c>
 8005aec:	2c00      	cmp	r4, #0
 8005aee:	f000 80a5 	beq.w	8005c3c <_dtoa_r+0x47c>
 8005af2:	f1ba 0f00 	cmp.w	sl, #0
 8005af6:	dd34      	ble.n	8005b62 <_dtoa_r+0x3a2>
 8005af8:	4a9a      	ldr	r2, [pc, #616]	; (8005d64 <_dtoa_r+0x5a4>)
 8005afa:	f00a 030f 	and.w	r3, sl, #15
 8005afe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005b02:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005b06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005b0e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005b12:	d016      	beq.n	8005b42 <_dtoa_r+0x382>
 8005b14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b18:	4b93      	ldr	r3, [pc, #588]	; (8005d68 <_dtoa_r+0x5a8>)
 8005b1a:	2703      	movs	r7, #3
 8005b1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b20:	f7fa fe04 	bl	800072c <__aeabi_ddiv>
 8005b24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b28:	f004 040f 	and.w	r4, r4, #15
 8005b2c:	4e8e      	ldr	r6, [pc, #568]	; (8005d68 <_dtoa_r+0x5a8>)
 8005b2e:	b954      	cbnz	r4, 8005b46 <_dtoa_r+0x386>
 8005b30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b38:	f7fa fdf8 	bl	800072c <__aeabi_ddiv>
 8005b3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b40:	e029      	b.n	8005b96 <_dtoa_r+0x3d6>
 8005b42:	2702      	movs	r7, #2
 8005b44:	e7f2      	b.n	8005b2c <_dtoa_r+0x36c>
 8005b46:	07e1      	lsls	r1, r4, #31
 8005b48:	d508      	bpl.n	8005b5c <_dtoa_r+0x39c>
 8005b4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b4e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b52:	f7fa fcc1 	bl	80004d8 <__aeabi_dmul>
 8005b56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b5a:	3701      	adds	r7, #1
 8005b5c:	1064      	asrs	r4, r4, #1
 8005b5e:	3608      	adds	r6, #8
 8005b60:	e7e5      	b.n	8005b2e <_dtoa_r+0x36e>
 8005b62:	f000 80a5 	beq.w	8005cb0 <_dtoa_r+0x4f0>
 8005b66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b6a:	f1ca 0400 	rsb	r4, sl, #0
 8005b6e:	4b7d      	ldr	r3, [pc, #500]	; (8005d64 <_dtoa_r+0x5a4>)
 8005b70:	f004 020f 	and.w	r2, r4, #15
 8005b74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7c:	f7fa fcac 	bl	80004d8 <__aeabi_dmul>
 8005b80:	2702      	movs	r7, #2
 8005b82:	2300      	movs	r3, #0
 8005b84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b88:	4e77      	ldr	r6, [pc, #476]	; (8005d68 <_dtoa_r+0x5a8>)
 8005b8a:	1124      	asrs	r4, r4, #4
 8005b8c:	2c00      	cmp	r4, #0
 8005b8e:	f040 8084 	bne.w	8005c9a <_dtoa_r+0x4da>
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1d2      	bne.n	8005b3c <_dtoa_r+0x37c>
 8005b96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 808b 	beq.w	8005cb4 <_dtoa_r+0x4f4>
 8005b9e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005ba2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005ba6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005baa:	2200      	movs	r2, #0
 8005bac:	4b6f      	ldr	r3, [pc, #444]	; (8005d6c <_dtoa_r+0x5ac>)
 8005bae:	f7fa ff05 	bl	80009bc <__aeabi_dcmplt>
 8005bb2:	2800      	cmp	r0, #0
 8005bb4:	d07e      	beq.n	8005cb4 <_dtoa_r+0x4f4>
 8005bb6:	9b08      	ldr	r3, [sp, #32]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d07b      	beq.n	8005cb4 <_dtoa_r+0x4f4>
 8005bbc:	f1b9 0f00 	cmp.w	r9, #0
 8005bc0:	dd38      	ble.n	8005c34 <_dtoa_r+0x474>
 8005bc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	4b69      	ldr	r3, [pc, #420]	; (8005d70 <_dtoa_r+0x5b0>)
 8005bca:	f7fa fc85 	bl	80004d8 <__aeabi_dmul>
 8005bce:	464c      	mov	r4, r9
 8005bd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005bd4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005bd8:	3701      	adds	r7, #1
 8005bda:	4638      	mov	r0, r7
 8005bdc:	f7fa fc12 	bl	8000404 <__aeabi_i2d>
 8005be0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005be4:	f7fa fc78 	bl	80004d8 <__aeabi_dmul>
 8005be8:	2200      	movs	r2, #0
 8005bea:	4b62      	ldr	r3, [pc, #392]	; (8005d74 <_dtoa_r+0x5b4>)
 8005bec:	f7fa fabe 	bl	800016c <__adddf3>
 8005bf0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005bf4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005bf8:	9611      	str	r6, [sp, #68]	; 0x44
 8005bfa:	2c00      	cmp	r4, #0
 8005bfc:	d15d      	bne.n	8005cba <_dtoa_r+0x4fa>
 8005bfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c02:	2200      	movs	r2, #0
 8005c04:	4b5c      	ldr	r3, [pc, #368]	; (8005d78 <_dtoa_r+0x5b8>)
 8005c06:	f7fa faaf 	bl	8000168 <__aeabi_dsub>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c12:	4633      	mov	r3, r6
 8005c14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c16:	f7fa feef 	bl	80009f8 <__aeabi_dcmpgt>
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	f040 829c 	bne.w	8006158 <_dtoa_r+0x998>
 8005c20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c26:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005c2a:	f7fa fec7 	bl	80009bc <__aeabi_dcmplt>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	f040 8290 	bne.w	8006154 <_dtoa_r+0x994>
 8005c34:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005c38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f2c0 8152 	blt.w	8005ee8 <_dtoa_r+0x728>
 8005c44:	f1ba 0f0e 	cmp.w	sl, #14
 8005c48:	f300 814e 	bgt.w	8005ee8 <_dtoa_r+0x728>
 8005c4c:	4b45      	ldr	r3, [pc, #276]	; (8005d64 <_dtoa_r+0x5a4>)
 8005c4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c56:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005c5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f280 80db 	bge.w	8005e18 <_dtoa_r+0x658>
 8005c62:	9b08      	ldr	r3, [sp, #32]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f300 80d7 	bgt.w	8005e18 <_dtoa_r+0x658>
 8005c6a:	f040 8272 	bne.w	8006152 <_dtoa_r+0x992>
 8005c6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c72:	2200      	movs	r2, #0
 8005c74:	4b40      	ldr	r3, [pc, #256]	; (8005d78 <_dtoa_r+0x5b8>)
 8005c76:	f7fa fc2f 	bl	80004d8 <__aeabi_dmul>
 8005c7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c7e:	f7fa feb1 	bl	80009e4 <__aeabi_dcmpge>
 8005c82:	9c08      	ldr	r4, [sp, #32]
 8005c84:	4626      	mov	r6, r4
 8005c86:	2800      	cmp	r0, #0
 8005c88:	f040 8248 	bne.w	800611c <_dtoa_r+0x95c>
 8005c8c:	2331      	movs	r3, #49	; 0x31
 8005c8e:	9f03      	ldr	r7, [sp, #12]
 8005c90:	f10a 0a01 	add.w	sl, sl, #1
 8005c94:	f807 3b01 	strb.w	r3, [r7], #1
 8005c98:	e244      	b.n	8006124 <_dtoa_r+0x964>
 8005c9a:	07e2      	lsls	r2, r4, #31
 8005c9c:	d505      	bpl.n	8005caa <_dtoa_r+0x4ea>
 8005c9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ca2:	f7fa fc19 	bl	80004d8 <__aeabi_dmul>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	3701      	adds	r7, #1
 8005caa:	1064      	asrs	r4, r4, #1
 8005cac:	3608      	adds	r6, #8
 8005cae:	e76d      	b.n	8005b8c <_dtoa_r+0x3cc>
 8005cb0:	2702      	movs	r7, #2
 8005cb2:	e770      	b.n	8005b96 <_dtoa_r+0x3d6>
 8005cb4:	46d0      	mov	r8, sl
 8005cb6:	9c08      	ldr	r4, [sp, #32]
 8005cb8:	e78f      	b.n	8005bda <_dtoa_r+0x41a>
 8005cba:	9903      	ldr	r1, [sp, #12]
 8005cbc:	4b29      	ldr	r3, [pc, #164]	; (8005d64 <_dtoa_r+0x5a4>)
 8005cbe:	4421      	add	r1, r4
 8005cc0:	9112      	str	r1, [sp, #72]	; 0x48
 8005cc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005cc8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005ccc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005cd0:	2900      	cmp	r1, #0
 8005cd2:	d055      	beq.n	8005d80 <_dtoa_r+0x5c0>
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	4929      	ldr	r1, [pc, #164]	; (8005d7c <_dtoa_r+0x5bc>)
 8005cd8:	f7fa fd28 	bl	800072c <__aeabi_ddiv>
 8005cdc:	463b      	mov	r3, r7
 8005cde:	4632      	mov	r2, r6
 8005ce0:	f7fa fa42 	bl	8000168 <__aeabi_dsub>
 8005ce4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ce8:	9f03      	ldr	r7, [sp, #12]
 8005cea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cee:	f7fa fea3 	bl	8000a38 <__aeabi_d2iz>
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	f7fa fb86 	bl	8000404 <__aeabi_i2d>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d00:	f7fa fa32 	bl	8000168 <__aeabi_dsub>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	3430      	adds	r4, #48	; 0x30
 8005d0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005d0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d12:	f807 4b01 	strb.w	r4, [r7], #1
 8005d16:	f7fa fe51 	bl	80009bc <__aeabi_dcmplt>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	d174      	bne.n	8005e08 <_dtoa_r+0x648>
 8005d1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d22:	2000      	movs	r0, #0
 8005d24:	4911      	ldr	r1, [pc, #68]	; (8005d6c <_dtoa_r+0x5ac>)
 8005d26:	f7fa fa1f 	bl	8000168 <__aeabi_dsub>
 8005d2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d2e:	f7fa fe45 	bl	80009bc <__aeabi_dcmplt>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	f040 80b7 	bne.w	8005ea6 <_dtoa_r+0x6e6>
 8005d38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d3a:	429f      	cmp	r7, r3
 8005d3c:	f43f af7a 	beq.w	8005c34 <_dtoa_r+0x474>
 8005d40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d44:	2200      	movs	r2, #0
 8005d46:	4b0a      	ldr	r3, [pc, #40]	; (8005d70 <_dtoa_r+0x5b0>)
 8005d48:	f7fa fbc6 	bl	80004d8 <__aeabi_dmul>
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d56:	4b06      	ldr	r3, [pc, #24]	; (8005d70 <_dtoa_r+0x5b0>)
 8005d58:	f7fa fbbe 	bl	80004d8 <__aeabi_dmul>
 8005d5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d60:	e7c3      	b.n	8005cea <_dtoa_r+0x52a>
 8005d62:	bf00      	nop
 8005d64:	08007d78 	.word	0x08007d78
 8005d68:	08007d50 	.word	0x08007d50
 8005d6c:	3ff00000 	.word	0x3ff00000
 8005d70:	40240000 	.word	0x40240000
 8005d74:	401c0000 	.word	0x401c0000
 8005d78:	40140000 	.word	0x40140000
 8005d7c:	3fe00000 	.word	0x3fe00000
 8005d80:	4630      	mov	r0, r6
 8005d82:	4639      	mov	r1, r7
 8005d84:	f7fa fba8 	bl	80004d8 <__aeabi_dmul>
 8005d88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005d8e:	9c03      	ldr	r4, [sp, #12]
 8005d90:	9314      	str	r3, [sp, #80]	; 0x50
 8005d92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d96:	f7fa fe4f 	bl	8000a38 <__aeabi_d2iz>
 8005d9a:	9015      	str	r0, [sp, #84]	; 0x54
 8005d9c:	f7fa fb32 	bl	8000404 <__aeabi_i2d>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005da8:	f7fa f9de 	bl	8000168 <__aeabi_dsub>
 8005dac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005dae:	4606      	mov	r6, r0
 8005db0:	3330      	adds	r3, #48	; 0x30
 8005db2:	f804 3b01 	strb.w	r3, [r4], #1
 8005db6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005db8:	460f      	mov	r7, r1
 8005dba:	429c      	cmp	r4, r3
 8005dbc:	f04f 0200 	mov.w	r2, #0
 8005dc0:	d124      	bne.n	8005e0c <_dtoa_r+0x64c>
 8005dc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005dc6:	4bb0      	ldr	r3, [pc, #704]	; (8006088 <_dtoa_r+0x8c8>)
 8005dc8:	f7fa f9d0 	bl	800016c <__adddf3>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	460b      	mov	r3, r1
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	4639      	mov	r1, r7
 8005dd4:	f7fa fe10 	bl	80009f8 <__aeabi_dcmpgt>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	d163      	bne.n	8005ea4 <_dtoa_r+0x6e4>
 8005ddc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005de0:	2000      	movs	r0, #0
 8005de2:	49a9      	ldr	r1, [pc, #676]	; (8006088 <_dtoa_r+0x8c8>)
 8005de4:	f7fa f9c0 	bl	8000168 <__aeabi_dsub>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4630      	mov	r0, r6
 8005dee:	4639      	mov	r1, r7
 8005df0:	f7fa fde4 	bl	80009bc <__aeabi_dcmplt>
 8005df4:	2800      	cmp	r0, #0
 8005df6:	f43f af1d 	beq.w	8005c34 <_dtoa_r+0x474>
 8005dfa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005dfc:	1e7b      	subs	r3, r7, #1
 8005dfe:	9314      	str	r3, [sp, #80]	; 0x50
 8005e00:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005e04:	2b30      	cmp	r3, #48	; 0x30
 8005e06:	d0f8      	beq.n	8005dfa <_dtoa_r+0x63a>
 8005e08:	46c2      	mov	sl, r8
 8005e0a:	e03b      	b.n	8005e84 <_dtoa_r+0x6c4>
 8005e0c:	4b9f      	ldr	r3, [pc, #636]	; (800608c <_dtoa_r+0x8cc>)
 8005e0e:	f7fa fb63 	bl	80004d8 <__aeabi_dmul>
 8005e12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e16:	e7bc      	b.n	8005d92 <_dtoa_r+0x5d2>
 8005e18:	9f03      	ldr	r7, [sp, #12]
 8005e1a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005e1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e22:	4640      	mov	r0, r8
 8005e24:	4649      	mov	r1, r9
 8005e26:	f7fa fc81 	bl	800072c <__aeabi_ddiv>
 8005e2a:	f7fa fe05 	bl	8000a38 <__aeabi_d2iz>
 8005e2e:	4604      	mov	r4, r0
 8005e30:	f7fa fae8 	bl	8000404 <__aeabi_i2d>
 8005e34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e38:	f7fa fb4e 	bl	80004d8 <__aeabi_dmul>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	4640      	mov	r0, r8
 8005e42:	4649      	mov	r1, r9
 8005e44:	f7fa f990 	bl	8000168 <__aeabi_dsub>
 8005e48:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005e4c:	f807 6b01 	strb.w	r6, [r7], #1
 8005e50:	9e03      	ldr	r6, [sp, #12]
 8005e52:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005e56:	1bbe      	subs	r6, r7, r6
 8005e58:	45b4      	cmp	ip, r6
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	d136      	bne.n	8005ece <_dtoa_r+0x70e>
 8005e60:	f7fa f984 	bl	800016c <__adddf3>
 8005e64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e68:	4680      	mov	r8, r0
 8005e6a:	4689      	mov	r9, r1
 8005e6c:	f7fa fdc4 	bl	80009f8 <__aeabi_dcmpgt>
 8005e70:	bb58      	cbnz	r0, 8005eca <_dtoa_r+0x70a>
 8005e72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e76:	4640      	mov	r0, r8
 8005e78:	4649      	mov	r1, r9
 8005e7a:	f7fa fd95 	bl	80009a8 <__aeabi_dcmpeq>
 8005e7e:	b108      	cbz	r0, 8005e84 <_dtoa_r+0x6c4>
 8005e80:	07e1      	lsls	r1, r4, #31
 8005e82:	d422      	bmi.n	8005eca <_dtoa_r+0x70a>
 8005e84:	4628      	mov	r0, r5
 8005e86:	4659      	mov	r1, fp
 8005e88:	f000 faf0 	bl	800646c <_Bfree>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	703b      	strb	r3, [r7, #0]
 8005e90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005e92:	f10a 0001 	add.w	r0, sl, #1
 8005e96:	6018      	str	r0, [r3, #0]
 8005e98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f43f acde 	beq.w	800585c <_dtoa_r+0x9c>
 8005ea0:	601f      	str	r7, [r3, #0]
 8005ea2:	e4db      	b.n	800585c <_dtoa_r+0x9c>
 8005ea4:	4627      	mov	r7, r4
 8005ea6:	463b      	mov	r3, r7
 8005ea8:	461f      	mov	r7, r3
 8005eaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005eae:	2a39      	cmp	r2, #57	; 0x39
 8005eb0:	d107      	bne.n	8005ec2 <_dtoa_r+0x702>
 8005eb2:	9a03      	ldr	r2, [sp, #12]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d1f7      	bne.n	8005ea8 <_dtoa_r+0x6e8>
 8005eb8:	2230      	movs	r2, #48	; 0x30
 8005eba:	9903      	ldr	r1, [sp, #12]
 8005ebc:	f108 0801 	add.w	r8, r8, #1
 8005ec0:	700a      	strb	r2, [r1, #0]
 8005ec2:	781a      	ldrb	r2, [r3, #0]
 8005ec4:	3201      	adds	r2, #1
 8005ec6:	701a      	strb	r2, [r3, #0]
 8005ec8:	e79e      	b.n	8005e08 <_dtoa_r+0x648>
 8005eca:	46d0      	mov	r8, sl
 8005ecc:	e7eb      	b.n	8005ea6 <_dtoa_r+0x6e6>
 8005ece:	2200      	movs	r2, #0
 8005ed0:	4b6e      	ldr	r3, [pc, #440]	; (800608c <_dtoa_r+0x8cc>)
 8005ed2:	f7fa fb01 	bl	80004d8 <__aeabi_dmul>
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2300      	movs	r3, #0
 8005eda:	4680      	mov	r8, r0
 8005edc:	4689      	mov	r9, r1
 8005ede:	f7fa fd63 	bl	80009a8 <__aeabi_dcmpeq>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d09b      	beq.n	8005e1e <_dtoa_r+0x65e>
 8005ee6:	e7cd      	b.n	8005e84 <_dtoa_r+0x6c4>
 8005ee8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005eea:	2a00      	cmp	r2, #0
 8005eec:	f000 80d0 	beq.w	8006090 <_dtoa_r+0x8d0>
 8005ef0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005ef2:	2a01      	cmp	r2, #1
 8005ef4:	f300 80ae 	bgt.w	8006054 <_dtoa_r+0x894>
 8005ef8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005efa:	2a00      	cmp	r2, #0
 8005efc:	f000 80a6 	beq.w	800604c <_dtoa_r+0x88c>
 8005f00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005f06:	9f06      	ldr	r7, [sp, #24]
 8005f08:	9a06      	ldr	r2, [sp, #24]
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	441a      	add	r2, r3
 8005f0e:	9206      	str	r2, [sp, #24]
 8005f10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f12:	4628      	mov	r0, r5
 8005f14:	441a      	add	r2, r3
 8005f16:	9209      	str	r2, [sp, #36]	; 0x24
 8005f18:	f000 fb5e 	bl	80065d8 <__i2b>
 8005f1c:	4606      	mov	r6, r0
 8005f1e:	2f00      	cmp	r7, #0
 8005f20:	dd0c      	ble.n	8005f3c <_dtoa_r+0x77c>
 8005f22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	dd09      	ble.n	8005f3c <_dtoa_r+0x77c>
 8005f28:	42bb      	cmp	r3, r7
 8005f2a:	bfa8      	it	ge
 8005f2c:	463b      	movge	r3, r7
 8005f2e:	9a06      	ldr	r2, [sp, #24]
 8005f30:	1aff      	subs	r7, r7, r3
 8005f32:	1ad2      	subs	r2, r2, r3
 8005f34:	9206      	str	r2, [sp, #24]
 8005f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f3e:	b1f3      	cbz	r3, 8005f7e <_dtoa_r+0x7be>
 8005f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 80a8 	beq.w	8006098 <_dtoa_r+0x8d8>
 8005f48:	2c00      	cmp	r4, #0
 8005f4a:	dd10      	ble.n	8005f6e <_dtoa_r+0x7ae>
 8005f4c:	4631      	mov	r1, r6
 8005f4e:	4622      	mov	r2, r4
 8005f50:	4628      	mov	r0, r5
 8005f52:	f000 fbff 	bl	8006754 <__pow5mult>
 8005f56:	465a      	mov	r2, fp
 8005f58:	4601      	mov	r1, r0
 8005f5a:	4606      	mov	r6, r0
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	f000 fb51 	bl	8006604 <__multiply>
 8005f62:	4680      	mov	r8, r0
 8005f64:	4659      	mov	r1, fp
 8005f66:	4628      	mov	r0, r5
 8005f68:	f000 fa80 	bl	800646c <_Bfree>
 8005f6c:	46c3      	mov	fp, r8
 8005f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f70:	1b1a      	subs	r2, r3, r4
 8005f72:	d004      	beq.n	8005f7e <_dtoa_r+0x7be>
 8005f74:	4659      	mov	r1, fp
 8005f76:	4628      	mov	r0, r5
 8005f78:	f000 fbec 	bl	8006754 <__pow5mult>
 8005f7c:	4683      	mov	fp, r0
 8005f7e:	2101      	movs	r1, #1
 8005f80:	4628      	mov	r0, r5
 8005f82:	f000 fb29 	bl	80065d8 <__i2b>
 8005f86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f88:	4604      	mov	r4, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f340 8086 	ble.w	800609c <_dtoa_r+0x8dc>
 8005f90:	461a      	mov	r2, r3
 8005f92:	4601      	mov	r1, r0
 8005f94:	4628      	mov	r0, r5
 8005f96:	f000 fbdd 	bl	8006754 <__pow5mult>
 8005f9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	dd7f      	ble.n	80060a2 <_dtoa_r+0x8e2>
 8005fa2:	f04f 0800 	mov.w	r8, #0
 8005fa6:	6923      	ldr	r3, [r4, #16]
 8005fa8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005fac:	6918      	ldr	r0, [r3, #16]
 8005fae:	f000 fac5 	bl	800653c <__hi0bits>
 8005fb2:	f1c0 0020 	rsb	r0, r0, #32
 8005fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb8:	4418      	add	r0, r3
 8005fba:	f010 001f 	ands.w	r0, r0, #31
 8005fbe:	f000 8092 	beq.w	80060e6 <_dtoa_r+0x926>
 8005fc2:	f1c0 0320 	rsb	r3, r0, #32
 8005fc6:	2b04      	cmp	r3, #4
 8005fc8:	f340 808a 	ble.w	80060e0 <_dtoa_r+0x920>
 8005fcc:	f1c0 001c 	rsb	r0, r0, #28
 8005fd0:	9b06      	ldr	r3, [sp, #24]
 8005fd2:	4407      	add	r7, r0
 8005fd4:	4403      	add	r3, r0
 8005fd6:	9306      	str	r3, [sp, #24]
 8005fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fda:	4403      	add	r3, r0
 8005fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8005fde:	9b06      	ldr	r3, [sp, #24]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	dd05      	ble.n	8005ff0 <_dtoa_r+0x830>
 8005fe4:	4659      	mov	r1, fp
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	4628      	mov	r0, r5
 8005fea:	f000 fc0d 	bl	8006808 <__lshift>
 8005fee:	4683      	mov	fp, r0
 8005ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	dd05      	ble.n	8006002 <_dtoa_r+0x842>
 8005ff6:	4621      	mov	r1, r4
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	f000 fc04 	bl	8006808 <__lshift>
 8006000:	4604      	mov	r4, r0
 8006002:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006004:	2b00      	cmp	r3, #0
 8006006:	d070      	beq.n	80060ea <_dtoa_r+0x92a>
 8006008:	4621      	mov	r1, r4
 800600a:	4658      	mov	r0, fp
 800600c:	f000 fc6c 	bl	80068e8 <__mcmp>
 8006010:	2800      	cmp	r0, #0
 8006012:	da6a      	bge.n	80060ea <_dtoa_r+0x92a>
 8006014:	2300      	movs	r3, #0
 8006016:	4659      	mov	r1, fp
 8006018:	220a      	movs	r2, #10
 800601a:	4628      	mov	r0, r5
 800601c:	f000 fa48 	bl	80064b0 <__multadd>
 8006020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006022:	4683      	mov	fp, r0
 8006024:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 8194 	beq.w	8006356 <_dtoa_r+0xb96>
 800602e:	4631      	mov	r1, r6
 8006030:	2300      	movs	r3, #0
 8006032:	220a      	movs	r2, #10
 8006034:	4628      	mov	r0, r5
 8006036:	f000 fa3b 	bl	80064b0 <__multadd>
 800603a:	f1b9 0f00 	cmp.w	r9, #0
 800603e:	4606      	mov	r6, r0
 8006040:	f300 8093 	bgt.w	800616a <_dtoa_r+0x9aa>
 8006044:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006046:	2b02      	cmp	r3, #2
 8006048:	dc57      	bgt.n	80060fa <_dtoa_r+0x93a>
 800604a:	e08e      	b.n	800616a <_dtoa_r+0x9aa>
 800604c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800604e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006052:	e757      	b.n	8005f04 <_dtoa_r+0x744>
 8006054:	9b08      	ldr	r3, [sp, #32]
 8006056:	1e5c      	subs	r4, r3, #1
 8006058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800605a:	42a3      	cmp	r3, r4
 800605c:	bfb7      	itett	lt
 800605e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006060:	1b1c      	subge	r4, r3, r4
 8006062:	1ae2      	sublt	r2, r4, r3
 8006064:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006066:	bfbe      	ittt	lt
 8006068:	940a      	strlt	r4, [sp, #40]	; 0x28
 800606a:	189b      	addlt	r3, r3, r2
 800606c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800606e:	9b08      	ldr	r3, [sp, #32]
 8006070:	bfb8      	it	lt
 8006072:	2400      	movlt	r4, #0
 8006074:	2b00      	cmp	r3, #0
 8006076:	bfbb      	ittet	lt
 8006078:	9b06      	ldrlt	r3, [sp, #24]
 800607a:	9a08      	ldrlt	r2, [sp, #32]
 800607c:	9f06      	ldrge	r7, [sp, #24]
 800607e:	1a9f      	sublt	r7, r3, r2
 8006080:	bfac      	ite	ge
 8006082:	9b08      	ldrge	r3, [sp, #32]
 8006084:	2300      	movlt	r3, #0
 8006086:	e73f      	b.n	8005f08 <_dtoa_r+0x748>
 8006088:	3fe00000 	.word	0x3fe00000
 800608c:	40240000 	.word	0x40240000
 8006090:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006092:	9f06      	ldr	r7, [sp, #24]
 8006094:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006096:	e742      	b.n	8005f1e <_dtoa_r+0x75e>
 8006098:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800609a:	e76b      	b.n	8005f74 <_dtoa_r+0x7b4>
 800609c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800609e:	2b01      	cmp	r3, #1
 80060a0:	dc19      	bgt.n	80060d6 <_dtoa_r+0x916>
 80060a2:	9b04      	ldr	r3, [sp, #16]
 80060a4:	b9bb      	cbnz	r3, 80060d6 <_dtoa_r+0x916>
 80060a6:	9b05      	ldr	r3, [sp, #20]
 80060a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060ac:	b99b      	cbnz	r3, 80060d6 <_dtoa_r+0x916>
 80060ae:	9b05      	ldr	r3, [sp, #20]
 80060b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060b4:	0d1b      	lsrs	r3, r3, #20
 80060b6:	051b      	lsls	r3, r3, #20
 80060b8:	b183      	cbz	r3, 80060dc <_dtoa_r+0x91c>
 80060ba:	f04f 0801 	mov.w	r8, #1
 80060be:	9b06      	ldr	r3, [sp, #24]
 80060c0:	3301      	adds	r3, #1
 80060c2:	9306      	str	r3, [sp, #24]
 80060c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060c6:	3301      	adds	r3, #1
 80060c8:	9309      	str	r3, [sp, #36]	; 0x24
 80060ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f47f af6a 	bne.w	8005fa6 <_dtoa_r+0x7e6>
 80060d2:	2001      	movs	r0, #1
 80060d4:	e76f      	b.n	8005fb6 <_dtoa_r+0x7f6>
 80060d6:	f04f 0800 	mov.w	r8, #0
 80060da:	e7f6      	b.n	80060ca <_dtoa_r+0x90a>
 80060dc:	4698      	mov	r8, r3
 80060de:	e7f4      	b.n	80060ca <_dtoa_r+0x90a>
 80060e0:	f43f af7d 	beq.w	8005fde <_dtoa_r+0x81e>
 80060e4:	4618      	mov	r0, r3
 80060e6:	301c      	adds	r0, #28
 80060e8:	e772      	b.n	8005fd0 <_dtoa_r+0x810>
 80060ea:	9b08      	ldr	r3, [sp, #32]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	dc36      	bgt.n	800615e <_dtoa_r+0x99e>
 80060f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	dd33      	ble.n	800615e <_dtoa_r+0x99e>
 80060f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060fa:	f1b9 0f00 	cmp.w	r9, #0
 80060fe:	d10d      	bne.n	800611c <_dtoa_r+0x95c>
 8006100:	4621      	mov	r1, r4
 8006102:	464b      	mov	r3, r9
 8006104:	2205      	movs	r2, #5
 8006106:	4628      	mov	r0, r5
 8006108:	f000 f9d2 	bl	80064b0 <__multadd>
 800610c:	4601      	mov	r1, r0
 800610e:	4604      	mov	r4, r0
 8006110:	4658      	mov	r0, fp
 8006112:	f000 fbe9 	bl	80068e8 <__mcmp>
 8006116:	2800      	cmp	r0, #0
 8006118:	f73f adb8 	bgt.w	8005c8c <_dtoa_r+0x4cc>
 800611c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800611e:	9f03      	ldr	r7, [sp, #12]
 8006120:	ea6f 0a03 	mvn.w	sl, r3
 8006124:	f04f 0800 	mov.w	r8, #0
 8006128:	4621      	mov	r1, r4
 800612a:	4628      	mov	r0, r5
 800612c:	f000 f99e 	bl	800646c <_Bfree>
 8006130:	2e00      	cmp	r6, #0
 8006132:	f43f aea7 	beq.w	8005e84 <_dtoa_r+0x6c4>
 8006136:	f1b8 0f00 	cmp.w	r8, #0
 800613a:	d005      	beq.n	8006148 <_dtoa_r+0x988>
 800613c:	45b0      	cmp	r8, r6
 800613e:	d003      	beq.n	8006148 <_dtoa_r+0x988>
 8006140:	4641      	mov	r1, r8
 8006142:	4628      	mov	r0, r5
 8006144:	f000 f992 	bl	800646c <_Bfree>
 8006148:	4631      	mov	r1, r6
 800614a:	4628      	mov	r0, r5
 800614c:	f000 f98e 	bl	800646c <_Bfree>
 8006150:	e698      	b.n	8005e84 <_dtoa_r+0x6c4>
 8006152:	2400      	movs	r4, #0
 8006154:	4626      	mov	r6, r4
 8006156:	e7e1      	b.n	800611c <_dtoa_r+0x95c>
 8006158:	46c2      	mov	sl, r8
 800615a:	4626      	mov	r6, r4
 800615c:	e596      	b.n	8005c8c <_dtoa_r+0x4cc>
 800615e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006160:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 80fd 	beq.w	8006364 <_dtoa_r+0xba4>
 800616a:	2f00      	cmp	r7, #0
 800616c:	dd05      	ble.n	800617a <_dtoa_r+0x9ba>
 800616e:	4631      	mov	r1, r6
 8006170:	463a      	mov	r2, r7
 8006172:	4628      	mov	r0, r5
 8006174:	f000 fb48 	bl	8006808 <__lshift>
 8006178:	4606      	mov	r6, r0
 800617a:	f1b8 0f00 	cmp.w	r8, #0
 800617e:	d05c      	beq.n	800623a <_dtoa_r+0xa7a>
 8006180:	4628      	mov	r0, r5
 8006182:	6871      	ldr	r1, [r6, #4]
 8006184:	f000 f932 	bl	80063ec <_Balloc>
 8006188:	4607      	mov	r7, r0
 800618a:	b928      	cbnz	r0, 8006198 <_dtoa_r+0x9d8>
 800618c:	4602      	mov	r2, r0
 800618e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006192:	4b7f      	ldr	r3, [pc, #508]	; (8006390 <_dtoa_r+0xbd0>)
 8006194:	f7ff bb28 	b.w	80057e8 <_dtoa_r+0x28>
 8006198:	6932      	ldr	r2, [r6, #16]
 800619a:	f106 010c 	add.w	r1, r6, #12
 800619e:	3202      	adds	r2, #2
 80061a0:	0092      	lsls	r2, r2, #2
 80061a2:	300c      	adds	r0, #12
 80061a4:	f000 f914 	bl	80063d0 <memcpy>
 80061a8:	2201      	movs	r2, #1
 80061aa:	4639      	mov	r1, r7
 80061ac:	4628      	mov	r0, r5
 80061ae:	f000 fb2b 	bl	8006808 <__lshift>
 80061b2:	46b0      	mov	r8, r6
 80061b4:	4606      	mov	r6, r0
 80061b6:	9b03      	ldr	r3, [sp, #12]
 80061b8:	3301      	adds	r3, #1
 80061ba:	9308      	str	r3, [sp, #32]
 80061bc:	9b03      	ldr	r3, [sp, #12]
 80061be:	444b      	add	r3, r9
 80061c0:	930a      	str	r3, [sp, #40]	; 0x28
 80061c2:	9b04      	ldr	r3, [sp, #16]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	9309      	str	r3, [sp, #36]	; 0x24
 80061ca:	9b08      	ldr	r3, [sp, #32]
 80061cc:	4621      	mov	r1, r4
 80061ce:	3b01      	subs	r3, #1
 80061d0:	4658      	mov	r0, fp
 80061d2:	9304      	str	r3, [sp, #16]
 80061d4:	f7ff fa66 	bl	80056a4 <quorem>
 80061d8:	4603      	mov	r3, r0
 80061da:	4641      	mov	r1, r8
 80061dc:	3330      	adds	r3, #48	; 0x30
 80061de:	9006      	str	r0, [sp, #24]
 80061e0:	4658      	mov	r0, fp
 80061e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80061e4:	f000 fb80 	bl	80068e8 <__mcmp>
 80061e8:	4632      	mov	r2, r6
 80061ea:	4681      	mov	r9, r0
 80061ec:	4621      	mov	r1, r4
 80061ee:	4628      	mov	r0, r5
 80061f0:	f000 fb96 	bl	8006920 <__mdiff>
 80061f4:	68c2      	ldr	r2, [r0, #12]
 80061f6:	4607      	mov	r7, r0
 80061f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061fa:	bb02      	cbnz	r2, 800623e <_dtoa_r+0xa7e>
 80061fc:	4601      	mov	r1, r0
 80061fe:	4658      	mov	r0, fp
 8006200:	f000 fb72 	bl	80068e8 <__mcmp>
 8006204:	4602      	mov	r2, r0
 8006206:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006208:	4639      	mov	r1, r7
 800620a:	4628      	mov	r0, r5
 800620c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006210:	f000 f92c 	bl	800646c <_Bfree>
 8006214:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006216:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006218:	9f08      	ldr	r7, [sp, #32]
 800621a:	ea43 0102 	orr.w	r1, r3, r2
 800621e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006220:	430b      	orrs	r3, r1
 8006222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006224:	d10d      	bne.n	8006242 <_dtoa_r+0xa82>
 8006226:	2b39      	cmp	r3, #57	; 0x39
 8006228:	d029      	beq.n	800627e <_dtoa_r+0xabe>
 800622a:	f1b9 0f00 	cmp.w	r9, #0
 800622e:	dd01      	ble.n	8006234 <_dtoa_r+0xa74>
 8006230:	9b06      	ldr	r3, [sp, #24]
 8006232:	3331      	adds	r3, #49	; 0x31
 8006234:	9a04      	ldr	r2, [sp, #16]
 8006236:	7013      	strb	r3, [r2, #0]
 8006238:	e776      	b.n	8006128 <_dtoa_r+0x968>
 800623a:	4630      	mov	r0, r6
 800623c:	e7b9      	b.n	80061b2 <_dtoa_r+0x9f2>
 800623e:	2201      	movs	r2, #1
 8006240:	e7e2      	b.n	8006208 <_dtoa_r+0xa48>
 8006242:	f1b9 0f00 	cmp.w	r9, #0
 8006246:	db06      	blt.n	8006256 <_dtoa_r+0xa96>
 8006248:	9922      	ldr	r1, [sp, #136]	; 0x88
 800624a:	ea41 0909 	orr.w	r9, r1, r9
 800624e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006250:	ea59 0101 	orrs.w	r1, r9, r1
 8006254:	d120      	bne.n	8006298 <_dtoa_r+0xad8>
 8006256:	2a00      	cmp	r2, #0
 8006258:	ddec      	ble.n	8006234 <_dtoa_r+0xa74>
 800625a:	4659      	mov	r1, fp
 800625c:	2201      	movs	r2, #1
 800625e:	4628      	mov	r0, r5
 8006260:	9308      	str	r3, [sp, #32]
 8006262:	f000 fad1 	bl	8006808 <__lshift>
 8006266:	4621      	mov	r1, r4
 8006268:	4683      	mov	fp, r0
 800626a:	f000 fb3d 	bl	80068e8 <__mcmp>
 800626e:	2800      	cmp	r0, #0
 8006270:	9b08      	ldr	r3, [sp, #32]
 8006272:	dc02      	bgt.n	800627a <_dtoa_r+0xaba>
 8006274:	d1de      	bne.n	8006234 <_dtoa_r+0xa74>
 8006276:	07da      	lsls	r2, r3, #31
 8006278:	d5dc      	bpl.n	8006234 <_dtoa_r+0xa74>
 800627a:	2b39      	cmp	r3, #57	; 0x39
 800627c:	d1d8      	bne.n	8006230 <_dtoa_r+0xa70>
 800627e:	2339      	movs	r3, #57	; 0x39
 8006280:	9a04      	ldr	r2, [sp, #16]
 8006282:	7013      	strb	r3, [r2, #0]
 8006284:	463b      	mov	r3, r7
 8006286:	461f      	mov	r7, r3
 8006288:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800628c:	3b01      	subs	r3, #1
 800628e:	2a39      	cmp	r2, #57	; 0x39
 8006290:	d050      	beq.n	8006334 <_dtoa_r+0xb74>
 8006292:	3201      	adds	r2, #1
 8006294:	701a      	strb	r2, [r3, #0]
 8006296:	e747      	b.n	8006128 <_dtoa_r+0x968>
 8006298:	2a00      	cmp	r2, #0
 800629a:	dd03      	ble.n	80062a4 <_dtoa_r+0xae4>
 800629c:	2b39      	cmp	r3, #57	; 0x39
 800629e:	d0ee      	beq.n	800627e <_dtoa_r+0xabe>
 80062a0:	3301      	adds	r3, #1
 80062a2:	e7c7      	b.n	8006234 <_dtoa_r+0xa74>
 80062a4:	9a08      	ldr	r2, [sp, #32]
 80062a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80062a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80062ac:	428a      	cmp	r2, r1
 80062ae:	d02a      	beq.n	8006306 <_dtoa_r+0xb46>
 80062b0:	4659      	mov	r1, fp
 80062b2:	2300      	movs	r3, #0
 80062b4:	220a      	movs	r2, #10
 80062b6:	4628      	mov	r0, r5
 80062b8:	f000 f8fa 	bl	80064b0 <__multadd>
 80062bc:	45b0      	cmp	r8, r6
 80062be:	4683      	mov	fp, r0
 80062c0:	f04f 0300 	mov.w	r3, #0
 80062c4:	f04f 020a 	mov.w	r2, #10
 80062c8:	4641      	mov	r1, r8
 80062ca:	4628      	mov	r0, r5
 80062cc:	d107      	bne.n	80062de <_dtoa_r+0xb1e>
 80062ce:	f000 f8ef 	bl	80064b0 <__multadd>
 80062d2:	4680      	mov	r8, r0
 80062d4:	4606      	mov	r6, r0
 80062d6:	9b08      	ldr	r3, [sp, #32]
 80062d8:	3301      	adds	r3, #1
 80062da:	9308      	str	r3, [sp, #32]
 80062dc:	e775      	b.n	80061ca <_dtoa_r+0xa0a>
 80062de:	f000 f8e7 	bl	80064b0 <__multadd>
 80062e2:	4631      	mov	r1, r6
 80062e4:	4680      	mov	r8, r0
 80062e6:	2300      	movs	r3, #0
 80062e8:	220a      	movs	r2, #10
 80062ea:	4628      	mov	r0, r5
 80062ec:	f000 f8e0 	bl	80064b0 <__multadd>
 80062f0:	4606      	mov	r6, r0
 80062f2:	e7f0      	b.n	80062d6 <_dtoa_r+0xb16>
 80062f4:	f1b9 0f00 	cmp.w	r9, #0
 80062f8:	bfcc      	ite	gt
 80062fa:	464f      	movgt	r7, r9
 80062fc:	2701      	movle	r7, #1
 80062fe:	f04f 0800 	mov.w	r8, #0
 8006302:	9a03      	ldr	r2, [sp, #12]
 8006304:	4417      	add	r7, r2
 8006306:	4659      	mov	r1, fp
 8006308:	2201      	movs	r2, #1
 800630a:	4628      	mov	r0, r5
 800630c:	9308      	str	r3, [sp, #32]
 800630e:	f000 fa7b 	bl	8006808 <__lshift>
 8006312:	4621      	mov	r1, r4
 8006314:	4683      	mov	fp, r0
 8006316:	f000 fae7 	bl	80068e8 <__mcmp>
 800631a:	2800      	cmp	r0, #0
 800631c:	dcb2      	bgt.n	8006284 <_dtoa_r+0xac4>
 800631e:	d102      	bne.n	8006326 <_dtoa_r+0xb66>
 8006320:	9b08      	ldr	r3, [sp, #32]
 8006322:	07db      	lsls	r3, r3, #31
 8006324:	d4ae      	bmi.n	8006284 <_dtoa_r+0xac4>
 8006326:	463b      	mov	r3, r7
 8006328:	461f      	mov	r7, r3
 800632a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800632e:	2a30      	cmp	r2, #48	; 0x30
 8006330:	d0fa      	beq.n	8006328 <_dtoa_r+0xb68>
 8006332:	e6f9      	b.n	8006128 <_dtoa_r+0x968>
 8006334:	9a03      	ldr	r2, [sp, #12]
 8006336:	429a      	cmp	r2, r3
 8006338:	d1a5      	bne.n	8006286 <_dtoa_r+0xac6>
 800633a:	2331      	movs	r3, #49	; 0x31
 800633c:	f10a 0a01 	add.w	sl, sl, #1
 8006340:	e779      	b.n	8006236 <_dtoa_r+0xa76>
 8006342:	4b14      	ldr	r3, [pc, #80]	; (8006394 <_dtoa_r+0xbd4>)
 8006344:	f7ff baa8 	b.w	8005898 <_dtoa_r+0xd8>
 8006348:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800634a:	2b00      	cmp	r3, #0
 800634c:	f47f aa81 	bne.w	8005852 <_dtoa_r+0x92>
 8006350:	4b11      	ldr	r3, [pc, #68]	; (8006398 <_dtoa_r+0xbd8>)
 8006352:	f7ff baa1 	b.w	8005898 <_dtoa_r+0xd8>
 8006356:	f1b9 0f00 	cmp.w	r9, #0
 800635a:	dc03      	bgt.n	8006364 <_dtoa_r+0xba4>
 800635c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800635e:	2b02      	cmp	r3, #2
 8006360:	f73f aecb 	bgt.w	80060fa <_dtoa_r+0x93a>
 8006364:	9f03      	ldr	r7, [sp, #12]
 8006366:	4621      	mov	r1, r4
 8006368:	4658      	mov	r0, fp
 800636a:	f7ff f99b 	bl	80056a4 <quorem>
 800636e:	9a03      	ldr	r2, [sp, #12]
 8006370:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006374:	f807 3b01 	strb.w	r3, [r7], #1
 8006378:	1aba      	subs	r2, r7, r2
 800637a:	4591      	cmp	r9, r2
 800637c:	ddba      	ble.n	80062f4 <_dtoa_r+0xb34>
 800637e:	4659      	mov	r1, fp
 8006380:	2300      	movs	r3, #0
 8006382:	220a      	movs	r2, #10
 8006384:	4628      	mov	r0, r5
 8006386:	f000 f893 	bl	80064b0 <__multadd>
 800638a:	4683      	mov	fp, r0
 800638c:	e7eb      	b.n	8006366 <_dtoa_r+0xba6>
 800638e:	bf00      	nop
 8006390:	08007ce3 	.word	0x08007ce3
 8006394:	08007c40 	.word	0x08007c40
 8006398:	08007c64 	.word	0x08007c64

0800639c <_localeconv_r>:
 800639c:	4800      	ldr	r0, [pc, #0]	; (80063a0 <_localeconv_r+0x4>)
 800639e:	4770      	bx	lr
 80063a0:	2000016c 	.word	0x2000016c

080063a4 <malloc>:
 80063a4:	4b02      	ldr	r3, [pc, #8]	; (80063b0 <malloc+0xc>)
 80063a6:	4601      	mov	r1, r0
 80063a8:	6818      	ldr	r0, [r3, #0]
 80063aa:	f000 bc1d 	b.w	8006be8 <_malloc_r>
 80063ae:	bf00      	nop
 80063b0:	20000018 	.word	0x20000018

080063b4 <memchr>:
 80063b4:	4603      	mov	r3, r0
 80063b6:	b510      	push	{r4, lr}
 80063b8:	b2c9      	uxtb	r1, r1
 80063ba:	4402      	add	r2, r0
 80063bc:	4293      	cmp	r3, r2
 80063be:	4618      	mov	r0, r3
 80063c0:	d101      	bne.n	80063c6 <memchr+0x12>
 80063c2:	2000      	movs	r0, #0
 80063c4:	e003      	b.n	80063ce <memchr+0x1a>
 80063c6:	7804      	ldrb	r4, [r0, #0]
 80063c8:	3301      	adds	r3, #1
 80063ca:	428c      	cmp	r4, r1
 80063cc:	d1f6      	bne.n	80063bc <memchr+0x8>
 80063ce:	bd10      	pop	{r4, pc}

080063d0 <memcpy>:
 80063d0:	440a      	add	r2, r1
 80063d2:	4291      	cmp	r1, r2
 80063d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80063d8:	d100      	bne.n	80063dc <memcpy+0xc>
 80063da:	4770      	bx	lr
 80063dc:	b510      	push	{r4, lr}
 80063de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063e2:	4291      	cmp	r1, r2
 80063e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063e8:	d1f9      	bne.n	80063de <memcpy+0xe>
 80063ea:	bd10      	pop	{r4, pc}

080063ec <_Balloc>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063f0:	4604      	mov	r4, r0
 80063f2:	460d      	mov	r5, r1
 80063f4:	b976      	cbnz	r6, 8006414 <_Balloc+0x28>
 80063f6:	2010      	movs	r0, #16
 80063f8:	f7ff ffd4 	bl	80063a4 <malloc>
 80063fc:	4602      	mov	r2, r0
 80063fe:	6260      	str	r0, [r4, #36]	; 0x24
 8006400:	b920      	cbnz	r0, 800640c <_Balloc+0x20>
 8006402:	2166      	movs	r1, #102	; 0x66
 8006404:	4b17      	ldr	r3, [pc, #92]	; (8006464 <_Balloc+0x78>)
 8006406:	4818      	ldr	r0, [pc, #96]	; (8006468 <_Balloc+0x7c>)
 8006408:	f000 fdce 	bl	8006fa8 <__assert_func>
 800640c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006410:	6006      	str	r6, [r0, #0]
 8006412:	60c6      	str	r6, [r0, #12]
 8006414:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006416:	68f3      	ldr	r3, [r6, #12]
 8006418:	b183      	cbz	r3, 800643c <_Balloc+0x50>
 800641a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006422:	b9b8      	cbnz	r0, 8006454 <_Balloc+0x68>
 8006424:	2101      	movs	r1, #1
 8006426:	fa01 f605 	lsl.w	r6, r1, r5
 800642a:	1d72      	adds	r2, r6, #5
 800642c:	4620      	mov	r0, r4
 800642e:	0092      	lsls	r2, r2, #2
 8006430:	f000 fb5e 	bl	8006af0 <_calloc_r>
 8006434:	b160      	cbz	r0, 8006450 <_Balloc+0x64>
 8006436:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800643a:	e00e      	b.n	800645a <_Balloc+0x6e>
 800643c:	2221      	movs	r2, #33	; 0x21
 800643e:	2104      	movs	r1, #4
 8006440:	4620      	mov	r0, r4
 8006442:	f000 fb55 	bl	8006af0 <_calloc_r>
 8006446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006448:	60f0      	str	r0, [r6, #12]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e4      	bne.n	800641a <_Balloc+0x2e>
 8006450:	2000      	movs	r0, #0
 8006452:	bd70      	pop	{r4, r5, r6, pc}
 8006454:	6802      	ldr	r2, [r0, #0]
 8006456:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800645a:	2300      	movs	r3, #0
 800645c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006460:	e7f7      	b.n	8006452 <_Balloc+0x66>
 8006462:	bf00      	nop
 8006464:	08007c71 	.word	0x08007c71
 8006468:	08007cf4 	.word	0x08007cf4

0800646c <_Bfree>:
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006470:	4605      	mov	r5, r0
 8006472:	460c      	mov	r4, r1
 8006474:	b976      	cbnz	r6, 8006494 <_Bfree+0x28>
 8006476:	2010      	movs	r0, #16
 8006478:	f7ff ff94 	bl	80063a4 <malloc>
 800647c:	4602      	mov	r2, r0
 800647e:	6268      	str	r0, [r5, #36]	; 0x24
 8006480:	b920      	cbnz	r0, 800648c <_Bfree+0x20>
 8006482:	218a      	movs	r1, #138	; 0x8a
 8006484:	4b08      	ldr	r3, [pc, #32]	; (80064a8 <_Bfree+0x3c>)
 8006486:	4809      	ldr	r0, [pc, #36]	; (80064ac <_Bfree+0x40>)
 8006488:	f000 fd8e 	bl	8006fa8 <__assert_func>
 800648c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006490:	6006      	str	r6, [r0, #0]
 8006492:	60c6      	str	r6, [r0, #12]
 8006494:	b13c      	cbz	r4, 80064a6 <_Bfree+0x3a>
 8006496:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006498:	6862      	ldr	r2, [r4, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064a0:	6021      	str	r1, [r4, #0]
 80064a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064a6:	bd70      	pop	{r4, r5, r6, pc}
 80064a8:	08007c71 	.word	0x08007c71
 80064ac:	08007cf4 	.word	0x08007cf4

080064b0 <__multadd>:
 80064b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b4:	4607      	mov	r7, r0
 80064b6:	460c      	mov	r4, r1
 80064b8:	461e      	mov	r6, r3
 80064ba:	2000      	movs	r0, #0
 80064bc:	690d      	ldr	r5, [r1, #16]
 80064be:	f101 0c14 	add.w	ip, r1, #20
 80064c2:	f8dc 3000 	ldr.w	r3, [ip]
 80064c6:	3001      	adds	r0, #1
 80064c8:	b299      	uxth	r1, r3
 80064ca:	fb02 6101 	mla	r1, r2, r1, r6
 80064ce:	0c1e      	lsrs	r6, r3, #16
 80064d0:	0c0b      	lsrs	r3, r1, #16
 80064d2:	fb02 3306 	mla	r3, r2, r6, r3
 80064d6:	b289      	uxth	r1, r1
 80064d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80064dc:	4285      	cmp	r5, r0
 80064de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80064e2:	f84c 1b04 	str.w	r1, [ip], #4
 80064e6:	dcec      	bgt.n	80064c2 <__multadd+0x12>
 80064e8:	b30e      	cbz	r6, 800652e <__multadd+0x7e>
 80064ea:	68a3      	ldr	r3, [r4, #8]
 80064ec:	42ab      	cmp	r3, r5
 80064ee:	dc19      	bgt.n	8006524 <__multadd+0x74>
 80064f0:	6861      	ldr	r1, [r4, #4]
 80064f2:	4638      	mov	r0, r7
 80064f4:	3101      	adds	r1, #1
 80064f6:	f7ff ff79 	bl	80063ec <_Balloc>
 80064fa:	4680      	mov	r8, r0
 80064fc:	b928      	cbnz	r0, 800650a <__multadd+0x5a>
 80064fe:	4602      	mov	r2, r0
 8006500:	21b5      	movs	r1, #181	; 0xb5
 8006502:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <__multadd+0x84>)
 8006504:	480c      	ldr	r0, [pc, #48]	; (8006538 <__multadd+0x88>)
 8006506:	f000 fd4f 	bl	8006fa8 <__assert_func>
 800650a:	6922      	ldr	r2, [r4, #16]
 800650c:	f104 010c 	add.w	r1, r4, #12
 8006510:	3202      	adds	r2, #2
 8006512:	0092      	lsls	r2, r2, #2
 8006514:	300c      	adds	r0, #12
 8006516:	f7ff ff5b 	bl	80063d0 <memcpy>
 800651a:	4621      	mov	r1, r4
 800651c:	4638      	mov	r0, r7
 800651e:	f7ff ffa5 	bl	800646c <_Bfree>
 8006522:	4644      	mov	r4, r8
 8006524:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006528:	3501      	adds	r5, #1
 800652a:	615e      	str	r6, [r3, #20]
 800652c:	6125      	str	r5, [r4, #16]
 800652e:	4620      	mov	r0, r4
 8006530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006534:	08007ce3 	.word	0x08007ce3
 8006538:	08007cf4 	.word	0x08007cf4

0800653c <__hi0bits>:
 800653c:	0c02      	lsrs	r2, r0, #16
 800653e:	0412      	lsls	r2, r2, #16
 8006540:	4603      	mov	r3, r0
 8006542:	b9ca      	cbnz	r2, 8006578 <__hi0bits+0x3c>
 8006544:	0403      	lsls	r3, r0, #16
 8006546:	2010      	movs	r0, #16
 8006548:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800654c:	bf04      	itt	eq
 800654e:	021b      	lsleq	r3, r3, #8
 8006550:	3008      	addeq	r0, #8
 8006552:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006556:	bf04      	itt	eq
 8006558:	011b      	lsleq	r3, r3, #4
 800655a:	3004      	addeq	r0, #4
 800655c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006560:	bf04      	itt	eq
 8006562:	009b      	lsleq	r3, r3, #2
 8006564:	3002      	addeq	r0, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	db05      	blt.n	8006576 <__hi0bits+0x3a>
 800656a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800656e:	f100 0001 	add.w	r0, r0, #1
 8006572:	bf08      	it	eq
 8006574:	2020      	moveq	r0, #32
 8006576:	4770      	bx	lr
 8006578:	2000      	movs	r0, #0
 800657a:	e7e5      	b.n	8006548 <__hi0bits+0xc>

0800657c <__lo0bits>:
 800657c:	6803      	ldr	r3, [r0, #0]
 800657e:	4602      	mov	r2, r0
 8006580:	f013 0007 	ands.w	r0, r3, #7
 8006584:	d00b      	beq.n	800659e <__lo0bits+0x22>
 8006586:	07d9      	lsls	r1, r3, #31
 8006588:	d421      	bmi.n	80065ce <__lo0bits+0x52>
 800658a:	0798      	lsls	r0, r3, #30
 800658c:	bf49      	itett	mi
 800658e:	085b      	lsrmi	r3, r3, #1
 8006590:	089b      	lsrpl	r3, r3, #2
 8006592:	2001      	movmi	r0, #1
 8006594:	6013      	strmi	r3, [r2, #0]
 8006596:	bf5c      	itt	pl
 8006598:	2002      	movpl	r0, #2
 800659a:	6013      	strpl	r3, [r2, #0]
 800659c:	4770      	bx	lr
 800659e:	b299      	uxth	r1, r3
 80065a0:	b909      	cbnz	r1, 80065a6 <__lo0bits+0x2a>
 80065a2:	2010      	movs	r0, #16
 80065a4:	0c1b      	lsrs	r3, r3, #16
 80065a6:	b2d9      	uxtb	r1, r3
 80065a8:	b909      	cbnz	r1, 80065ae <__lo0bits+0x32>
 80065aa:	3008      	adds	r0, #8
 80065ac:	0a1b      	lsrs	r3, r3, #8
 80065ae:	0719      	lsls	r1, r3, #28
 80065b0:	bf04      	itt	eq
 80065b2:	091b      	lsreq	r3, r3, #4
 80065b4:	3004      	addeq	r0, #4
 80065b6:	0799      	lsls	r1, r3, #30
 80065b8:	bf04      	itt	eq
 80065ba:	089b      	lsreq	r3, r3, #2
 80065bc:	3002      	addeq	r0, #2
 80065be:	07d9      	lsls	r1, r3, #31
 80065c0:	d403      	bmi.n	80065ca <__lo0bits+0x4e>
 80065c2:	085b      	lsrs	r3, r3, #1
 80065c4:	f100 0001 	add.w	r0, r0, #1
 80065c8:	d003      	beq.n	80065d2 <__lo0bits+0x56>
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	4770      	bx	lr
 80065ce:	2000      	movs	r0, #0
 80065d0:	4770      	bx	lr
 80065d2:	2020      	movs	r0, #32
 80065d4:	4770      	bx	lr
	...

080065d8 <__i2b>:
 80065d8:	b510      	push	{r4, lr}
 80065da:	460c      	mov	r4, r1
 80065dc:	2101      	movs	r1, #1
 80065de:	f7ff ff05 	bl	80063ec <_Balloc>
 80065e2:	4602      	mov	r2, r0
 80065e4:	b928      	cbnz	r0, 80065f2 <__i2b+0x1a>
 80065e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80065ea:	4b04      	ldr	r3, [pc, #16]	; (80065fc <__i2b+0x24>)
 80065ec:	4804      	ldr	r0, [pc, #16]	; (8006600 <__i2b+0x28>)
 80065ee:	f000 fcdb 	bl	8006fa8 <__assert_func>
 80065f2:	2301      	movs	r3, #1
 80065f4:	6144      	str	r4, [r0, #20]
 80065f6:	6103      	str	r3, [r0, #16]
 80065f8:	bd10      	pop	{r4, pc}
 80065fa:	bf00      	nop
 80065fc:	08007ce3 	.word	0x08007ce3
 8006600:	08007cf4 	.word	0x08007cf4

08006604 <__multiply>:
 8006604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006608:	4691      	mov	r9, r2
 800660a:	690a      	ldr	r2, [r1, #16]
 800660c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006610:	460c      	mov	r4, r1
 8006612:	429a      	cmp	r2, r3
 8006614:	bfbe      	ittt	lt
 8006616:	460b      	movlt	r3, r1
 8006618:	464c      	movlt	r4, r9
 800661a:	4699      	movlt	r9, r3
 800661c:	6927      	ldr	r7, [r4, #16]
 800661e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006622:	68a3      	ldr	r3, [r4, #8]
 8006624:	6861      	ldr	r1, [r4, #4]
 8006626:	eb07 060a 	add.w	r6, r7, sl
 800662a:	42b3      	cmp	r3, r6
 800662c:	b085      	sub	sp, #20
 800662e:	bfb8      	it	lt
 8006630:	3101      	addlt	r1, #1
 8006632:	f7ff fedb 	bl	80063ec <_Balloc>
 8006636:	b930      	cbnz	r0, 8006646 <__multiply+0x42>
 8006638:	4602      	mov	r2, r0
 800663a:	f240 115d 	movw	r1, #349	; 0x15d
 800663e:	4b43      	ldr	r3, [pc, #268]	; (800674c <__multiply+0x148>)
 8006640:	4843      	ldr	r0, [pc, #268]	; (8006750 <__multiply+0x14c>)
 8006642:	f000 fcb1 	bl	8006fa8 <__assert_func>
 8006646:	f100 0514 	add.w	r5, r0, #20
 800664a:	462b      	mov	r3, r5
 800664c:	2200      	movs	r2, #0
 800664e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006652:	4543      	cmp	r3, r8
 8006654:	d321      	bcc.n	800669a <__multiply+0x96>
 8006656:	f104 0314 	add.w	r3, r4, #20
 800665a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800665e:	f109 0314 	add.w	r3, r9, #20
 8006662:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006666:	9202      	str	r2, [sp, #8]
 8006668:	1b3a      	subs	r2, r7, r4
 800666a:	3a15      	subs	r2, #21
 800666c:	f022 0203 	bic.w	r2, r2, #3
 8006670:	3204      	adds	r2, #4
 8006672:	f104 0115 	add.w	r1, r4, #21
 8006676:	428f      	cmp	r7, r1
 8006678:	bf38      	it	cc
 800667a:	2204      	movcc	r2, #4
 800667c:	9201      	str	r2, [sp, #4]
 800667e:	9a02      	ldr	r2, [sp, #8]
 8006680:	9303      	str	r3, [sp, #12]
 8006682:	429a      	cmp	r2, r3
 8006684:	d80c      	bhi.n	80066a0 <__multiply+0x9c>
 8006686:	2e00      	cmp	r6, #0
 8006688:	dd03      	ble.n	8006692 <__multiply+0x8e>
 800668a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800668e:	2b00      	cmp	r3, #0
 8006690:	d059      	beq.n	8006746 <__multiply+0x142>
 8006692:	6106      	str	r6, [r0, #16]
 8006694:	b005      	add	sp, #20
 8006696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669a:	f843 2b04 	str.w	r2, [r3], #4
 800669e:	e7d8      	b.n	8006652 <__multiply+0x4e>
 80066a0:	f8b3 a000 	ldrh.w	sl, [r3]
 80066a4:	f1ba 0f00 	cmp.w	sl, #0
 80066a8:	d023      	beq.n	80066f2 <__multiply+0xee>
 80066aa:	46a9      	mov	r9, r5
 80066ac:	f04f 0c00 	mov.w	ip, #0
 80066b0:	f104 0e14 	add.w	lr, r4, #20
 80066b4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80066b8:	f8d9 1000 	ldr.w	r1, [r9]
 80066bc:	fa1f fb82 	uxth.w	fp, r2
 80066c0:	b289      	uxth	r1, r1
 80066c2:	fb0a 110b 	mla	r1, sl, fp, r1
 80066c6:	4461      	add	r1, ip
 80066c8:	f8d9 c000 	ldr.w	ip, [r9]
 80066cc:	0c12      	lsrs	r2, r2, #16
 80066ce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80066d2:	fb0a c202 	mla	r2, sl, r2, ip
 80066d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80066da:	b289      	uxth	r1, r1
 80066dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80066e0:	4577      	cmp	r7, lr
 80066e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80066e6:	f849 1b04 	str.w	r1, [r9], #4
 80066ea:	d8e3      	bhi.n	80066b4 <__multiply+0xb0>
 80066ec:	9a01      	ldr	r2, [sp, #4]
 80066ee:	f845 c002 	str.w	ip, [r5, r2]
 80066f2:	9a03      	ldr	r2, [sp, #12]
 80066f4:	3304      	adds	r3, #4
 80066f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80066fa:	f1b9 0f00 	cmp.w	r9, #0
 80066fe:	d020      	beq.n	8006742 <__multiply+0x13e>
 8006700:	46ae      	mov	lr, r5
 8006702:	f04f 0a00 	mov.w	sl, #0
 8006706:	6829      	ldr	r1, [r5, #0]
 8006708:	f104 0c14 	add.w	ip, r4, #20
 800670c:	f8bc b000 	ldrh.w	fp, [ip]
 8006710:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006714:	b289      	uxth	r1, r1
 8006716:	fb09 220b 	mla	r2, r9, fp, r2
 800671a:	4492      	add	sl, r2
 800671c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006720:	f84e 1b04 	str.w	r1, [lr], #4
 8006724:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006728:	f8be 1000 	ldrh.w	r1, [lr]
 800672c:	0c12      	lsrs	r2, r2, #16
 800672e:	fb09 1102 	mla	r1, r9, r2, r1
 8006732:	4567      	cmp	r7, ip
 8006734:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006738:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800673c:	d8e6      	bhi.n	800670c <__multiply+0x108>
 800673e:	9a01      	ldr	r2, [sp, #4]
 8006740:	50a9      	str	r1, [r5, r2]
 8006742:	3504      	adds	r5, #4
 8006744:	e79b      	b.n	800667e <__multiply+0x7a>
 8006746:	3e01      	subs	r6, #1
 8006748:	e79d      	b.n	8006686 <__multiply+0x82>
 800674a:	bf00      	nop
 800674c:	08007ce3 	.word	0x08007ce3
 8006750:	08007cf4 	.word	0x08007cf4

08006754 <__pow5mult>:
 8006754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006758:	4615      	mov	r5, r2
 800675a:	f012 0203 	ands.w	r2, r2, #3
 800675e:	4606      	mov	r6, r0
 8006760:	460f      	mov	r7, r1
 8006762:	d007      	beq.n	8006774 <__pow5mult+0x20>
 8006764:	4c25      	ldr	r4, [pc, #148]	; (80067fc <__pow5mult+0xa8>)
 8006766:	3a01      	subs	r2, #1
 8006768:	2300      	movs	r3, #0
 800676a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800676e:	f7ff fe9f 	bl	80064b0 <__multadd>
 8006772:	4607      	mov	r7, r0
 8006774:	10ad      	asrs	r5, r5, #2
 8006776:	d03d      	beq.n	80067f4 <__pow5mult+0xa0>
 8006778:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800677a:	b97c      	cbnz	r4, 800679c <__pow5mult+0x48>
 800677c:	2010      	movs	r0, #16
 800677e:	f7ff fe11 	bl	80063a4 <malloc>
 8006782:	4602      	mov	r2, r0
 8006784:	6270      	str	r0, [r6, #36]	; 0x24
 8006786:	b928      	cbnz	r0, 8006794 <__pow5mult+0x40>
 8006788:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800678c:	4b1c      	ldr	r3, [pc, #112]	; (8006800 <__pow5mult+0xac>)
 800678e:	481d      	ldr	r0, [pc, #116]	; (8006804 <__pow5mult+0xb0>)
 8006790:	f000 fc0a 	bl	8006fa8 <__assert_func>
 8006794:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006798:	6004      	str	r4, [r0, #0]
 800679a:	60c4      	str	r4, [r0, #12]
 800679c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80067a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067a4:	b94c      	cbnz	r4, 80067ba <__pow5mult+0x66>
 80067a6:	f240 2171 	movw	r1, #625	; 0x271
 80067aa:	4630      	mov	r0, r6
 80067ac:	f7ff ff14 	bl	80065d8 <__i2b>
 80067b0:	2300      	movs	r3, #0
 80067b2:	4604      	mov	r4, r0
 80067b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80067b8:	6003      	str	r3, [r0, #0]
 80067ba:	f04f 0900 	mov.w	r9, #0
 80067be:	07eb      	lsls	r3, r5, #31
 80067c0:	d50a      	bpl.n	80067d8 <__pow5mult+0x84>
 80067c2:	4639      	mov	r1, r7
 80067c4:	4622      	mov	r2, r4
 80067c6:	4630      	mov	r0, r6
 80067c8:	f7ff ff1c 	bl	8006604 <__multiply>
 80067cc:	4680      	mov	r8, r0
 80067ce:	4639      	mov	r1, r7
 80067d0:	4630      	mov	r0, r6
 80067d2:	f7ff fe4b 	bl	800646c <_Bfree>
 80067d6:	4647      	mov	r7, r8
 80067d8:	106d      	asrs	r5, r5, #1
 80067da:	d00b      	beq.n	80067f4 <__pow5mult+0xa0>
 80067dc:	6820      	ldr	r0, [r4, #0]
 80067de:	b938      	cbnz	r0, 80067f0 <__pow5mult+0x9c>
 80067e0:	4622      	mov	r2, r4
 80067e2:	4621      	mov	r1, r4
 80067e4:	4630      	mov	r0, r6
 80067e6:	f7ff ff0d 	bl	8006604 <__multiply>
 80067ea:	6020      	str	r0, [r4, #0]
 80067ec:	f8c0 9000 	str.w	r9, [r0]
 80067f0:	4604      	mov	r4, r0
 80067f2:	e7e4      	b.n	80067be <__pow5mult+0x6a>
 80067f4:	4638      	mov	r0, r7
 80067f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067fa:	bf00      	nop
 80067fc:	08007e40 	.word	0x08007e40
 8006800:	08007c71 	.word	0x08007c71
 8006804:	08007cf4 	.word	0x08007cf4

08006808 <__lshift>:
 8006808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800680c:	460c      	mov	r4, r1
 800680e:	4607      	mov	r7, r0
 8006810:	4691      	mov	r9, r2
 8006812:	6923      	ldr	r3, [r4, #16]
 8006814:	6849      	ldr	r1, [r1, #4]
 8006816:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800681a:	68a3      	ldr	r3, [r4, #8]
 800681c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006820:	f108 0601 	add.w	r6, r8, #1
 8006824:	42b3      	cmp	r3, r6
 8006826:	db0b      	blt.n	8006840 <__lshift+0x38>
 8006828:	4638      	mov	r0, r7
 800682a:	f7ff fddf 	bl	80063ec <_Balloc>
 800682e:	4605      	mov	r5, r0
 8006830:	b948      	cbnz	r0, 8006846 <__lshift+0x3e>
 8006832:	4602      	mov	r2, r0
 8006834:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006838:	4b29      	ldr	r3, [pc, #164]	; (80068e0 <__lshift+0xd8>)
 800683a:	482a      	ldr	r0, [pc, #168]	; (80068e4 <__lshift+0xdc>)
 800683c:	f000 fbb4 	bl	8006fa8 <__assert_func>
 8006840:	3101      	adds	r1, #1
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	e7ee      	b.n	8006824 <__lshift+0x1c>
 8006846:	2300      	movs	r3, #0
 8006848:	f100 0114 	add.w	r1, r0, #20
 800684c:	f100 0210 	add.w	r2, r0, #16
 8006850:	4618      	mov	r0, r3
 8006852:	4553      	cmp	r3, sl
 8006854:	db37      	blt.n	80068c6 <__lshift+0xbe>
 8006856:	6920      	ldr	r0, [r4, #16]
 8006858:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800685c:	f104 0314 	add.w	r3, r4, #20
 8006860:	f019 091f 	ands.w	r9, r9, #31
 8006864:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006868:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800686c:	d02f      	beq.n	80068ce <__lshift+0xc6>
 800686e:	468a      	mov	sl, r1
 8006870:	f04f 0c00 	mov.w	ip, #0
 8006874:	f1c9 0e20 	rsb	lr, r9, #32
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	fa02 f209 	lsl.w	r2, r2, r9
 800687e:	ea42 020c 	orr.w	r2, r2, ip
 8006882:	f84a 2b04 	str.w	r2, [sl], #4
 8006886:	f853 2b04 	ldr.w	r2, [r3], #4
 800688a:	4298      	cmp	r0, r3
 800688c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006890:	d8f2      	bhi.n	8006878 <__lshift+0x70>
 8006892:	1b03      	subs	r3, r0, r4
 8006894:	3b15      	subs	r3, #21
 8006896:	f023 0303 	bic.w	r3, r3, #3
 800689a:	3304      	adds	r3, #4
 800689c:	f104 0215 	add.w	r2, r4, #21
 80068a0:	4290      	cmp	r0, r2
 80068a2:	bf38      	it	cc
 80068a4:	2304      	movcc	r3, #4
 80068a6:	f841 c003 	str.w	ip, [r1, r3]
 80068aa:	f1bc 0f00 	cmp.w	ip, #0
 80068ae:	d001      	beq.n	80068b4 <__lshift+0xac>
 80068b0:	f108 0602 	add.w	r6, r8, #2
 80068b4:	3e01      	subs	r6, #1
 80068b6:	4638      	mov	r0, r7
 80068b8:	4621      	mov	r1, r4
 80068ba:	612e      	str	r6, [r5, #16]
 80068bc:	f7ff fdd6 	bl	800646c <_Bfree>
 80068c0:	4628      	mov	r0, r5
 80068c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80068ca:	3301      	adds	r3, #1
 80068cc:	e7c1      	b.n	8006852 <__lshift+0x4a>
 80068ce:	3904      	subs	r1, #4
 80068d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80068d4:	4298      	cmp	r0, r3
 80068d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80068da:	d8f9      	bhi.n	80068d0 <__lshift+0xc8>
 80068dc:	e7ea      	b.n	80068b4 <__lshift+0xac>
 80068de:	bf00      	nop
 80068e0:	08007ce3 	.word	0x08007ce3
 80068e4:	08007cf4 	.word	0x08007cf4

080068e8 <__mcmp>:
 80068e8:	4603      	mov	r3, r0
 80068ea:	690a      	ldr	r2, [r1, #16]
 80068ec:	6900      	ldr	r0, [r0, #16]
 80068ee:	b530      	push	{r4, r5, lr}
 80068f0:	1a80      	subs	r0, r0, r2
 80068f2:	d10d      	bne.n	8006910 <__mcmp+0x28>
 80068f4:	3314      	adds	r3, #20
 80068f6:	3114      	adds	r1, #20
 80068f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80068fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006900:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006904:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006908:	4295      	cmp	r5, r2
 800690a:	d002      	beq.n	8006912 <__mcmp+0x2a>
 800690c:	d304      	bcc.n	8006918 <__mcmp+0x30>
 800690e:	2001      	movs	r0, #1
 8006910:	bd30      	pop	{r4, r5, pc}
 8006912:	42a3      	cmp	r3, r4
 8006914:	d3f4      	bcc.n	8006900 <__mcmp+0x18>
 8006916:	e7fb      	b.n	8006910 <__mcmp+0x28>
 8006918:	f04f 30ff 	mov.w	r0, #4294967295
 800691c:	e7f8      	b.n	8006910 <__mcmp+0x28>
	...

08006920 <__mdiff>:
 8006920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006924:	460d      	mov	r5, r1
 8006926:	4607      	mov	r7, r0
 8006928:	4611      	mov	r1, r2
 800692a:	4628      	mov	r0, r5
 800692c:	4614      	mov	r4, r2
 800692e:	f7ff ffdb 	bl	80068e8 <__mcmp>
 8006932:	1e06      	subs	r6, r0, #0
 8006934:	d111      	bne.n	800695a <__mdiff+0x3a>
 8006936:	4631      	mov	r1, r6
 8006938:	4638      	mov	r0, r7
 800693a:	f7ff fd57 	bl	80063ec <_Balloc>
 800693e:	4602      	mov	r2, r0
 8006940:	b928      	cbnz	r0, 800694e <__mdiff+0x2e>
 8006942:	f240 2132 	movw	r1, #562	; 0x232
 8006946:	4b3a      	ldr	r3, [pc, #232]	; (8006a30 <__mdiff+0x110>)
 8006948:	483a      	ldr	r0, [pc, #232]	; (8006a34 <__mdiff+0x114>)
 800694a:	f000 fb2d 	bl	8006fa8 <__assert_func>
 800694e:	2301      	movs	r3, #1
 8006950:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006954:	4610      	mov	r0, r2
 8006956:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695a:	bfa4      	itt	ge
 800695c:	4623      	movge	r3, r4
 800695e:	462c      	movge	r4, r5
 8006960:	4638      	mov	r0, r7
 8006962:	6861      	ldr	r1, [r4, #4]
 8006964:	bfa6      	itte	ge
 8006966:	461d      	movge	r5, r3
 8006968:	2600      	movge	r6, #0
 800696a:	2601      	movlt	r6, #1
 800696c:	f7ff fd3e 	bl	80063ec <_Balloc>
 8006970:	4602      	mov	r2, r0
 8006972:	b918      	cbnz	r0, 800697c <__mdiff+0x5c>
 8006974:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006978:	4b2d      	ldr	r3, [pc, #180]	; (8006a30 <__mdiff+0x110>)
 800697a:	e7e5      	b.n	8006948 <__mdiff+0x28>
 800697c:	f102 0814 	add.w	r8, r2, #20
 8006980:	46c2      	mov	sl, r8
 8006982:	f04f 0c00 	mov.w	ip, #0
 8006986:	6927      	ldr	r7, [r4, #16]
 8006988:	60c6      	str	r6, [r0, #12]
 800698a:	692e      	ldr	r6, [r5, #16]
 800698c:	f104 0014 	add.w	r0, r4, #20
 8006990:	f105 0914 	add.w	r9, r5, #20
 8006994:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006998:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800699c:	3410      	adds	r4, #16
 800699e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80069a2:	f859 3b04 	ldr.w	r3, [r9], #4
 80069a6:	fa1f f18b 	uxth.w	r1, fp
 80069aa:	448c      	add	ip, r1
 80069ac:	b299      	uxth	r1, r3
 80069ae:	0c1b      	lsrs	r3, r3, #16
 80069b0:	ebac 0101 	sub.w	r1, ip, r1
 80069b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80069b8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80069bc:	b289      	uxth	r1, r1
 80069be:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80069c2:	454e      	cmp	r6, r9
 80069c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80069c8:	f84a 3b04 	str.w	r3, [sl], #4
 80069cc:	d8e7      	bhi.n	800699e <__mdiff+0x7e>
 80069ce:	1b73      	subs	r3, r6, r5
 80069d0:	3b15      	subs	r3, #21
 80069d2:	f023 0303 	bic.w	r3, r3, #3
 80069d6:	3515      	adds	r5, #21
 80069d8:	3304      	adds	r3, #4
 80069da:	42ae      	cmp	r6, r5
 80069dc:	bf38      	it	cc
 80069de:	2304      	movcc	r3, #4
 80069e0:	4418      	add	r0, r3
 80069e2:	4443      	add	r3, r8
 80069e4:	461e      	mov	r6, r3
 80069e6:	4605      	mov	r5, r0
 80069e8:	4575      	cmp	r5, lr
 80069ea:	d30e      	bcc.n	8006a0a <__mdiff+0xea>
 80069ec:	f10e 0103 	add.w	r1, lr, #3
 80069f0:	1a09      	subs	r1, r1, r0
 80069f2:	f021 0103 	bic.w	r1, r1, #3
 80069f6:	3803      	subs	r0, #3
 80069f8:	4586      	cmp	lr, r0
 80069fa:	bf38      	it	cc
 80069fc:	2100      	movcc	r1, #0
 80069fe:	4419      	add	r1, r3
 8006a00:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006a04:	b18b      	cbz	r3, 8006a2a <__mdiff+0x10a>
 8006a06:	6117      	str	r7, [r2, #16]
 8006a08:	e7a4      	b.n	8006954 <__mdiff+0x34>
 8006a0a:	f855 8b04 	ldr.w	r8, [r5], #4
 8006a0e:	fa1f f188 	uxth.w	r1, r8
 8006a12:	4461      	add	r1, ip
 8006a14:	140c      	asrs	r4, r1, #16
 8006a16:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006a1a:	b289      	uxth	r1, r1
 8006a1c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006a20:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006a24:	f846 1b04 	str.w	r1, [r6], #4
 8006a28:	e7de      	b.n	80069e8 <__mdiff+0xc8>
 8006a2a:	3f01      	subs	r7, #1
 8006a2c:	e7e8      	b.n	8006a00 <__mdiff+0xe0>
 8006a2e:	bf00      	nop
 8006a30:	08007ce3 	.word	0x08007ce3
 8006a34:	08007cf4 	.word	0x08007cf4

08006a38 <__d2b>:
 8006a38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006a42:	4690      	mov	r8, r2
 8006a44:	461d      	mov	r5, r3
 8006a46:	f7ff fcd1 	bl	80063ec <_Balloc>
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	b930      	cbnz	r0, 8006a5c <__d2b+0x24>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	f240 310a 	movw	r1, #778	; 0x30a
 8006a54:	4b24      	ldr	r3, [pc, #144]	; (8006ae8 <__d2b+0xb0>)
 8006a56:	4825      	ldr	r0, [pc, #148]	; (8006aec <__d2b+0xb4>)
 8006a58:	f000 faa6 	bl	8006fa8 <__assert_func>
 8006a5c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006a60:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006a64:	bb2d      	cbnz	r5, 8006ab2 <__d2b+0x7a>
 8006a66:	9301      	str	r3, [sp, #4]
 8006a68:	f1b8 0300 	subs.w	r3, r8, #0
 8006a6c:	d026      	beq.n	8006abc <__d2b+0x84>
 8006a6e:	4668      	mov	r0, sp
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	f7ff fd83 	bl	800657c <__lo0bits>
 8006a76:	9900      	ldr	r1, [sp, #0]
 8006a78:	b1f0      	cbz	r0, 8006ab8 <__d2b+0x80>
 8006a7a:	9a01      	ldr	r2, [sp, #4]
 8006a7c:	f1c0 0320 	rsb	r3, r0, #32
 8006a80:	fa02 f303 	lsl.w	r3, r2, r3
 8006a84:	430b      	orrs	r3, r1
 8006a86:	40c2      	lsrs	r2, r0
 8006a88:	6163      	str	r3, [r4, #20]
 8006a8a:	9201      	str	r2, [sp, #4]
 8006a8c:	9b01      	ldr	r3, [sp, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	bf14      	ite	ne
 8006a92:	2102      	movne	r1, #2
 8006a94:	2101      	moveq	r1, #1
 8006a96:	61a3      	str	r3, [r4, #24]
 8006a98:	6121      	str	r1, [r4, #16]
 8006a9a:	b1c5      	cbz	r5, 8006ace <__d2b+0x96>
 8006a9c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006aa0:	4405      	add	r5, r0
 8006aa2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006aa6:	603d      	str	r5, [r7, #0]
 8006aa8:	6030      	str	r0, [r6, #0]
 8006aaa:	4620      	mov	r0, r4
 8006aac:	b002      	add	sp, #8
 8006aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ab6:	e7d6      	b.n	8006a66 <__d2b+0x2e>
 8006ab8:	6161      	str	r1, [r4, #20]
 8006aba:	e7e7      	b.n	8006a8c <__d2b+0x54>
 8006abc:	a801      	add	r0, sp, #4
 8006abe:	f7ff fd5d 	bl	800657c <__lo0bits>
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	9b01      	ldr	r3, [sp, #4]
 8006ac6:	6121      	str	r1, [r4, #16]
 8006ac8:	6163      	str	r3, [r4, #20]
 8006aca:	3020      	adds	r0, #32
 8006acc:	e7e5      	b.n	8006a9a <__d2b+0x62>
 8006ace:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006ad2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ad6:	6038      	str	r0, [r7, #0]
 8006ad8:	6918      	ldr	r0, [r3, #16]
 8006ada:	f7ff fd2f 	bl	800653c <__hi0bits>
 8006ade:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006ae2:	6031      	str	r1, [r6, #0]
 8006ae4:	e7e1      	b.n	8006aaa <__d2b+0x72>
 8006ae6:	bf00      	nop
 8006ae8:	08007ce3 	.word	0x08007ce3
 8006aec:	08007cf4 	.word	0x08007cf4

08006af0 <_calloc_r>:
 8006af0:	b570      	push	{r4, r5, r6, lr}
 8006af2:	fba1 5402 	umull	r5, r4, r1, r2
 8006af6:	b934      	cbnz	r4, 8006b06 <_calloc_r+0x16>
 8006af8:	4629      	mov	r1, r5
 8006afa:	f000 f875 	bl	8006be8 <_malloc_r>
 8006afe:	4606      	mov	r6, r0
 8006b00:	b928      	cbnz	r0, 8006b0e <_calloc_r+0x1e>
 8006b02:	4630      	mov	r0, r6
 8006b04:	bd70      	pop	{r4, r5, r6, pc}
 8006b06:	220c      	movs	r2, #12
 8006b08:	2600      	movs	r6, #0
 8006b0a:	6002      	str	r2, [r0, #0]
 8006b0c:	e7f9      	b.n	8006b02 <_calloc_r+0x12>
 8006b0e:	462a      	mov	r2, r5
 8006b10:	4621      	mov	r1, r4
 8006b12:	f7fe f93f 	bl	8004d94 <memset>
 8006b16:	e7f4      	b.n	8006b02 <_calloc_r+0x12>

08006b18 <_free_r>:
 8006b18:	b538      	push	{r3, r4, r5, lr}
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	2900      	cmp	r1, #0
 8006b1e:	d040      	beq.n	8006ba2 <_free_r+0x8a>
 8006b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b24:	1f0c      	subs	r4, r1, #4
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	bfb8      	it	lt
 8006b2a:	18e4      	addlt	r4, r4, r3
 8006b2c:	f000 fa98 	bl	8007060 <__malloc_lock>
 8006b30:	4a1c      	ldr	r2, [pc, #112]	; (8006ba4 <_free_r+0x8c>)
 8006b32:	6813      	ldr	r3, [r2, #0]
 8006b34:	b933      	cbnz	r3, 8006b44 <_free_r+0x2c>
 8006b36:	6063      	str	r3, [r4, #4]
 8006b38:	6014      	str	r4, [r2, #0]
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b40:	f000 ba94 	b.w	800706c <__malloc_unlock>
 8006b44:	42a3      	cmp	r3, r4
 8006b46:	d908      	bls.n	8006b5a <_free_r+0x42>
 8006b48:	6820      	ldr	r0, [r4, #0]
 8006b4a:	1821      	adds	r1, r4, r0
 8006b4c:	428b      	cmp	r3, r1
 8006b4e:	bf01      	itttt	eq
 8006b50:	6819      	ldreq	r1, [r3, #0]
 8006b52:	685b      	ldreq	r3, [r3, #4]
 8006b54:	1809      	addeq	r1, r1, r0
 8006b56:	6021      	streq	r1, [r4, #0]
 8006b58:	e7ed      	b.n	8006b36 <_free_r+0x1e>
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	b10b      	cbz	r3, 8006b64 <_free_r+0x4c>
 8006b60:	42a3      	cmp	r3, r4
 8006b62:	d9fa      	bls.n	8006b5a <_free_r+0x42>
 8006b64:	6811      	ldr	r1, [r2, #0]
 8006b66:	1850      	adds	r0, r2, r1
 8006b68:	42a0      	cmp	r0, r4
 8006b6a:	d10b      	bne.n	8006b84 <_free_r+0x6c>
 8006b6c:	6820      	ldr	r0, [r4, #0]
 8006b6e:	4401      	add	r1, r0
 8006b70:	1850      	adds	r0, r2, r1
 8006b72:	4283      	cmp	r3, r0
 8006b74:	6011      	str	r1, [r2, #0]
 8006b76:	d1e0      	bne.n	8006b3a <_free_r+0x22>
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	4401      	add	r1, r0
 8006b7e:	6011      	str	r1, [r2, #0]
 8006b80:	6053      	str	r3, [r2, #4]
 8006b82:	e7da      	b.n	8006b3a <_free_r+0x22>
 8006b84:	d902      	bls.n	8006b8c <_free_r+0x74>
 8006b86:	230c      	movs	r3, #12
 8006b88:	602b      	str	r3, [r5, #0]
 8006b8a:	e7d6      	b.n	8006b3a <_free_r+0x22>
 8006b8c:	6820      	ldr	r0, [r4, #0]
 8006b8e:	1821      	adds	r1, r4, r0
 8006b90:	428b      	cmp	r3, r1
 8006b92:	bf01      	itttt	eq
 8006b94:	6819      	ldreq	r1, [r3, #0]
 8006b96:	685b      	ldreq	r3, [r3, #4]
 8006b98:	1809      	addeq	r1, r1, r0
 8006b9a:	6021      	streq	r1, [r4, #0]
 8006b9c:	6063      	str	r3, [r4, #4]
 8006b9e:	6054      	str	r4, [r2, #4]
 8006ba0:	e7cb      	b.n	8006b3a <_free_r+0x22>
 8006ba2:	bd38      	pop	{r3, r4, r5, pc}
 8006ba4:	2000031c 	.word	0x2000031c

08006ba8 <sbrk_aligned>:
 8006ba8:	b570      	push	{r4, r5, r6, lr}
 8006baa:	4e0e      	ldr	r6, [pc, #56]	; (8006be4 <sbrk_aligned+0x3c>)
 8006bac:	460c      	mov	r4, r1
 8006bae:	6831      	ldr	r1, [r6, #0]
 8006bb0:	4605      	mov	r5, r0
 8006bb2:	b911      	cbnz	r1, 8006bba <sbrk_aligned+0x12>
 8006bb4:	f000 f9e8 	bl	8006f88 <_sbrk_r>
 8006bb8:	6030      	str	r0, [r6, #0]
 8006bba:	4621      	mov	r1, r4
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	f000 f9e3 	bl	8006f88 <_sbrk_r>
 8006bc2:	1c43      	adds	r3, r0, #1
 8006bc4:	d00a      	beq.n	8006bdc <sbrk_aligned+0x34>
 8006bc6:	1cc4      	adds	r4, r0, #3
 8006bc8:	f024 0403 	bic.w	r4, r4, #3
 8006bcc:	42a0      	cmp	r0, r4
 8006bce:	d007      	beq.n	8006be0 <sbrk_aligned+0x38>
 8006bd0:	1a21      	subs	r1, r4, r0
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f000 f9d8 	bl	8006f88 <_sbrk_r>
 8006bd8:	3001      	adds	r0, #1
 8006bda:	d101      	bne.n	8006be0 <sbrk_aligned+0x38>
 8006bdc:	f04f 34ff 	mov.w	r4, #4294967295
 8006be0:	4620      	mov	r0, r4
 8006be2:	bd70      	pop	{r4, r5, r6, pc}
 8006be4:	20000320 	.word	0x20000320

08006be8 <_malloc_r>:
 8006be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bec:	1ccd      	adds	r5, r1, #3
 8006bee:	f025 0503 	bic.w	r5, r5, #3
 8006bf2:	3508      	adds	r5, #8
 8006bf4:	2d0c      	cmp	r5, #12
 8006bf6:	bf38      	it	cc
 8006bf8:	250c      	movcc	r5, #12
 8006bfa:	2d00      	cmp	r5, #0
 8006bfc:	4607      	mov	r7, r0
 8006bfe:	db01      	blt.n	8006c04 <_malloc_r+0x1c>
 8006c00:	42a9      	cmp	r1, r5
 8006c02:	d905      	bls.n	8006c10 <_malloc_r+0x28>
 8006c04:	230c      	movs	r3, #12
 8006c06:	2600      	movs	r6, #0
 8006c08:	603b      	str	r3, [r7, #0]
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c10:	4e2e      	ldr	r6, [pc, #184]	; (8006ccc <_malloc_r+0xe4>)
 8006c12:	f000 fa25 	bl	8007060 <__malloc_lock>
 8006c16:	6833      	ldr	r3, [r6, #0]
 8006c18:	461c      	mov	r4, r3
 8006c1a:	bb34      	cbnz	r4, 8006c6a <_malloc_r+0x82>
 8006c1c:	4629      	mov	r1, r5
 8006c1e:	4638      	mov	r0, r7
 8006c20:	f7ff ffc2 	bl	8006ba8 <sbrk_aligned>
 8006c24:	1c43      	adds	r3, r0, #1
 8006c26:	4604      	mov	r4, r0
 8006c28:	d14d      	bne.n	8006cc6 <_malloc_r+0xde>
 8006c2a:	6834      	ldr	r4, [r6, #0]
 8006c2c:	4626      	mov	r6, r4
 8006c2e:	2e00      	cmp	r6, #0
 8006c30:	d140      	bne.n	8006cb4 <_malloc_r+0xcc>
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	4631      	mov	r1, r6
 8006c36:	4638      	mov	r0, r7
 8006c38:	eb04 0803 	add.w	r8, r4, r3
 8006c3c:	f000 f9a4 	bl	8006f88 <_sbrk_r>
 8006c40:	4580      	cmp	r8, r0
 8006c42:	d13a      	bne.n	8006cba <_malloc_r+0xd2>
 8006c44:	6821      	ldr	r1, [r4, #0]
 8006c46:	3503      	adds	r5, #3
 8006c48:	1a6d      	subs	r5, r5, r1
 8006c4a:	f025 0503 	bic.w	r5, r5, #3
 8006c4e:	3508      	adds	r5, #8
 8006c50:	2d0c      	cmp	r5, #12
 8006c52:	bf38      	it	cc
 8006c54:	250c      	movcc	r5, #12
 8006c56:	4638      	mov	r0, r7
 8006c58:	4629      	mov	r1, r5
 8006c5a:	f7ff ffa5 	bl	8006ba8 <sbrk_aligned>
 8006c5e:	3001      	adds	r0, #1
 8006c60:	d02b      	beq.n	8006cba <_malloc_r+0xd2>
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	442b      	add	r3, r5
 8006c66:	6023      	str	r3, [r4, #0]
 8006c68:	e00e      	b.n	8006c88 <_malloc_r+0xa0>
 8006c6a:	6822      	ldr	r2, [r4, #0]
 8006c6c:	1b52      	subs	r2, r2, r5
 8006c6e:	d41e      	bmi.n	8006cae <_malloc_r+0xc6>
 8006c70:	2a0b      	cmp	r2, #11
 8006c72:	d916      	bls.n	8006ca2 <_malloc_r+0xba>
 8006c74:	1961      	adds	r1, r4, r5
 8006c76:	42a3      	cmp	r3, r4
 8006c78:	6025      	str	r5, [r4, #0]
 8006c7a:	bf18      	it	ne
 8006c7c:	6059      	strne	r1, [r3, #4]
 8006c7e:	6863      	ldr	r3, [r4, #4]
 8006c80:	bf08      	it	eq
 8006c82:	6031      	streq	r1, [r6, #0]
 8006c84:	5162      	str	r2, [r4, r5]
 8006c86:	604b      	str	r3, [r1, #4]
 8006c88:	4638      	mov	r0, r7
 8006c8a:	f104 060b 	add.w	r6, r4, #11
 8006c8e:	f000 f9ed 	bl	800706c <__malloc_unlock>
 8006c92:	f026 0607 	bic.w	r6, r6, #7
 8006c96:	1d23      	adds	r3, r4, #4
 8006c98:	1af2      	subs	r2, r6, r3
 8006c9a:	d0b6      	beq.n	8006c0a <_malloc_r+0x22>
 8006c9c:	1b9b      	subs	r3, r3, r6
 8006c9e:	50a3      	str	r3, [r4, r2]
 8006ca0:	e7b3      	b.n	8006c0a <_malloc_r+0x22>
 8006ca2:	6862      	ldr	r2, [r4, #4]
 8006ca4:	42a3      	cmp	r3, r4
 8006ca6:	bf0c      	ite	eq
 8006ca8:	6032      	streq	r2, [r6, #0]
 8006caa:	605a      	strne	r2, [r3, #4]
 8006cac:	e7ec      	b.n	8006c88 <_malloc_r+0xa0>
 8006cae:	4623      	mov	r3, r4
 8006cb0:	6864      	ldr	r4, [r4, #4]
 8006cb2:	e7b2      	b.n	8006c1a <_malloc_r+0x32>
 8006cb4:	4634      	mov	r4, r6
 8006cb6:	6876      	ldr	r6, [r6, #4]
 8006cb8:	e7b9      	b.n	8006c2e <_malloc_r+0x46>
 8006cba:	230c      	movs	r3, #12
 8006cbc:	4638      	mov	r0, r7
 8006cbe:	603b      	str	r3, [r7, #0]
 8006cc0:	f000 f9d4 	bl	800706c <__malloc_unlock>
 8006cc4:	e7a1      	b.n	8006c0a <_malloc_r+0x22>
 8006cc6:	6025      	str	r5, [r4, #0]
 8006cc8:	e7de      	b.n	8006c88 <_malloc_r+0xa0>
 8006cca:	bf00      	nop
 8006ccc:	2000031c 	.word	0x2000031c

08006cd0 <__ssputs_r>:
 8006cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cd4:	688e      	ldr	r6, [r1, #8]
 8006cd6:	4682      	mov	sl, r0
 8006cd8:	429e      	cmp	r6, r3
 8006cda:	460c      	mov	r4, r1
 8006cdc:	4690      	mov	r8, r2
 8006cde:	461f      	mov	r7, r3
 8006ce0:	d838      	bhi.n	8006d54 <__ssputs_r+0x84>
 8006ce2:	898a      	ldrh	r2, [r1, #12]
 8006ce4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ce8:	d032      	beq.n	8006d50 <__ssputs_r+0x80>
 8006cea:	6825      	ldr	r5, [r4, #0]
 8006cec:	6909      	ldr	r1, [r1, #16]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	eba5 0901 	sub.w	r9, r5, r1
 8006cf4:	6965      	ldr	r5, [r4, #20]
 8006cf6:	444b      	add	r3, r9
 8006cf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006cfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d00:	106d      	asrs	r5, r5, #1
 8006d02:	429d      	cmp	r5, r3
 8006d04:	bf38      	it	cc
 8006d06:	461d      	movcc	r5, r3
 8006d08:	0553      	lsls	r3, r2, #21
 8006d0a:	d531      	bpl.n	8006d70 <__ssputs_r+0xa0>
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	f7ff ff6b 	bl	8006be8 <_malloc_r>
 8006d12:	4606      	mov	r6, r0
 8006d14:	b950      	cbnz	r0, 8006d2c <__ssputs_r+0x5c>
 8006d16:	230c      	movs	r3, #12
 8006d18:	f04f 30ff 	mov.w	r0, #4294967295
 8006d1c:	f8ca 3000 	str.w	r3, [sl]
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d26:	81a3      	strh	r3, [r4, #12]
 8006d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d2c:	464a      	mov	r2, r9
 8006d2e:	6921      	ldr	r1, [r4, #16]
 8006d30:	f7ff fb4e 	bl	80063d0 <memcpy>
 8006d34:	89a3      	ldrh	r3, [r4, #12]
 8006d36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d3e:	81a3      	strh	r3, [r4, #12]
 8006d40:	6126      	str	r6, [r4, #16]
 8006d42:	444e      	add	r6, r9
 8006d44:	6026      	str	r6, [r4, #0]
 8006d46:	463e      	mov	r6, r7
 8006d48:	6165      	str	r5, [r4, #20]
 8006d4a:	eba5 0509 	sub.w	r5, r5, r9
 8006d4e:	60a5      	str	r5, [r4, #8]
 8006d50:	42be      	cmp	r6, r7
 8006d52:	d900      	bls.n	8006d56 <__ssputs_r+0x86>
 8006d54:	463e      	mov	r6, r7
 8006d56:	4632      	mov	r2, r6
 8006d58:	4641      	mov	r1, r8
 8006d5a:	6820      	ldr	r0, [r4, #0]
 8006d5c:	f000 f966 	bl	800702c <memmove>
 8006d60:	68a3      	ldr	r3, [r4, #8]
 8006d62:	2000      	movs	r0, #0
 8006d64:	1b9b      	subs	r3, r3, r6
 8006d66:	60a3      	str	r3, [r4, #8]
 8006d68:	6823      	ldr	r3, [r4, #0]
 8006d6a:	4433      	add	r3, r6
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	e7db      	b.n	8006d28 <__ssputs_r+0x58>
 8006d70:	462a      	mov	r2, r5
 8006d72:	f000 f981 	bl	8007078 <_realloc_r>
 8006d76:	4606      	mov	r6, r0
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	d1e1      	bne.n	8006d40 <__ssputs_r+0x70>
 8006d7c:	4650      	mov	r0, sl
 8006d7e:	6921      	ldr	r1, [r4, #16]
 8006d80:	f7ff feca 	bl	8006b18 <_free_r>
 8006d84:	e7c7      	b.n	8006d16 <__ssputs_r+0x46>
	...

08006d88 <_svfiprintf_r>:
 8006d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d8c:	4698      	mov	r8, r3
 8006d8e:	898b      	ldrh	r3, [r1, #12]
 8006d90:	4607      	mov	r7, r0
 8006d92:	061b      	lsls	r3, r3, #24
 8006d94:	460d      	mov	r5, r1
 8006d96:	4614      	mov	r4, r2
 8006d98:	b09d      	sub	sp, #116	; 0x74
 8006d9a:	d50e      	bpl.n	8006dba <_svfiprintf_r+0x32>
 8006d9c:	690b      	ldr	r3, [r1, #16]
 8006d9e:	b963      	cbnz	r3, 8006dba <_svfiprintf_r+0x32>
 8006da0:	2140      	movs	r1, #64	; 0x40
 8006da2:	f7ff ff21 	bl	8006be8 <_malloc_r>
 8006da6:	6028      	str	r0, [r5, #0]
 8006da8:	6128      	str	r0, [r5, #16]
 8006daa:	b920      	cbnz	r0, 8006db6 <_svfiprintf_r+0x2e>
 8006dac:	230c      	movs	r3, #12
 8006dae:	603b      	str	r3, [r7, #0]
 8006db0:	f04f 30ff 	mov.w	r0, #4294967295
 8006db4:	e0d1      	b.n	8006f5a <_svfiprintf_r+0x1d2>
 8006db6:	2340      	movs	r3, #64	; 0x40
 8006db8:	616b      	str	r3, [r5, #20]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8006dbe:	2320      	movs	r3, #32
 8006dc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dc4:	2330      	movs	r3, #48	; 0x30
 8006dc6:	f04f 0901 	mov.w	r9, #1
 8006dca:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006f74 <_svfiprintf_r+0x1ec>
 8006dd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dd6:	4623      	mov	r3, r4
 8006dd8:	469a      	mov	sl, r3
 8006dda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dde:	b10a      	cbz	r2, 8006de4 <_svfiprintf_r+0x5c>
 8006de0:	2a25      	cmp	r2, #37	; 0x25
 8006de2:	d1f9      	bne.n	8006dd8 <_svfiprintf_r+0x50>
 8006de4:	ebba 0b04 	subs.w	fp, sl, r4
 8006de8:	d00b      	beq.n	8006e02 <_svfiprintf_r+0x7a>
 8006dea:	465b      	mov	r3, fp
 8006dec:	4622      	mov	r2, r4
 8006dee:	4629      	mov	r1, r5
 8006df0:	4638      	mov	r0, r7
 8006df2:	f7ff ff6d 	bl	8006cd0 <__ssputs_r>
 8006df6:	3001      	adds	r0, #1
 8006df8:	f000 80aa 	beq.w	8006f50 <_svfiprintf_r+0x1c8>
 8006dfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dfe:	445a      	add	r2, fp
 8006e00:	9209      	str	r2, [sp, #36]	; 0x24
 8006e02:	f89a 3000 	ldrb.w	r3, [sl]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 80a2 	beq.w	8006f50 <_svfiprintf_r+0x1c8>
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e16:	f10a 0a01 	add.w	sl, sl, #1
 8006e1a:	9304      	str	r3, [sp, #16]
 8006e1c:	9307      	str	r3, [sp, #28]
 8006e1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e22:	931a      	str	r3, [sp, #104]	; 0x68
 8006e24:	4654      	mov	r4, sl
 8006e26:	2205      	movs	r2, #5
 8006e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e2c:	4851      	ldr	r0, [pc, #324]	; (8006f74 <_svfiprintf_r+0x1ec>)
 8006e2e:	f7ff fac1 	bl	80063b4 <memchr>
 8006e32:	9a04      	ldr	r2, [sp, #16]
 8006e34:	b9d8      	cbnz	r0, 8006e6e <_svfiprintf_r+0xe6>
 8006e36:	06d0      	lsls	r0, r2, #27
 8006e38:	bf44      	itt	mi
 8006e3a:	2320      	movmi	r3, #32
 8006e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e40:	0711      	lsls	r1, r2, #28
 8006e42:	bf44      	itt	mi
 8006e44:	232b      	movmi	r3, #43	; 0x2b
 8006e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e4e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e50:	d015      	beq.n	8006e7e <_svfiprintf_r+0xf6>
 8006e52:	4654      	mov	r4, sl
 8006e54:	2000      	movs	r0, #0
 8006e56:	f04f 0c0a 	mov.w	ip, #10
 8006e5a:	9a07      	ldr	r2, [sp, #28]
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e62:	3b30      	subs	r3, #48	; 0x30
 8006e64:	2b09      	cmp	r3, #9
 8006e66:	d94e      	bls.n	8006f06 <_svfiprintf_r+0x17e>
 8006e68:	b1b0      	cbz	r0, 8006e98 <_svfiprintf_r+0x110>
 8006e6a:	9207      	str	r2, [sp, #28]
 8006e6c:	e014      	b.n	8006e98 <_svfiprintf_r+0x110>
 8006e6e:	eba0 0308 	sub.w	r3, r0, r8
 8006e72:	fa09 f303 	lsl.w	r3, r9, r3
 8006e76:	4313      	orrs	r3, r2
 8006e78:	46a2      	mov	sl, r4
 8006e7a:	9304      	str	r3, [sp, #16]
 8006e7c:	e7d2      	b.n	8006e24 <_svfiprintf_r+0x9c>
 8006e7e:	9b03      	ldr	r3, [sp, #12]
 8006e80:	1d19      	adds	r1, r3, #4
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	9103      	str	r1, [sp, #12]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	bfbb      	ittet	lt
 8006e8a:	425b      	neglt	r3, r3
 8006e8c:	f042 0202 	orrlt.w	r2, r2, #2
 8006e90:	9307      	strge	r3, [sp, #28]
 8006e92:	9307      	strlt	r3, [sp, #28]
 8006e94:	bfb8      	it	lt
 8006e96:	9204      	strlt	r2, [sp, #16]
 8006e98:	7823      	ldrb	r3, [r4, #0]
 8006e9a:	2b2e      	cmp	r3, #46	; 0x2e
 8006e9c:	d10c      	bne.n	8006eb8 <_svfiprintf_r+0x130>
 8006e9e:	7863      	ldrb	r3, [r4, #1]
 8006ea0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ea2:	d135      	bne.n	8006f10 <_svfiprintf_r+0x188>
 8006ea4:	9b03      	ldr	r3, [sp, #12]
 8006ea6:	3402      	adds	r4, #2
 8006ea8:	1d1a      	adds	r2, r3, #4
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	9203      	str	r2, [sp, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	bfb8      	it	lt
 8006eb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006eb6:	9305      	str	r3, [sp, #20]
 8006eb8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006f78 <_svfiprintf_r+0x1f0>
 8006ebc:	2203      	movs	r2, #3
 8006ebe:	4650      	mov	r0, sl
 8006ec0:	7821      	ldrb	r1, [r4, #0]
 8006ec2:	f7ff fa77 	bl	80063b4 <memchr>
 8006ec6:	b140      	cbz	r0, 8006eda <_svfiprintf_r+0x152>
 8006ec8:	2340      	movs	r3, #64	; 0x40
 8006eca:	eba0 000a 	sub.w	r0, r0, sl
 8006ece:	fa03 f000 	lsl.w	r0, r3, r0
 8006ed2:	9b04      	ldr	r3, [sp, #16]
 8006ed4:	3401      	adds	r4, #1
 8006ed6:	4303      	orrs	r3, r0
 8006ed8:	9304      	str	r3, [sp, #16]
 8006eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ede:	2206      	movs	r2, #6
 8006ee0:	4826      	ldr	r0, [pc, #152]	; (8006f7c <_svfiprintf_r+0x1f4>)
 8006ee2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ee6:	f7ff fa65 	bl	80063b4 <memchr>
 8006eea:	2800      	cmp	r0, #0
 8006eec:	d038      	beq.n	8006f60 <_svfiprintf_r+0x1d8>
 8006eee:	4b24      	ldr	r3, [pc, #144]	; (8006f80 <_svfiprintf_r+0x1f8>)
 8006ef0:	bb1b      	cbnz	r3, 8006f3a <_svfiprintf_r+0x1b2>
 8006ef2:	9b03      	ldr	r3, [sp, #12]
 8006ef4:	3307      	adds	r3, #7
 8006ef6:	f023 0307 	bic.w	r3, r3, #7
 8006efa:	3308      	adds	r3, #8
 8006efc:	9303      	str	r3, [sp, #12]
 8006efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f00:	4433      	add	r3, r6
 8006f02:	9309      	str	r3, [sp, #36]	; 0x24
 8006f04:	e767      	b.n	8006dd6 <_svfiprintf_r+0x4e>
 8006f06:	460c      	mov	r4, r1
 8006f08:	2001      	movs	r0, #1
 8006f0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f0e:	e7a5      	b.n	8006e5c <_svfiprintf_r+0xd4>
 8006f10:	2300      	movs	r3, #0
 8006f12:	f04f 0c0a 	mov.w	ip, #10
 8006f16:	4619      	mov	r1, r3
 8006f18:	3401      	adds	r4, #1
 8006f1a:	9305      	str	r3, [sp, #20]
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f22:	3a30      	subs	r2, #48	; 0x30
 8006f24:	2a09      	cmp	r2, #9
 8006f26:	d903      	bls.n	8006f30 <_svfiprintf_r+0x1a8>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d0c5      	beq.n	8006eb8 <_svfiprintf_r+0x130>
 8006f2c:	9105      	str	r1, [sp, #20]
 8006f2e:	e7c3      	b.n	8006eb8 <_svfiprintf_r+0x130>
 8006f30:	4604      	mov	r4, r0
 8006f32:	2301      	movs	r3, #1
 8006f34:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f38:	e7f0      	b.n	8006f1c <_svfiprintf_r+0x194>
 8006f3a:	ab03      	add	r3, sp, #12
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	462a      	mov	r2, r5
 8006f40:	4638      	mov	r0, r7
 8006f42:	4b10      	ldr	r3, [pc, #64]	; (8006f84 <_svfiprintf_r+0x1fc>)
 8006f44:	a904      	add	r1, sp, #16
 8006f46:	f7fd ffcb 	bl	8004ee0 <_printf_float>
 8006f4a:	1c42      	adds	r2, r0, #1
 8006f4c:	4606      	mov	r6, r0
 8006f4e:	d1d6      	bne.n	8006efe <_svfiprintf_r+0x176>
 8006f50:	89ab      	ldrh	r3, [r5, #12]
 8006f52:	065b      	lsls	r3, r3, #25
 8006f54:	f53f af2c 	bmi.w	8006db0 <_svfiprintf_r+0x28>
 8006f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f5a:	b01d      	add	sp, #116	; 0x74
 8006f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f60:	ab03      	add	r3, sp, #12
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	462a      	mov	r2, r5
 8006f66:	4638      	mov	r0, r7
 8006f68:	4b06      	ldr	r3, [pc, #24]	; (8006f84 <_svfiprintf_r+0x1fc>)
 8006f6a:	a904      	add	r1, sp, #16
 8006f6c:	f7fe fa54 	bl	8005418 <_printf_i>
 8006f70:	e7eb      	b.n	8006f4a <_svfiprintf_r+0x1c2>
 8006f72:	bf00      	nop
 8006f74:	08007e4c 	.word	0x08007e4c
 8006f78:	08007e52 	.word	0x08007e52
 8006f7c:	08007e56 	.word	0x08007e56
 8006f80:	08004ee1 	.word	0x08004ee1
 8006f84:	08006cd1 	.word	0x08006cd1

08006f88 <_sbrk_r>:
 8006f88:	b538      	push	{r3, r4, r5, lr}
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	4d05      	ldr	r5, [pc, #20]	; (8006fa4 <_sbrk_r+0x1c>)
 8006f8e:	4604      	mov	r4, r0
 8006f90:	4608      	mov	r0, r1
 8006f92:	602b      	str	r3, [r5, #0]
 8006f94:	f7fa fe6e 	bl	8001c74 <_sbrk>
 8006f98:	1c43      	adds	r3, r0, #1
 8006f9a:	d102      	bne.n	8006fa2 <_sbrk_r+0x1a>
 8006f9c:	682b      	ldr	r3, [r5, #0]
 8006f9e:	b103      	cbz	r3, 8006fa2 <_sbrk_r+0x1a>
 8006fa0:	6023      	str	r3, [r4, #0]
 8006fa2:	bd38      	pop	{r3, r4, r5, pc}
 8006fa4:	20000324 	.word	0x20000324

08006fa8 <__assert_func>:
 8006fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006faa:	4614      	mov	r4, r2
 8006fac:	461a      	mov	r2, r3
 8006fae:	4b09      	ldr	r3, [pc, #36]	; (8006fd4 <__assert_func+0x2c>)
 8006fb0:	4605      	mov	r5, r0
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68d8      	ldr	r0, [r3, #12]
 8006fb6:	b14c      	cbz	r4, 8006fcc <__assert_func+0x24>
 8006fb8:	4b07      	ldr	r3, [pc, #28]	; (8006fd8 <__assert_func+0x30>)
 8006fba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fbe:	9100      	str	r1, [sp, #0]
 8006fc0:	462b      	mov	r3, r5
 8006fc2:	4906      	ldr	r1, [pc, #24]	; (8006fdc <__assert_func+0x34>)
 8006fc4:	f000 f80e 	bl	8006fe4 <fiprintf>
 8006fc8:	f000 faaa 	bl	8007520 <abort>
 8006fcc:	4b04      	ldr	r3, [pc, #16]	; (8006fe0 <__assert_func+0x38>)
 8006fce:	461c      	mov	r4, r3
 8006fd0:	e7f3      	b.n	8006fba <__assert_func+0x12>
 8006fd2:	bf00      	nop
 8006fd4:	20000018 	.word	0x20000018
 8006fd8:	08007e5d 	.word	0x08007e5d
 8006fdc:	08007e6a 	.word	0x08007e6a
 8006fe0:	08007e98 	.word	0x08007e98

08006fe4 <fiprintf>:
 8006fe4:	b40e      	push	{r1, r2, r3}
 8006fe6:	b503      	push	{r0, r1, lr}
 8006fe8:	4601      	mov	r1, r0
 8006fea:	ab03      	add	r3, sp, #12
 8006fec:	4805      	ldr	r0, [pc, #20]	; (8007004 <fiprintf+0x20>)
 8006fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ff2:	6800      	ldr	r0, [r0, #0]
 8006ff4:	9301      	str	r3, [sp, #4]
 8006ff6:	f000 f895 	bl	8007124 <_vfiprintf_r>
 8006ffa:	b002      	add	sp, #8
 8006ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007000:	b003      	add	sp, #12
 8007002:	4770      	bx	lr
 8007004:	20000018 	.word	0x20000018

08007008 <__ascii_mbtowc>:
 8007008:	b082      	sub	sp, #8
 800700a:	b901      	cbnz	r1, 800700e <__ascii_mbtowc+0x6>
 800700c:	a901      	add	r1, sp, #4
 800700e:	b142      	cbz	r2, 8007022 <__ascii_mbtowc+0x1a>
 8007010:	b14b      	cbz	r3, 8007026 <__ascii_mbtowc+0x1e>
 8007012:	7813      	ldrb	r3, [r2, #0]
 8007014:	600b      	str	r3, [r1, #0]
 8007016:	7812      	ldrb	r2, [r2, #0]
 8007018:	1e10      	subs	r0, r2, #0
 800701a:	bf18      	it	ne
 800701c:	2001      	movne	r0, #1
 800701e:	b002      	add	sp, #8
 8007020:	4770      	bx	lr
 8007022:	4610      	mov	r0, r2
 8007024:	e7fb      	b.n	800701e <__ascii_mbtowc+0x16>
 8007026:	f06f 0001 	mvn.w	r0, #1
 800702a:	e7f8      	b.n	800701e <__ascii_mbtowc+0x16>

0800702c <memmove>:
 800702c:	4288      	cmp	r0, r1
 800702e:	b510      	push	{r4, lr}
 8007030:	eb01 0402 	add.w	r4, r1, r2
 8007034:	d902      	bls.n	800703c <memmove+0x10>
 8007036:	4284      	cmp	r4, r0
 8007038:	4623      	mov	r3, r4
 800703a:	d807      	bhi.n	800704c <memmove+0x20>
 800703c:	1e43      	subs	r3, r0, #1
 800703e:	42a1      	cmp	r1, r4
 8007040:	d008      	beq.n	8007054 <memmove+0x28>
 8007042:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007046:	f803 2f01 	strb.w	r2, [r3, #1]!
 800704a:	e7f8      	b.n	800703e <memmove+0x12>
 800704c:	4601      	mov	r1, r0
 800704e:	4402      	add	r2, r0
 8007050:	428a      	cmp	r2, r1
 8007052:	d100      	bne.n	8007056 <memmove+0x2a>
 8007054:	bd10      	pop	{r4, pc}
 8007056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800705a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800705e:	e7f7      	b.n	8007050 <memmove+0x24>

08007060 <__malloc_lock>:
 8007060:	4801      	ldr	r0, [pc, #4]	; (8007068 <__malloc_lock+0x8>)
 8007062:	f000 bc19 	b.w	8007898 <__retarget_lock_acquire_recursive>
 8007066:	bf00      	nop
 8007068:	20000328 	.word	0x20000328

0800706c <__malloc_unlock>:
 800706c:	4801      	ldr	r0, [pc, #4]	; (8007074 <__malloc_unlock+0x8>)
 800706e:	f000 bc14 	b.w	800789a <__retarget_lock_release_recursive>
 8007072:	bf00      	nop
 8007074:	20000328 	.word	0x20000328

08007078 <_realloc_r>:
 8007078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800707c:	4680      	mov	r8, r0
 800707e:	4614      	mov	r4, r2
 8007080:	460e      	mov	r6, r1
 8007082:	b921      	cbnz	r1, 800708e <_realloc_r+0x16>
 8007084:	4611      	mov	r1, r2
 8007086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800708a:	f7ff bdad 	b.w	8006be8 <_malloc_r>
 800708e:	b92a      	cbnz	r2, 800709c <_realloc_r+0x24>
 8007090:	f7ff fd42 	bl	8006b18 <_free_r>
 8007094:	4625      	mov	r5, r4
 8007096:	4628      	mov	r0, r5
 8007098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800709c:	f000 fc64 	bl	8007968 <_malloc_usable_size_r>
 80070a0:	4284      	cmp	r4, r0
 80070a2:	4607      	mov	r7, r0
 80070a4:	d802      	bhi.n	80070ac <_realloc_r+0x34>
 80070a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070aa:	d812      	bhi.n	80070d2 <_realloc_r+0x5a>
 80070ac:	4621      	mov	r1, r4
 80070ae:	4640      	mov	r0, r8
 80070b0:	f7ff fd9a 	bl	8006be8 <_malloc_r>
 80070b4:	4605      	mov	r5, r0
 80070b6:	2800      	cmp	r0, #0
 80070b8:	d0ed      	beq.n	8007096 <_realloc_r+0x1e>
 80070ba:	42bc      	cmp	r4, r7
 80070bc:	4622      	mov	r2, r4
 80070be:	4631      	mov	r1, r6
 80070c0:	bf28      	it	cs
 80070c2:	463a      	movcs	r2, r7
 80070c4:	f7ff f984 	bl	80063d0 <memcpy>
 80070c8:	4631      	mov	r1, r6
 80070ca:	4640      	mov	r0, r8
 80070cc:	f7ff fd24 	bl	8006b18 <_free_r>
 80070d0:	e7e1      	b.n	8007096 <_realloc_r+0x1e>
 80070d2:	4635      	mov	r5, r6
 80070d4:	e7df      	b.n	8007096 <_realloc_r+0x1e>

080070d6 <__sfputc_r>:
 80070d6:	6893      	ldr	r3, [r2, #8]
 80070d8:	b410      	push	{r4}
 80070da:	3b01      	subs	r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	6093      	str	r3, [r2, #8]
 80070e0:	da07      	bge.n	80070f2 <__sfputc_r+0x1c>
 80070e2:	6994      	ldr	r4, [r2, #24]
 80070e4:	42a3      	cmp	r3, r4
 80070e6:	db01      	blt.n	80070ec <__sfputc_r+0x16>
 80070e8:	290a      	cmp	r1, #10
 80070ea:	d102      	bne.n	80070f2 <__sfputc_r+0x1c>
 80070ec:	bc10      	pop	{r4}
 80070ee:	f000 b949 	b.w	8007384 <__swbuf_r>
 80070f2:	6813      	ldr	r3, [r2, #0]
 80070f4:	1c58      	adds	r0, r3, #1
 80070f6:	6010      	str	r0, [r2, #0]
 80070f8:	7019      	strb	r1, [r3, #0]
 80070fa:	4608      	mov	r0, r1
 80070fc:	bc10      	pop	{r4}
 80070fe:	4770      	bx	lr

08007100 <__sfputs_r>:
 8007100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007102:	4606      	mov	r6, r0
 8007104:	460f      	mov	r7, r1
 8007106:	4614      	mov	r4, r2
 8007108:	18d5      	adds	r5, r2, r3
 800710a:	42ac      	cmp	r4, r5
 800710c:	d101      	bne.n	8007112 <__sfputs_r+0x12>
 800710e:	2000      	movs	r0, #0
 8007110:	e007      	b.n	8007122 <__sfputs_r+0x22>
 8007112:	463a      	mov	r2, r7
 8007114:	4630      	mov	r0, r6
 8007116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800711a:	f7ff ffdc 	bl	80070d6 <__sfputc_r>
 800711e:	1c43      	adds	r3, r0, #1
 8007120:	d1f3      	bne.n	800710a <__sfputs_r+0xa>
 8007122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007124 <_vfiprintf_r>:
 8007124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007128:	460d      	mov	r5, r1
 800712a:	4614      	mov	r4, r2
 800712c:	4698      	mov	r8, r3
 800712e:	4606      	mov	r6, r0
 8007130:	b09d      	sub	sp, #116	; 0x74
 8007132:	b118      	cbz	r0, 800713c <_vfiprintf_r+0x18>
 8007134:	6983      	ldr	r3, [r0, #24]
 8007136:	b90b      	cbnz	r3, 800713c <_vfiprintf_r+0x18>
 8007138:	f000 fb10 	bl	800775c <__sinit>
 800713c:	4b89      	ldr	r3, [pc, #548]	; (8007364 <_vfiprintf_r+0x240>)
 800713e:	429d      	cmp	r5, r3
 8007140:	d11b      	bne.n	800717a <_vfiprintf_r+0x56>
 8007142:	6875      	ldr	r5, [r6, #4]
 8007144:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007146:	07d9      	lsls	r1, r3, #31
 8007148:	d405      	bmi.n	8007156 <_vfiprintf_r+0x32>
 800714a:	89ab      	ldrh	r3, [r5, #12]
 800714c:	059a      	lsls	r2, r3, #22
 800714e:	d402      	bmi.n	8007156 <_vfiprintf_r+0x32>
 8007150:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007152:	f000 fba1 	bl	8007898 <__retarget_lock_acquire_recursive>
 8007156:	89ab      	ldrh	r3, [r5, #12]
 8007158:	071b      	lsls	r3, r3, #28
 800715a:	d501      	bpl.n	8007160 <_vfiprintf_r+0x3c>
 800715c:	692b      	ldr	r3, [r5, #16]
 800715e:	b9eb      	cbnz	r3, 800719c <_vfiprintf_r+0x78>
 8007160:	4629      	mov	r1, r5
 8007162:	4630      	mov	r0, r6
 8007164:	f000 f96e 	bl	8007444 <__swsetup_r>
 8007168:	b1c0      	cbz	r0, 800719c <_vfiprintf_r+0x78>
 800716a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800716c:	07dc      	lsls	r4, r3, #31
 800716e:	d50e      	bpl.n	800718e <_vfiprintf_r+0x6a>
 8007170:	f04f 30ff 	mov.w	r0, #4294967295
 8007174:	b01d      	add	sp, #116	; 0x74
 8007176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800717a:	4b7b      	ldr	r3, [pc, #492]	; (8007368 <_vfiprintf_r+0x244>)
 800717c:	429d      	cmp	r5, r3
 800717e:	d101      	bne.n	8007184 <_vfiprintf_r+0x60>
 8007180:	68b5      	ldr	r5, [r6, #8]
 8007182:	e7df      	b.n	8007144 <_vfiprintf_r+0x20>
 8007184:	4b79      	ldr	r3, [pc, #484]	; (800736c <_vfiprintf_r+0x248>)
 8007186:	429d      	cmp	r5, r3
 8007188:	bf08      	it	eq
 800718a:	68f5      	ldreq	r5, [r6, #12]
 800718c:	e7da      	b.n	8007144 <_vfiprintf_r+0x20>
 800718e:	89ab      	ldrh	r3, [r5, #12]
 8007190:	0598      	lsls	r0, r3, #22
 8007192:	d4ed      	bmi.n	8007170 <_vfiprintf_r+0x4c>
 8007194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007196:	f000 fb80 	bl	800789a <__retarget_lock_release_recursive>
 800719a:	e7e9      	b.n	8007170 <_vfiprintf_r+0x4c>
 800719c:	2300      	movs	r3, #0
 800719e:	9309      	str	r3, [sp, #36]	; 0x24
 80071a0:	2320      	movs	r3, #32
 80071a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071a6:	2330      	movs	r3, #48	; 0x30
 80071a8:	f04f 0901 	mov.w	r9, #1
 80071ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80071b0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007370 <_vfiprintf_r+0x24c>
 80071b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071b8:	4623      	mov	r3, r4
 80071ba:	469a      	mov	sl, r3
 80071bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071c0:	b10a      	cbz	r2, 80071c6 <_vfiprintf_r+0xa2>
 80071c2:	2a25      	cmp	r2, #37	; 0x25
 80071c4:	d1f9      	bne.n	80071ba <_vfiprintf_r+0x96>
 80071c6:	ebba 0b04 	subs.w	fp, sl, r4
 80071ca:	d00b      	beq.n	80071e4 <_vfiprintf_r+0xc0>
 80071cc:	465b      	mov	r3, fp
 80071ce:	4622      	mov	r2, r4
 80071d0:	4629      	mov	r1, r5
 80071d2:	4630      	mov	r0, r6
 80071d4:	f7ff ff94 	bl	8007100 <__sfputs_r>
 80071d8:	3001      	adds	r0, #1
 80071da:	f000 80aa 	beq.w	8007332 <_vfiprintf_r+0x20e>
 80071de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071e0:	445a      	add	r2, fp
 80071e2:	9209      	str	r2, [sp, #36]	; 0x24
 80071e4:	f89a 3000 	ldrb.w	r3, [sl]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 80a2 	beq.w	8007332 <_vfiprintf_r+0x20e>
 80071ee:	2300      	movs	r3, #0
 80071f0:	f04f 32ff 	mov.w	r2, #4294967295
 80071f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071f8:	f10a 0a01 	add.w	sl, sl, #1
 80071fc:	9304      	str	r3, [sp, #16]
 80071fe:	9307      	str	r3, [sp, #28]
 8007200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007204:	931a      	str	r3, [sp, #104]	; 0x68
 8007206:	4654      	mov	r4, sl
 8007208:	2205      	movs	r2, #5
 800720a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800720e:	4858      	ldr	r0, [pc, #352]	; (8007370 <_vfiprintf_r+0x24c>)
 8007210:	f7ff f8d0 	bl	80063b4 <memchr>
 8007214:	9a04      	ldr	r2, [sp, #16]
 8007216:	b9d8      	cbnz	r0, 8007250 <_vfiprintf_r+0x12c>
 8007218:	06d1      	lsls	r1, r2, #27
 800721a:	bf44      	itt	mi
 800721c:	2320      	movmi	r3, #32
 800721e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007222:	0713      	lsls	r3, r2, #28
 8007224:	bf44      	itt	mi
 8007226:	232b      	movmi	r3, #43	; 0x2b
 8007228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800722c:	f89a 3000 	ldrb.w	r3, [sl]
 8007230:	2b2a      	cmp	r3, #42	; 0x2a
 8007232:	d015      	beq.n	8007260 <_vfiprintf_r+0x13c>
 8007234:	4654      	mov	r4, sl
 8007236:	2000      	movs	r0, #0
 8007238:	f04f 0c0a 	mov.w	ip, #10
 800723c:	9a07      	ldr	r2, [sp, #28]
 800723e:	4621      	mov	r1, r4
 8007240:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007244:	3b30      	subs	r3, #48	; 0x30
 8007246:	2b09      	cmp	r3, #9
 8007248:	d94e      	bls.n	80072e8 <_vfiprintf_r+0x1c4>
 800724a:	b1b0      	cbz	r0, 800727a <_vfiprintf_r+0x156>
 800724c:	9207      	str	r2, [sp, #28]
 800724e:	e014      	b.n	800727a <_vfiprintf_r+0x156>
 8007250:	eba0 0308 	sub.w	r3, r0, r8
 8007254:	fa09 f303 	lsl.w	r3, r9, r3
 8007258:	4313      	orrs	r3, r2
 800725a:	46a2      	mov	sl, r4
 800725c:	9304      	str	r3, [sp, #16]
 800725e:	e7d2      	b.n	8007206 <_vfiprintf_r+0xe2>
 8007260:	9b03      	ldr	r3, [sp, #12]
 8007262:	1d19      	adds	r1, r3, #4
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	9103      	str	r1, [sp, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	bfbb      	ittet	lt
 800726c:	425b      	neglt	r3, r3
 800726e:	f042 0202 	orrlt.w	r2, r2, #2
 8007272:	9307      	strge	r3, [sp, #28]
 8007274:	9307      	strlt	r3, [sp, #28]
 8007276:	bfb8      	it	lt
 8007278:	9204      	strlt	r2, [sp, #16]
 800727a:	7823      	ldrb	r3, [r4, #0]
 800727c:	2b2e      	cmp	r3, #46	; 0x2e
 800727e:	d10c      	bne.n	800729a <_vfiprintf_r+0x176>
 8007280:	7863      	ldrb	r3, [r4, #1]
 8007282:	2b2a      	cmp	r3, #42	; 0x2a
 8007284:	d135      	bne.n	80072f2 <_vfiprintf_r+0x1ce>
 8007286:	9b03      	ldr	r3, [sp, #12]
 8007288:	3402      	adds	r4, #2
 800728a:	1d1a      	adds	r2, r3, #4
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	9203      	str	r2, [sp, #12]
 8007290:	2b00      	cmp	r3, #0
 8007292:	bfb8      	it	lt
 8007294:	f04f 33ff 	movlt.w	r3, #4294967295
 8007298:	9305      	str	r3, [sp, #20]
 800729a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007374 <_vfiprintf_r+0x250>
 800729e:	2203      	movs	r2, #3
 80072a0:	4650      	mov	r0, sl
 80072a2:	7821      	ldrb	r1, [r4, #0]
 80072a4:	f7ff f886 	bl	80063b4 <memchr>
 80072a8:	b140      	cbz	r0, 80072bc <_vfiprintf_r+0x198>
 80072aa:	2340      	movs	r3, #64	; 0x40
 80072ac:	eba0 000a 	sub.w	r0, r0, sl
 80072b0:	fa03 f000 	lsl.w	r0, r3, r0
 80072b4:	9b04      	ldr	r3, [sp, #16]
 80072b6:	3401      	adds	r4, #1
 80072b8:	4303      	orrs	r3, r0
 80072ba:	9304      	str	r3, [sp, #16]
 80072bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072c0:	2206      	movs	r2, #6
 80072c2:	482d      	ldr	r0, [pc, #180]	; (8007378 <_vfiprintf_r+0x254>)
 80072c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072c8:	f7ff f874 	bl	80063b4 <memchr>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	d03f      	beq.n	8007350 <_vfiprintf_r+0x22c>
 80072d0:	4b2a      	ldr	r3, [pc, #168]	; (800737c <_vfiprintf_r+0x258>)
 80072d2:	bb1b      	cbnz	r3, 800731c <_vfiprintf_r+0x1f8>
 80072d4:	9b03      	ldr	r3, [sp, #12]
 80072d6:	3307      	adds	r3, #7
 80072d8:	f023 0307 	bic.w	r3, r3, #7
 80072dc:	3308      	adds	r3, #8
 80072de:	9303      	str	r3, [sp, #12]
 80072e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072e2:	443b      	add	r3, r7
 80072e4:	9309      	str	r3, [sp, #36]	; 0x24
 80072e6:	e767      	b.n	80071b8 <_vfiprintf_r+0x94>
 80072e8:	460c      	mov	r4, r1
 80072ea:	2001      	movs	r0, #1
 80072ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80072f0:	e7a5      	b.n	800723e <_vfiprintf_r+0x11a>
 80072f2:	2300      	movs	r3, #0
 80072f4:	f04f 0c0a 	mov.w	ip, #10
 80072f8:	4619      	mov	r1, r3
 80072fa:	3401      	adds	r4, #1
 80072fc:	9305      	str	r3, [sp, #20]
 80072fe:	4620      	mov	r0, r4
 8007300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007304:	3a30      	subs	r2, #48	; 0x30
 8007306:	2a09      	cmp	r2, #9
 8007308:	d903      	bls.n	8007312 <_vfiprintf_r+0x1ee>
 800730a:	2b00      	cmp	r3, #0
 800730c:	d0c5      	beq.n	800729a <_vfiprintf_r+0x176>
 800730e:	9105      	str	r1, [sp, #20]
 8007310:	e7c3      	b.n	800729a <_vfiprintf_r+0x176>
 8007312:	4604      	mov	r4, r0
 8007314:	2301      	movs	r3, #1
 8007316:	fb0c 2101 	mla	r1, ip, r1, r2
 800731a:	e7f0      	b.n	80072fe <_vfiprintf_r+0x1da>
 800731c:	ab03      	add	r3, sp, #12
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	462a      	mov	r2, r5
 8007322:	4630      	mov	r0, r6
 8007324:	4b16      	ldr	r3, [pc, #88]	; (8007380 <_vfiprintf_r+0x25c>)
 8007326:	a904      	add	r1, sp, #16
 8007328:	f7fd fdda 	bl	8004ee0 <_printf_float>
 800732c:	4607      	mov	r7, r0
 800732e:	1c78      	adds	r0, r7, #1
 8007330:	d1d6      	bne.n	80072e0 <_vfiprintf_r+0x1bc>
 8007332:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007334:	07d9      	lsls	r1, r3, #31
 8007336:	d405      	bmi.n	8007344 <_vfiprintf_r+0x220>
 8007338:	89ab      	ldrh	r3, [r5, #12]
 800733a:	059a      	lsls	r2, r3, #22
 800733c:	d402      	bmi.n	8007344 <_vfiprintf_r+0x220>
 800733e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007340:	f000 faab 	bl	800789a <__retarget_lock_release_recursive>
 8007344:	89ab      	ldrh	r3, [r5, #12]
 8007346:	065b      	lsls	r3, r3, #25
 8007348:	f53f af12 	bmi.w	8007170 <_vfiprintf_r+0x4c>
 800734c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800734e:	e711      	b.n	8007174 <_vfiprintf_r+0x50>
 8007350:	ab03      	add	r3, sp, #12
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	462a      	mov	r2, r5
 8007356:	4630      	mov	r0, r6
 8007358:	4b09      	ldr	r3, [pc, #36]	; (8007380 <_vfiprintf_r+0x25c>)
 800735a:	a904      	add	r1, sp, #16
 800735c:	f7fe f85c 	bl	8005418 <_printf_i>
 8007360:	e7e4      	b.n	800732c <_vfiprintf_r+0x208>
 8007362:	bf00      	nop
 8007364:	08007fc4 	.word	0x08007fc4
 8007368:	08007fe4 	.word	0x08007fe4
 800736c:	08007fa4 	.word	0x08007fa4
 8007370:	08007e4c 	.word	0x08007e4c
 8007374:	08007e52 	.word	0x08007e52
 8007378:	08007e56 	.word	0x08007e56
 800737c:	08004ee1 	.word	0x08004ee1
 8007380:	08007101 	.word	0x08007101

08007384 <__swbuf_r>:
 8007384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007386:	460e      	mov	r6, r1
 8007388:	4614      	mov	r4, r2
 800738a:	4605      	mov	r5, r0
 800738c:	b118      	cbz	r0, 8007396 <__swbuf_r+0x12>
 800738e:	6983      	ldr	r3, [r0, #24]
 8007390:	b90b      	cbnz	r3, 8007396 <__swbuf_r+0x12>
 8007392:	f000 f9e3 	bl	800775c <__sinit>
 8007396:	4b21      	ldr	r3, [pc, #132]	; (800741c <__swbuf_r+0x98>)
 8007398:	429c      	cmp	r4, r3
 800739a:	d12b      	bne.n	80073f4 <__swbuf_r+0x70>
 800739c:	686c      	ldr	r4, [r5, #4]
 800739e:	69a3      	ldr	r3, [r4, #24]
 80073a0:	60a3      	str	r3, [r4, #8]
 80073a2:	89a3      	ldrh	r3, [r4, #12]
 80073a4:	071a      	lsls	r2, r3, #28
 80073a6:	d52f      	bpl.n	8007408 <__swbuf_r+0x84>
 80073a8:	6923      	ldr	r3, [r4, #16]
 80073aa:	b36b      	cbz	r3, 8007408 <__swbuf_r+0x84>
 80073ac:	6923      	ldr	r3, [r4, #16]
 80073ae:	6820      	ldr	r0, [r4, #0]
 80073b0:	b2f6      	uxtb	r6, r6
 80073b2:	1ac0      	subs	r0, r0, r3
 80073b4:	6963      	ldr	r3, [r4, #20]
 80073b6:	4637      	mov	r7, r6
 80073b8:	4283      	cmp	r3, r0
 80073ba:	dc04      	bgt.n	80073c6 <__swbuf_r+0x42>
 80073bc:	4621      	mov	r1, r4
 80073be:	4628      	mov	r0, r5
 80073c0:	f000 f938 	bl	8007634 <_fflush_r>
 80073c4:	bb30      	cbnz	r0, 8007414 <__swbuf_r+0x90>
 80073c6:	68a3      	ldr	r3, [r4, #8]
 80073c8:	3001      	adds	r0, #1
 80073ca:	3b01      	subs	r3, #1
 80073cc:	60a3      	str	r3, [r4, #8]
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	6022      	str	r2, [r4, #0]
 80073d4:	701e      	strb	r6, [r3, #0]
 80073d6:	6963      	ldr	r3, [r4, #20]
 80073d8:	4283      	cmp	r3, r0
 80073da:	d004      	beq.n	80073e6 <__swbuf_r+0x62>
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	07db      	lsls	r3, r3, #31
 80073e0:	d506      	bpl.n	80073f0 <__swbuf_r+0x6c>
 80073e2:	2e0a      	cmp	r6, #10
 80073e4:	d104      	bne.n	80073f0 <__swbuf_r+0x6c>
 80073e6:	4621      	mov	r1, r4
 80073e8:	4628      	mov	r0, r5
 80073ea:	f000 f923 	bl	8007634 <_fflush_r>
 80073ee:	b988      	cbnz	r0, 8007414 <__swbuf_r+0x90>
 80073f0:	4638      	mov	r0, r7
 80073f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073f4:	4b0a      	ldr	r3, [pc, #40]	; (8007420 <__swbuf_r+0x9c>)
 80073f6:	429c      	cmp	r4, r3
 80073f8:	d101      	bne.n	80073fe <__swbuf_r+0x7a>
 80073fa:	68ac      	ldr	r4, [r5, #8]
 80073fc:	e7cf      	b.n	800739e <__swbuf_r+0x1a>
 80073fe:	4b09      	ldr	r3, [pc, #36]	; (8007424 <__swbuf_r+0xa0>)
 8007400:	429c      	cmp	r4, r3
 8007402:	bf08      	it	eq
 8007404:	68ec      	ldreq	r4, [r5, #12]
 8007406:	e7ca      	b.n	800739e <__swbuf_r+0x1a>
 8007408:	4621      	mov	r1, r4
 800740a:	4628      	mov	r0, r5
 800740c:	f000 f81a 	bl	8007444 <__swsetup_r>
 8007410:	2800      	cmp	r0, #0
 8007412:	d0cb      	beq.n	80073ac <__swbuf_r+0x28>
 8007414:	f04f 37ff 	mov.w	r7, #4294967295
 8007418:	e7ea      	b.n	80073f0 <__swbuf_r+0x6c>
 800741a:	bf00      	nop
 800741c:	08007fc4 	.word	0x08007fc4
 8007420:	08007fe4 	.word	0x08007fe4
 8007424:	08007fa4 	.word	0x08007fa4

08007428 <__ascii_wctomb>:
 8007428:	4603      	mov	r3, r0
 800742a:	4608      	mov	r0, r1
 800742c:	b141      	cbz	r1, 8007440 <__ascii_wctomb+0x18>
 800742e:	2aff      	cmp	r2, #255	; 0xff
 8007430:	d904      	bls.n	800743c <__ascii_wctomb+0x14>
 8007432:	228a      	movs	r2, #138	; 0x8a
 8007434:	f04f 30ff 	mov.w	r0, #4294967295
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	4770      	bx	lr
 800743c:	2001      	movs	r0, #1
 800743e:	700a      	strb	r2, [r1, #0]
 8007440:	4770      	bx	lr
	...

08007444 <__swsetup_r>:
 8007444:	4b32      	ldr	r3, [pc, #200]	; (8007510 <__swsetup_r+0xcc>)
 8007446:	b570      	push	{r4, r5, r6, lr}
 8007448:	681d      	ldr	r5, [r3, #0]
 800744a:	4606      	mov	r6, r0
 800744c:	460c      	mov	r4, r1
 800744e:	b125      	cbz	r5, 800745a <__swsetup_r+0x16>
 8007450:	69ab      	ldr	r3, [r5, #24]
 8007452:	b913      	cbnz	r3, 800745a <__swsetup_r+0x16>
 8007454:	4628      	mov	r0, r5
 8007456:	f000 f981 	bl	800775c <__sinit>
 800745a:	4b2e      	ldr	r3, [pc, #184]	; (8007514 <__swsetup_r+0xd0>)
 800745c:	429c      	cmp	r4, r3
 800745e:	d10f      	bne.n	8007480 <__swsetup_r+0x3c>
 8007460:	686c      	ldr	r4, [r5, #4]
 8007462:	89a3      	ldrh	r3, [r4, #12]
 8007464:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007468:	0719      	lsls	r1, r3, #28
 800746a:	d42c      	bmi.n	80074c6 <__swsetup_r+0x82>
 800746c:	06dd      	lsls	r5, r3, #27
 800746e:	d411      	bmi.n	8007494 <__swsetup_r+0x50>
 8007470:	2309      	movs	r3, #9
 8007472:	6033      	str	r3, [r6, #0]
 8007474:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007478:	f04f 30ff 	mov.w	r0, #4294967295
 800747c:	81a3      	strh	r3, [r4, #12]
 800747e:	e03e      	b.n	80074fe <__swsetup_r+0xba>
 8007480:	4b25      	ldr	r3, [pc, #148]	; (8007518 <__swsetup_r+0xd4>)
 8007482:	429c      	cmp	r4, r3
 8007484:	d101      	bne.n	800748a <__swsetup_r+0x46>
 8007486:	68ac      	ldr	r4, [r5, #8]
 8007488:	e7eb      	b.n	8007462 <__swsetup_r+0x1e>
 800748a:	4b24      	ldr	r3, [pc, #144]	; (800751c <__swsetup_r+0xd8>)
 800748c:	429c      	cmp	r4, r3
 800748e:	bf08      	it	eq
 8007490:	68ec      	ldreq	r4, [r5, #12]
 8007492:	e7e6      	b.n	8007462 <__swsetup_r+0x1e>
 8007494:	0758      	lsls	r0, r3, #29
 8007496:	d512      	bpl.n	80074be <__swsetup_r+0x7a>
 8007498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800749a:	b141      	cbz	r1, 80074ae <__swsetup_r+0x6a>
 800749c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074a0:	4299      	cmp	r1, r3
 80074a2:	d002      	beq.n	80074aa <__swsetup_r+0x66>
 80074a4:	4630      	mov	r0, r6
 80074a6:	f7ff fb37 	bl	8006b18 <_free_r>
 80074aa:	2300      	movs	r3, #0
 80074ac:	6363      	str	r3, [r4, #52]	; 0x34
 80074ae:	89a3      	ldrh	r3, [r4, #12]
 80074b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074b4:	81a3      	strh	r3, [r4, #12]
 80074b6:	2300      	movs	r3, #0
 80074b8:	6063      	str	r3, [r4, #4]
 80074ba:	6923      	ldr	r3, [r4, #16]
 80074bc:	6023      	str	r3, [r4, #0]
 80074be:	89a3      	ldrh	r3, [r4, #12]
 80074c0:	f043 0308 	orr.w	r3, r3, #8
 80074c4:	81a3      	strh	r3, [r4, #12]
 80074c6:	6923      	ldr	r3, [r4, #16]
 80074c8:	b94b      	cbnz	r3, 80074de <__swsetup_r+0x9a>
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074d4:	d003      	beq.n	80074de <__swsetup_r+0x9a>
 80074d6:	4621      	mov	r1, r4
 80074d8:	4630      	mov	r0, r6
 80074da:	f000 fa05 	bl	80078e8 <__smakebuf_r>
 80074de:	89a0      	ldrh	r0, [r4, #12]
 80074e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074e4:	f010 0301 	ands.w	r3, r0, #1
 80074e8:	d00a      	beq.n	8007500 <__swsetup_r+0xbc>
 80074ea:	2300      	movs	r3, #0
 80074ec:	60a3      	str	r3, [r4, #8]
 80074ee:	6963      	ldr	r3, [r4, #20]
 80074f0:	425b      	negs	r3, r3
 80074f2:	61a3      	str	r3, [r4, #24]
 80074f4:	6923      	ldr	r3, [r4, #16]
 80074f6:	b943      	cbnz	r3, 800750a <__swsetup_r+0xc6>
 80074f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074fc:	d1ba      	bne.n	8007474 <__swsetup_r+0x30>
 80074fe:	bd70      	pop	{r4, r5, r6, pc}
 8007500:	0781      	lsls	r1, r0, #30
 8007502:	bf58      	it	pl
 8007504:	6963      	ldrpl	r3, [r4, #20]
 8007506:	60a3      	str	r3, [r4, #8]
 8007508:	e7f4      	b.n	80074f4 <__swsetup_r+0xb0>
 800750a:	2000      	movs	r0, #0
 800750c:	e7f7      	b.n	80074fe <__swsetup_r+0xba>
 800750e:	bf00      	nop
 8007510:	20000018 	.word	0x20000018
 8007514:	08007fc4 	.word	0x08007fc4
 8007518:	08007fe4 	.word	0x08007fe4
 800751c:	08007fa4 	.word	0x08007fa4

08007520 <abort>:
 8007520:	2006      	movs	r0, #6
 8007522:	b508      	push	{r3, lr}
 8007524:	f000 fa50 	bl	80079c8 <raise>
 8007528:	2001      	movs	r0, #1
 800752a:	f7fa fb30 	bl	8001b8e <_exit>
	...

08007530 <__sflush_r>:
 8007530:	898a      	ldrh	r2, [r1, #12]
 8007532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007534:	4605      	mov	r5, r0
 8007536:	0710      	lsls	r0, r2, #28
 8007538:	460c      	mov	r4, r1
 800753a:	d457      	bmi.n	80075ec <__sflush_r+0xbc>
 800753c:	684b      	ldr	r3, [r1, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	dc04      	bgt.n	800754c <__sflush_r+0x1c>
 8007542:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007544:	2b00      	cmp	r3, #0
 8007546:	dc01      	bgt.n	800754c <__sflush_r+0x1c>
 8007548:	2000      	movs	r0, #0
 800754a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800754c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800754e:	2e00      	cmp	r6, #0
 8007550:	d0fa      	beq.n	8007548 <__sflush_r+0x18>
 8007552:	2300      	movs	r3, #0
 8007554:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007558:	682f      	ldr	r7, [r5, #0]
 800755a:	602b      	str	r3, [r5, #0]
 800755c:	d032      	beq.n	80075c4 <__sflush_r+0x94>
 800755e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007560:	89a3      	ldrh	r3, [r4, #12]
 8007562:	075a      	lsls	r2, r3, #29
 8007564:	d505      	bpl.n	8007572 <__sflush_r+0x42>
 8007566:	6863      	ldr	r3, [r4, #4]
 8007568:	1ac0      	subs	r0, r0, r3
 800756a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800756c:	b10b      	cbz	r3, 8007572 <__sflush_r+0x42>
 800756e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007570:	1ac0      	subs	r0, r0, r3
 8007572:	2300      	movs	r3, #0
 8007574:	4602      	mov	r2, r0
 8007576:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007578:	4628      	mov	r0, r5
 800757a:	6a21      	ldr	r1, [r4, #32]
 800757c:	47b0      	blx	r6
 800757e:	1c43      	adds	r3, r0, #1
 8007580:	89a3      	ldrh	r3, [r4, #12]
 8007582:	d106      	bne.n	8007592 <__sflush_r+0x62>
 8007584:	6829      	ldr	r1, [r5, #0]
 8007586:	291d      	cmp	r1, #29
 8007588:	d82c      	bhi.n	80075e4 <__sflush_r+0xb4>
 800758a:	4a29      	ldr	r2, [pc, #164]	; (8007630 <__sflush_r+0x100>)
 800758c:	40ca      	lsrs	r2, r1
 800758e:	07d6      	lsls	r6, r2, #31
 8007590:	d528      	bpl.n	80075e4 <__sflush_r+0xb4>
 8007592:	2200      	movs	r2, #0
 8007594:	6062      	str	r2, [r4, #4]
 8007596:	6922      	ldr	r2, [r4, #16]
 8007598:	04d9      	lsls	r1, r3, #19
 800759a:	6022      	str	r2, [r4, #0]
 800759c:	d504      	bpl.n	80075a8 <__sflush_r+0x78>
 800759e:	1c42      	adds	r2, r0, #1
 80075a0:	d101      	bne.n	80075a6 <__sflush_r+0x76>
 80075a2:	682b      	ldr	r3, [r5, #0]
 80075a4:	b903      	cbnz	r3, 80075a8 <__sflush_r+0x78>
 80075a6:	6560      	str	r0, [r4, #84]	; 0x54
 80075a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075aa:	602f      	str	r7, [r5, #0]
 80075ac:	2900      	cmp	r1, #0
 80075ae:	d0cb      	beq.n	8007548 <__sflush_r+0x18>
 80075b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075b4:	4299      	cmp	r1, r3
 80075b6:	d002      	beq.n	80075be <__sflush_r+0x8e>
 80075b8:	4628      	mov	r0, r5
 80075ba:	f7ff faad 	bl	8006b18 <_free_r>
 80075be:	2000      	movs	r0, #0
 80075c0:	6360      	str	r0, [r4, #52]	; 0x34
 80075c2:	e7c2      	b.n	800754a <__sflush_r+0x1a>
 80075c4:	6a21      	ldr	r1, [r4, #32]
 80075c6:	2301      	movs	r3, #1
 80075c8:	4628      	mov	r0, r5
 80075ca:	47b0      	blx	r6
 80075cc:	1c41      	adds	r1, r0, #1
 80075ce:	d1c7      	bne.n	8007560 <__sflush_r+0x30>
 80075d0:	682b      	ldr	r3, [r5, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d0c4      	beq.n	8007560 <__sflush_r+0x30>
 80075d6:	2b1d      	cmp	r3, #29
 80075d8:	d001      	beq.n	80075de <__sflush_r+0xae>
 80075da:	2b16      	cmp	r3, #22
 80075dc:	d101      	bne.n	80075e2 <__sflush_r+0xb2>
 80075de:	602f      	str	r7, [r5, #0]
 80075e0:	e7b2      	b.n	8007548 <__sflush_r+0x18>
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075e8:	81a3      	strh	r3, [r4, #12]
 80075ea:	e7ae      	b.n	800754a <__sflush_r+0x1a>
 80075ec:	690f      	ldr	r7, [r1, #16]
 80075ee:	2f00      	cmp	r7, #0
 80075f0:	d0aa      	beq.n	8007548 <__sflush_r+0x18>
 80075f2:	0793      	lsls	r3, r2, #30
 80075f4:	bf18      	it	ne
 80075f6:	2300      	movne	r3, #0
 80075f8:	680e      	ldr	r6, [r1, #0]
 80075fa:	bf08      	it	eq
 80075fc:	694b      	ldreq	r3, [r1, #20]
 80075fe:	1bf6      	subs	r6, r6, r7
 8007600:	600f      	str	r7, [r1, #0]
 8007602:	608b      	str	r3, [r1, #8]
 8007604:	2e00      	cmp	r6, #0
 8007606:	dd9f      	ble.n	8007548 <__sflush_r+0x18>
 8007608:	4633      	mov	r3, r6
 800760a:	463a      	mov	r2, r7
 800760c:	4628      	mov	r0, r5
 800760e:	6a21      	ldr	r1, [r4, #32]
 8007610:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007614:	47e0      	blx	ip
 8007616:	2800      	cmp	r0, #0
 8007618:	dc06      	bgt.n	8007628 <__sflush_r+0xf8>
 800761a:	89a3      	ldrh	r3, [r4, #12]
 800761c:	f04f 30ff 	mov.w	r0, #4294967295
 8007620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007624:	81a3      	strh	r3, [r4, #12]
 8007626:	e790      	b.n	800754a <__sflush_r+0x1a>
 8007628:	4407      	add	r7, r0
 800762a:	1a36      	subs	r6, r6, r0
 800762c:	e7ea      	b.n	8007604 <__sflush_r+0xd4>
 800762e:	bf00      	nop
 8007630:	20400001 	.word	0x20400001

08007634 <_fflush_r>:
 8007634:	b538      	push	{r3, r4, r5, lr}
 8007636:	690b      	ldr	r3, [r1, #16]
 8007638:	4605      	mov	r5, r0
 800763a:	460c      	mov	r4, r1
 800763c:	b913      	cbnz	r3, 8007644 <_fflush_r+0x10>
 800763e:	2500      	movs	r5, #0
 8007640:	4628      	mov	r0, r5
 8007642:	bd38      	pop	{r3, r4, r5, pc}
 8007644:	b118      	cbz	r0, 800764e <_fflush_r+0x1a>
 8007646:	6983      	ldr	r3, [r0, #24]
 8007648:	b90b      	cbnz	r3, 800764e <_fflush_r+0x1a>
 800764a:	f000 f887 	bl	800775c <__sinit>
 800764e:	4b14      	ldr	r3, [pc, #80]	; (80076a0 <_fflush_r+0x6c>)
 8007650:	429c      	cmp	r4, r3
 8007652:	d11b      	bne.n	800768c <_fflush_r+0x58>
 8007654:	686c      	ldr	r4, [r5, #4]
 8007656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d0ef      	beq.n	800763e <_fflush_r+0xa>
 800765e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007660:	07d0      	lsls	r0, r2, #31
 8007662:	d404      	bmi.n	800766e <_fflush_r+0x3a>
 8007664:	0599      	lsls	r1, r3, #22
 8007666:	d402      	bmi.n	800766e <_fflush_r+0x3a>
 8007668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800766a:	f000 f915 	bl	8007898 <__retarget_lock_acquire_recursive>
 800766e:	4628      	mov	r0, r5
 8007670:	4621      	mov	r1, r4
 8007672:	f7ff ff5d 	bl	8007530 <__sflush_r>
 8007676:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007678:	4605      	mov	r5, r0
 800767a:	07da      	lsls	r2, r3, #31
 800767c:	d4e0      	bmi.n	8007640 <_fflush_r+0xc>
 800767e:	89a3      	ldrh	r3, [r4, #12]
 8007680:	059b      	lsls	r3, r3, #22
 8007682:	d4dd      	bmi.n	8007640 <_fflush_r+0xc>
 8007684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007686:	f000 f908 	bl	800789a <__retarget_lock_release_recursive>
 800768a:	e7d9      	b.n	8007640 <_fflush_r+0xc>
 800768c:	4b05      	ldr	r3, [pc, #20]	; (80076a4 <_fflush_r+0x70>)
 800768e:	429c      	cmp	r4, r3
 8007690:	d101      	bne.n	8007696 <_fflush_r+0x62>
 8007692:	68ac      	ldr	r4, [r5, #8]
 8007694:	e7df      	b.n	8007656 <_fflush_r+0x22>
 8007696:	4b04      	ldr	r3, [pc, #16]	; (80076a8 <_fflush_r+0x74>)
 8007698:	429c      	cmp	r4, r3
 800769a:	bf08      	it	eq
 800769c:	68ec      	ldreq	r4, [r5, #12]
 800769e:	e7da      	b.n	8007656 <_fflush_r+0x22>
 80076a0:	08007fc4 	.word	0x08007fc4
 80076a4:	08007fe4 	.word	0x08007fe4
 80076a8:	08007fa4 	.word	0x08007fa4

080076ac <std>:
 80076ac:	2300      	movs	r3, #0
 80076ae:	b510      	push	{r4, lr}
 80076b0:	4604      	mov	r4, r0
 80076b2:	e9c0 3300 	strd	r3, r3, [r0]
 80076b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076ba:	6083      	str	r3, [r0, #8]
 80076bc:	8181      	strh	r1, [r0, #12]
 80076be:	6643      	str	r3, [r0, #100]	; 0x64
 80076c0:	81c2      	strh	r2, [r0, #14]
 80076c2:	6183      	str	r3, [r0, #24]
 80076c4:	4619      	mov	r1, r3
 80076c6:	2208      	movs	r2, #8
 80076c8:	305c      	adds	r0, #92	; 0x5c
 80076ca:	f7fd fb63 	bl	8004d94 <memset>
 80076ce:	4b05      	ldr	r3, [pc, #20]	; (80076e4 <std+0x38>)
 80076d0:	6224      	str	r4, [r4, #32]
 80076d2:	6263      	str	r3, [r4, #36]	; 0x24
 80076d4:	4b04      	ldr	r3, [pc, #16]	; (80076e8 <std+0x3c>)
 80076d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80076d8:	4b04      	ldr	r3, [pc, #16]	; (80076ec <std+0x40>)
 80076da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076dc:	4b04      	ldr	r3, [pc, #16]	; (80076f0 <std+0x44>)
 80076de:	6323      	str	r3, [r4, #48]	; 0x30
 80076e0:	bd10      	pop	{r4, pc}
 80076e2:	bf00      	nop
 80076e4:	08007a01 	.word	0x08007a01
 80076e8:	08007a23 	.word	0x08007a23
 80076ec:	08007a5b 	.word	0x08007a5b
 80076f0:	08007a7f 	.word	0x08007a7f

080076f4 <_cleanup_r>:
 80076f4:	4901      	ldr	r1, [pc, #4]	; (80076fc <_cleanup_r+0x8>)
 80076f6:	f000 b8af 	b.w	8007858 <_fwalk_reent>
 80076fa:	bf00      	nop
 80076fc:	08007635 	.word	0x08007635

08007700 <__sfmoreglue>:
 8007700:	2268      	movs	r2, #104	; 0x68
 8007702:	b570      	push	{r4, r5, r6, lr}
 8007704:	1e4d      	subs	r5, r1, #1
 8007706:	4355      	muls	r5, r2
 8007708:	460e      	mov	r6, r1
 800770a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800770e:	f7ff fa6b 	bl	8006be8 <_malloc_r>
 8007712:	4604      	mov	r4, r0
 8007714:	b140      	cbz	r0, 8007728 <__sfmoreglue+0x28>
 8007716:	2100      	movs	r1, #0
 8007718:	e9c0 1600 	strd	r1, r6, [r0]
 800771c:	300c      	adds	r0, #12
 800771e:	60a0      	str	r0, [r4, #8]
 8007720:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007724:	f7fd fb36 	bl	8004d94 <memset>
 8007728:	4620      	mov	r0, r4
 800772a:	bd70      	pop	{r4, r5, r6, pc}

0800772c <__sfp_lock_acquire>:
 800772c:	4801      	ldr	r0, [pc, #4]	; (8007734 <__sfp_lock_acquire+0x8>)
 800772e:	f000 b8b3 	b.w	8007898 <__retarget_lock_acquire_recursive>
 8007732:	bf00      	nop
 8007734:	20000329 	.word	0x20000329

08007738 <__sfp_lock_release>:
 8007738:	4801      	ldr	r0, [pc, #4]	; (8007740 <__sfp_lock_release+0x8>)
 800773a:	f000 b8ae 	b.w	800789a <__retarget_lock_release_recursive>
 800773e:	bf00      	nop
 8007740:	20000329 	.word	0x20000329

08007744 <__sinit_lock_acquire>:
 8007744:	4801      	ldr	r0, [pc, #4]	; (800774c <__sinit_lock_acquire+0x8>)
 8007746:	f000 b8a7 	b.w	8007898 <__retarget_lock_acquire_recursive>
 800774a:	bf00      	nop
 800774c:	2000032a 	.word	0x2000032a

08007750 <__sinit_lock_release>:
 8007750:	4801      	ldr	r0, [pc, #4]	; (8007758 <__sinit_lock_release+0x8>)
 8007752:	f000 b8a2 	b.w	800789a <__retarget_lock_release_recursive>
 8007756:	bf00      	nop
 8007758:	2000032a 	.word	0x2000032a

0800775c <__sinit>:
 800775c:	b510      	push	{r4, lr}
 800775e:	4604      	mov	r4, r0
 8007760:	f7ff fff0 	bl	8007744 <__sinit_lock_acquire>
 8007764:	69a3      	ldr	r3, [r4, #24]
 8007766:	b11b      	cbz	r3, 8007770 <__sinit+0x14>
 8007768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800776c:	f7ff bff0 	b.w	8007750 <__sinit_lock_release>
 8007770:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007774:	6523      	str	r3, [r4, #80]	; 0x50
 8007776:	4b13      	ldr	r3, [pc, #76]	; (80077c4 <__sinit+0x68>)
 8007778:	4a13      	ldr	r2, [pc, #76]	; (80077c8 <__sinit+0x6c>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	62a2      	str	r2, [r4, #40]	; 0x28
 800777e:	42a3      	cmp	r3, r4
 8007780:	bf08      	it	eq
 8007782:	2301      	moveq	r3, #1
 8007784:	4620      	mov	r0, r4
 8007786:	bf08      	it	eq
 8007788:	61a3      	streq	r3, [r4, #24]
 800778a:	f000 f81f 	bl	80077cc <__sfp>
 800778e:	6060      	str	r0, [r4, #4]
 8007790:	4620      	mov	r0, r4
 8007792:	f000 f81b 	bl	80077cc <__sfp>
 8007796:	60a0      	str	r0, [r4, #8]
 8007798:	4620      	mov	r0, r4
 800779a:	f000 f817 	bl	80077cc <__sfp>
 800779e:	2200      	movs	r2, #0
 80077a0:	2104      	movs	r1, #4
 80077a2:	60e0      	str	r0, [r4, #12]
 80077a4:	6860      	ldr	r0, [r4, #4]
 80077a6:	f7ff ff81 	bl	80076ac <std>
 80077aa:	2201      	movs	r2, #1
 80077ac:	2109      	movs	r1, #9
 80077ae:	68a0      	ldr	r0, [r4, #8]
 80077b0:	f7ff ff7c 	bl	80076ac <std>
 80077b4:	2202      	movs	r2, #2
 80077b6:	2112      	movs	r1, #18
 80077b8:	68e0      	ldr	r0, [r4, #12]
 80077ba:	f7ff ff77 	bl	80076ac <std>
 80077be:	2301      	movs	r3, #1
 80077c0:	61a3      	str	r3, [r4, #24]
 80077c2:	e7d1      	b.n	8007768 <__sinit+0xc>
 80077c4:	08007c2c 	.word	0x08007c2c
 80077c8:	080076f5 	.word	0x080076f5

080077cc <__sfp>:
 80077cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ce:	4607      	mov	r7, r0
 80077d0:	f7ff ffac 	bl	800772c <__sfp_lock_acquire>
 80077d4:	4b1e      	ldr	r3, [pc, #120]	; (8007850 <__sfp+0x84>)
 80077d6:	681e      	ldr	r6, [r3, #0]
 80077d8:	69b3      	ldr	r3, [r6, #24]
 80077da:	b913      	cbnz	r3, 80077e2 <__sfp+0x16>
 80077dc:	4630      	mov	r0, r6
 80077de:	f7ff ffbd 	bl	800775c <__sinit>
 80077e2:	3648      	adds	r6, #72	; 0x48
 80077e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	d503      	bpl.n	80077f4 <__sfp+0x28>
 80077ec:	6833      	ldr	r3, [r6, #0]
 80077ee:	b30b      	cbz	r3, 8007834 <__sfp+0x68>
 80077f0:	6836      	ldr	r6, [r6, #0]
 80077f2:	e7f7      	b.n	80077e4 <__sfp+0x18>
 80077f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80077f8:	b9d5      	cbnz	r5, 8007830 <__sfp+0x64>
 80077fa:	4b16      	ldr	r3, [pc, #88]	; (8007854 <__sfp+0x88>)
 80077fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007800:	60e3      	str	r3, [r4, #12]
 8007802:	6665      	str	r5, [r4, #100]	; 0x64
 8007804:	f000 f847 	bl	8007896 <__retarget_lock_init_recursive>
 8007808:	f7ff ff96 	bl	8007738 <__sfp_lock_release>
 800780c:	2208      	movs	r2, #8
 800780e:	4629      	mov	r1, r5
 8007810:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007814:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007818:	6025      	str	r5, [r4, #0]
 800781a:	61a5      	str	r5, [r4, #24]
 800781c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007820:	f7fd fab8 	bl	8004d94 <memset>
 8007824:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007828:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800782c:	4620      	mov	r0, r4
 800782e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007830:	3468      	adds	r4, #104	; 0x68
 8007832:	e7d9      	b.n	80077e8 <__sfp+0x1c>
 8007834:	2104      	movs	r1, #4
 8007836:	4638      	mov	r0, r7
 8007838:	f7ff ff62 	bl	8007700 <__sfmoreglue>
 800783c:	4604      	mov	r4, r0
 800783e:	6030      	str	r0, [r6, #0]
 8007840:	2800      	cmp	r0, #0
 8007842:	d1d5      	bne.n	80077f0 <__sfp+0x24>
 8007844:	f7ff ff78 	bl	8007738 <__sfp_lock_release>
 8007848:	230c      	movs	r3, #12
 800784a:	603b      	str	r3, [r7, #0]
 800784c:	e7ee      	b.n	800782c <__sfp+0x60>
 800784e:	bf00      	nop
 8007850:	08007c2c 	.word	0x08007c2c
 8007854:	ffff0001 	.word	0xffff0001

08007858 <_fwalk_reent>:
 8007858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800785c:	4606      	mov	r6, r0
 800785e:	4688      	mov	r8, r1
 8007860:	2700      	movs	r7, #0
 8007862:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007866:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800786a:	f1b9 0901 	subs.w	r9, r9, #1
 800786e:	d505      	bpl.n	800787c <_fwalk_reent+0x24>
 8007870:	6824      	ldr	r4, [r4, #0]
 8007872:	2c00      	cmp	r4, #0
 8007874:	d1f7      	bne.n	8007866 <_fwalk_reent+0xe>
 8007876:	4638      	mov	r0, r7
 8007878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800787c:	89ab      	ldrh	r3, [r5, #12]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d907      	bls.n	8007892 <_fwalk_reent+0x3a>
 8007882:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007886:	3301      	adds	r3, #1
 8007888:	d003      	beq.n	8007892 <_fwalk_reent+0x3a>
 800788a:	4629      	mov	r1, r5
 800788c:	4630      	mov	r0, r6
 800788e:	47c0      	blx	r8
 8007890:	4307      	orrs	r7, r0
 8007892:	3568      	adds	r5, #104	; 0x68
 8007894:	e7e9      	b.n	800786a <_fwalk_reent+0x12>

08007896 <__retarget_lock_init_recursive>:
 8007896:	4770      	bx	lr

08007898 <__retarget_lock_acquire_recursive>:
 8007898:	4770      	bx	lr

0800789a <__retarget_lock_release_recursive>:
 800789a:	4770      	bx	lr

0800789c <__swhatbuf_r>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	460e      	mov	r6, r1
 80078a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a4:	4614      	mov	r4, r2
 80078a6:	2900      	cmp	r1, #0
 80078a8:	461d      	mov	r5, r3
 80078aa:	b096      	sub	sp, #88	; 0x58
 80078ac:	da08      	bge.n	80078c0 <__swhatbuf_r+0x24>
 80078ae:	2200      	movs	r2, #0
 80078b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80078b4:	602a      	str	r2, [r5, #0]
 80078b6:	061a      	lsls	r2, r3, #24
 80078b8:	d410      	bmi.n	80078dc <__swhatbuf_r+0x40>
 80078ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078be:	e00e      	b.n	80078de <__swhatbuf_r+0x42>
 80078c0:	466a      	mov	r2, sp
 80078c2:	f000 f903 	bl	8007acc <_fstat_r>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	dbf1      	blt.n	80078ae <__swhatbuf_r+0x12>
 80078ca:	9a01      	ldr	r2, [sp, #4]
 80078cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078d4:	425a      	negs	r2, r3
 80078d6:	415a      	adcs	r2, r3
 80078d8:	602a      	str	r2, [r5, #0]
 80078da:	e7ee      	b.n	80078ba <__swhatbuf_r+0x1e>
 80078dc:	2340      	movs	r3, #64	; 0x40
 80078de:	2000      	movs	r0, #0
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	b016      	add	sp, #88	; 0x58
 80078e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080078e8 <__smakebuf_r>:
 80078e8:	898b      	ldrh	r3, [r1, #12]
 80078ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078ec:	079d      	lsls	r5, r3, #30
 80078ee:	4606      	mov	r6, r0
 80078f0:	460c      	mov	r4, r1
 80078f2:	d507      	bpl.n	8007904 <__smakebuf_r+0x1c>
 80078f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	6123      	str	r3, [r4, #16]
 80078fc:	2301      	movs	r3, #1
 80078fe:	6163      	str	r3, [r4, #20]
 8007900:	b002      	add	sp, #8
 8007902:	bd70      	pop	{r4, r5, r6, pc}
 8007904:	466a      	mov	r2, sp
 8007906:	ab01      	add	r3, sp, #4
 8007908:	f7ff ffc8 	bl	800789c <__swhatbuf_r>
 800790c:	9900      	ldr	r1, [sp, #0]
 800790e:	4605      	mov	r5, r0
 8007910:	4630      	mov	r0, r6
 8007912:	f7ff f969 	bl	8006be8 <_malloc_r>
 8007916:	b948      	cbnz	r0, 800792c <__smakebuf_r+0x44>
 8007918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800791c:	059a      	lsls	r2, r3, #22
 800791e:	d4ef      	bmi.n	8007900 <__smakebuf_r+0x18>
 8007920:	f023 0303 	bic.w	r3, r3, #3
 8007924:	f043 0302 	orr.w	r3, r3, #2
 8007928:	81a3      	strh	r3, [r4, #12]
 800792a:	e7e3      	b.n	80078f4 <__smakebuf_r+0xc>
 800792c:	4b0d      	ldr	r3, [pc, #52]	; (8007964 <__smakebuf_r+0x7c>)
 800792e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007930:	89a3      	ldrh	r3, [r4, #12]
 8007932:	6020      	str	r0, [r4, #0]
 8007934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007938:	81a3      	strh	r3, [r4, #12]
 800793a:	9b00      	ldr	r3, [sp, #0]
 800793c:	6120      	str	r0, [r4, #16]
 800793e:	6163      	str	r3, [r4, #20]
 8007940:	9b01      	ldr	r3, [sp, #4]
 8007942:	b15b      	cbz	r3, 800795c <__smakebuf_r+0x74>
 8007944:	4630      	mov	r0, r6
 8007946:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800794a:	f000 f8d1 	bl	8007af0 <_isatty_r>
 800794e:	b128      	cbz	r0, 800795c <__smakebuf_r+0x74>
 8007950:	89a3      	ldrh	r3, [r4, #12]
 8007952:	f023 0303 	bic.w	r3, r3, #3
 8007956:	f043 0301 	orr.w	r3, r3, #1
 800795a:	81a3      	strh	r3, [r4, #12]
 800795c:	89a0      	ldrh	r0, [r4, #12]
 800795e:	4305      	orrs	r5, r0
 8007960:	81a5      	strh	r5, [r4, #12]
 8007962:	e7cd      	b.n	8007900 <__smakebuf_r+0x18>
 8007964:	080076f5 	.word	0x080076f5

08007968 <_malloc_usable_size_r>:
 8007968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800796c:	1f18      	subs	r0, r3, #4
 800796e:	2b00      	cmp	r3, #0
 8007970:	bfbc      	itt	lt
 8007972:	580b      	ldrlt	r3, [r1, r0]
 8007974:	18c0      	addlt	r0, r0, r3
 8007976:	4770      	bx	lr

08007978 <_raise_r>:
 8007978:	291f      	cmp	r1, #31
 800797a:	b538      	push	{r3, r4, r5, lr}
 800797c:	4604      	mov	r4, r0
 800797e:	460d      	mov	r5, r1
 8007980:	d904      	bls.n	800798c <_raise_r+0x14>
 8007982:	2316      	movs	r3, #22
 8007984:	6003      	str	r3, [r0, #0]
 8007986:	f04f 30ff 	mov.w	r0, #4294967295
 800798a:	bd38      	pop	{r3, r4, r5, pc}
 800798c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800798e:	b112      	cbz	r2, 8007996 <_raise_r+0x1e>
 8007990:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007994:	b94b      	cbnz	r3, 80079aa <_raise_r+0x32>
 8007996:	4620      	mov	r0, r4
 8007998:	f000 f830 	bl	80079fc <_getpid_r>
 800799c:	462a      	mov	r2, r5
 800799e:	4601      	mov	r1, r0
 80079a0:	4620      	mov	r0, r4
 80079a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079a6:	f000 b817 	b.w	80079d8 <_kill_r>
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d00a      	beq.n	80079c4 <_raise_r+0x4c>
 80079ae:	1c59      	adds	r1, r3, #1
 80079b0:	d103      	bne.n	80079ba <_raise_r+0x42>
 80079b2:	2316      	movs	r3, #22
 80079b4:	6003      	str	r3, [r0, #0]
 80079b6:	2001      	movs	r0, #1
 80079b8:	e7e7      	b.n	800798a <_raise_r+0x12>
 80079ba:	2400      	movs	r4, #0
 80079bc:	4628      	mov	r0, r5
 80079be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80079c2:	4798      	blx	r3
 80079c4:	2000      	movs	r0, #0
 80079c6:	e7e0      	b.n	800798a <_raise_r+0x12>

080079c8 <raise>:
 80079c8:	4b02      	ldr	r3, [pc, #8]	; (80079d4 <raise+0xc>)
 80079ca:	4601      	mov	r1, r0
 80079cc:	6818      	ldr	r0, [r3, #0]
 80079ce:	f7ff bfd3 	b.w	8007978 <_raise_r>
 80079d2:	bf00      	nop
 80079d4:	20000018 	.word	0x20000018

080079d8 <_kill_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	2300      	movs	r3, #0
 80079dc:	4d06      	ldr	r5, [pc, #24]	; (80079f8 <_kill_r+0x20>)
 80079de:	4604      	mov	r4, r0
 80079e0:	4608      	mov	r0, r1
 80079e2:	4611      	mov	r1, r2
 80079e4:	602b      	str	r3, [r5, #0]
 80079e6:	f7fa f8c2 	bl	8001b6e <_kill>
 80079ea:	1c43      	adds	r3, r0, #1
 80079ec:	d102      	bne.n	80079f4 <_kill_r+0x1c>
 80079ee:	682b      	ldr	r3, [r5, #0]
 80079f0:	b103      	cbz	r3, 80079f4 <_kill_r+0x1c>
 80079f2:	6023      	str	r3, [r4, #0]
 80079f4:	bd38      	pop	{r3, r4, r5, pc}
 80079f6:	bf00      	nop
 80079f8:	20000324 	.word	0x20000324

080079fc <_getpid_r>:
 80079fc:	f7fa b8b0 	b.w	8001b60 <_getpid>

08007a00 <__sread>:
 8007a00:	b510      	push	{r4, lr}
 8007a02:	460c      	mov	r4, r1
 8007a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a08:	f000 f894 	bl	8007b34 <_read_r>
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	bfab      	itete	ge
 8007a10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a12:	89a3      	ldrhlt	r3, [r4, #12]
 8007a14:	181b      	addge	r3, r3, r0
 8007a16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a1a:	bfac      	ite	ge
 8007a1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a1e:	81a3      	strhlt	r3, [r4, #12]
 8007a20:	bd10      	pop	{r4, pc}

08007a22 <__swrite>:
 8007a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a26:	461f      	mov	r7, r3
 8007a28:	898b      	ldrh	r3, [r1, #12]
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	05db      	lsls	r3, r3, #23
 8007a2e:	460c      	mov	r4, r1
 8007a30:	4616      	mov	r6, r2
 8007a32:	d505      	bpl.n	8007a40 <__swrite+0x1e>
 8007a34:	2302      	movs	r3, #2
 8007a36:	2200      	movs	r2, #0
 8007a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a3c:	f000 f868 	bl	8007b10 <_lseek_r>
 8007a40:	89a3      	ldrh	r3, [r4, #12]
 8007a42:	4632      	mov	r2, r6
 8007a44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a48:	81a3      	strh	r3, [r4, #12]
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	463b      	mov	r3, r7
 8007a4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a56:	f000 b817 	b.w	8007a88 <_write_r>

08007a5a <__sseek>:
 8007a5a:	b510      	push	{r4, lr}
 8007a5c:	460c      	mov	r4, r1
 8007a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a62:	f000 f855 	bl	8007b10 <_lseek_r>
 8007a66:	1c43      	adds	r3, r0, #1
 8007a68:	89a3      	ldrh	r3, [r4, #12]
 8007a6a:	bf15      	itete	ne
 8007a6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a76:	81a3      	strheq	r3, [r4, #12]
 8007a78:	bf18      	it	ne
 8007a7a:	81a3      	strhne	r3, [r4, #12]
 8007a7c:	bd10      	pop	{r4, pc}

08007a7e <__sclose>:
 8007a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a82:	f000 b813 	b.w	8007aac <_close_r>
	...

08007a88 <_write_r>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	4608      	mov	r0, r1
 8007a8e:	4611      	mov	r1, r2
 8007a90:	2200      	movs	r2, #0
 8007a92:	4d05      	ldr	r5, [pc, #20]	; (8007aa8 <_write_r+0x20>)
 8007a94:	602a      	str	r2, [r5, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	f7fa f8a0 	bl	8001bdc <_write>
 8007a9c:	1c43      	adds	r3, r0, #1
 8007a9e:	d102      	bne.n	8007aa6 <_write_r+0x1e>
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	b103      	cbz	r3, 8007aa6 <_write_r+0x1e>
 8007aa4:	6023      	str	r3, [r4, #0]
 8007aa6:	bd38      	pop	{r3, r4, r5, pc}
 8007aa8:	20000324 	.word	0x20000324

08007aac <_close_r>:
 8007aac:	b538      	push	{r3, r4, r5, lr}
 8007aae:	2300      	movs	r3, #0
 8007ab0:	4d05      	ldr	r5, [pc, #20]	; (8007ac8 <_close_r+0x1c>)
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	4608      	mov	r0, r1
 8007ab6:	602b      	str	r3, [r5, #0]
 8007ab8:	f7fa f8ac 	bl	8001c14 <_close>
 8007abc:	1c43      	adds	r3, r0, #1
 8007abe:	d102      	bne.n	8007ac6 <_close_r+0x1a>
 8007ac0:	682b      	ldr	r3, [r5, #0]
 8007ac2:	b103      	cbz	r3, 8007ac6 <_close_r+0x1a>
 8007ac4:	6023      	str	r3, [r4, #0]
 8007ac6:	bd38      	pop	{r3, r4, r5, pc}
 8007ac8:	20000324 	.word	0x20000324

08007acc <_fstat_r>:
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	2300      	movs	r3, #0
 8007ad0:	4d06      	ldr	r5, [pc, #24]	; (8007aec <_fstat_r+0x20>)
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	4608      	mov	r0, r1
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	602b      	str	r3, [r5, #0]
 8007ada:	f7fa f8a6 	bl	8001c2a <_fstat>
 8007ade:	1c43      	adds	r3, r0, #1
 8007ae0:	d102      	bne.n	8007ae8 <_fstat_r+0x1c>
 8007ae2:	682b      	ldr	r3, [r5, #0]
 8007ae4:	b103      	cbz	r3, 8007ae8 <_fstat_r+0x1c>
 8007ae6:	6023      	str	r3, [r4, #0]
 8007ae8:	bd38      	pop	{r3, r4, r5, pc}
 8007aea:	bf00      	nop
 8007aec:	20000324 	.word	0x20000324

08007af0 <_isatty_r>:
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	2300      	movs	r3, #0
 8007af4:	4d05      	ldr	r5, [pc, #20]	; (8007b0c <_isatty_r+0x1c>)
 8007af6:	4604      	mov	r4, r0
 8007af8:	4608      	mov	r0, r1
 8007afa:	602b      	str	r3, [r5, #0]
 8007afc:	f7fa f8a4 	bl	8001c48 <_isatty>
 8007b00:	1c43      	adds	r3, r0, #1
 8007b02:	d102      	bne.n	8007b0a <_isatty_r+0x1a>
 8007b04:	682b      	ldr	r3, [r5, #0]
 8007b06:	b103      	cbz	r3, 8007b0a <_isatty_r+0x1a>
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	bd38      	pop	{r3, r4, r5, pc}
 8007b0c:	20000324 	.word	0x20000324

08007b10 <_lseek_r>:
 8007b10:	b538      	push	{r3, r4, r5, lr}
 8007b12:	4604      	mov	r4, r0
 8007b14:	4608      	mov	r0, r1
 8007b16:	4611      	mov	r1, r2
 8007b18:	2200      	movs	r2, #0
 8007b1a:	4d05      	ldr	r5, [pc, #20]	; (8007b30 <_lseek_r+0x20>)
 8007b1c:	602a      	str	r2, [r5, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	f7fa f89c 	bl	8001c5c <_lseek>
 8007b24:	1c43      	adds	r3, r0, #1
 8007b26:	d102      	bne.n	8007b2e <_lseek_r+0x1e>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	b103      	cbz	r3, 8007b2e <_lseek_r+0x1e>
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	bd38      	pop	{r3, r4, r5, pc}
 8007b30:	20000324 	.word	0x20000324

08007b34 <_read_r>:
 8007b34:	b538      	push	{r3, r4, r5, lr}
 8007b36:	4604      	mov	r4, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	4d05      	ldr	r5, [pc, #20]	; (8007b54 <_read_r+0x20>)
 8007b40:	602a      	str	r2, [r5, #0]
 8007b42:	461a      	mov	r2, r3
 8007b44:	f7fa f82d 	bl	8001ba2 <_read>
 8007b48:	1c43      	adds	r3, r0, #1
 8007b4a:	d102      	bne.n	8007b52 <_read_r+0x1e>
 8007b4c:	682b      	ldr	r3, [r5, #0]
 8007b4e:	b103      	cbz	r3, 8007b52 <_read_r+0x1e>
 8007b50:	6023      	str	r3, [r4, #0]
 8007b52:	bd38      	pop	{r3, r4, r5, pc}
 8007b54:	20000324 	.word	0x20000324

08007b58 <_init>:
 8007b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5a:	bf00      	nop
 8007b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b5e:	bc08      	pop	{r3}
 8007b60:	469e      	mov	lr, r3
 8007b62:	4770      	bx	lr

08007b64 <_fini>:
 8007b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b66:	bf00      	nop
 8007b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b6a:	bc08      	pop	{r3}
 8007b6c:	469e      	mov	lr, r3
 8007b6e:	4770      	bx	lr
